
015Task2_ADC_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d310  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800d4e0  0800d4e0  0000e4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db98  0800db98  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800db98  0800db98  0000eb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dba0  0800dba0  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dba0  0800dba0  0000eba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dba4  0800dba4  0000eba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800dba8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003518  200001d8  0800dd80  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200036f0  0800dd80  0000f6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ec3  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b66  00000000  00000000  000260cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00029c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb8  00000000  00000000  0002b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243ec  00000000  00000000  0002c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a503  00000000  00000000  0005042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8ce3  00000000  00000000  0006a92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153612  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a8c  00000000  00000000  00153658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015a0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d4c8 	.word	0x0800d4c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800d4c8 	.word	0x0800d4c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f103 0208 	add.w	r2, r3, #8
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f103 0208 	add.w	r2, r3, #8
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f103 0208 	add.w	r2, r3, #8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001102:	b480      	push	{r7}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d103      	bne.n	8001122 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e00c      	b.n	800113c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3308      	adds	r3, #8
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e002      	b.n	8001130 <vListInsert+0x2e>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	429a      	cmp	r2, r3
 800113a:	d2f6      	bcs.n	800112a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6892      	ldr	r2, [r2, #8]
 800118a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6852      	ldr	r2, [r2, #4]
 8001194:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	d103      	bne.n	80011a8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	1e5a      	subs	r2, r3, #1
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10b      	bne.n	80011f4 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80011dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011e0:	f383 8811 	msr	BASEPRI, r3
 80011e4:	f3bf 8f6f 	isb	sy
 80011e8:	f3bf 8f4f 	dsb	sy
 80011ec:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80011f4:	f001 fc9a 	bl	8002b2c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001200:	68f9      	ldr	r1, [r7, #12]
 8001202:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	441a      	add	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001224:	3b01      	subs	r3, #1
 8001226:	68f9      	ldr	r1, [r7, #12]
 8001228:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800122a:	fb01 f303 	mul.w	r3, r1, r3
 800122e:	441a      	add	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	22ff      	movs	r2, #255	@ 0xff
 8001238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	22ff      	movs	r2, #255	@ 0xff
 8001240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d114      	bne.n	8001274 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d01a      	beq.n	8001288 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3310      	adds	r3, #16
 8001256:	4618      	mov	r0, r3
 8001258:	f000 ff1a 	bl	8002090 <xTaskRemoveFromEventList>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d012      	beq.n	8001288 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <xQueueGenericReset+0xd0>)
 8001264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	f3bf 8f4f 	dsb	sy
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	e009      	b.n	8001288 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3310      	adds	r3, #16
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fef1 	bl	8001060 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3324      	adds	r3, #36	@ 0x24
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff feec 	bl	8001060 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001288:	f001 fc82 	bl	8002b90 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	e000ed04 	.word	0xe000ed04

0800129c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	4613      	mov	r3, r2
 80012a8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10b      	bne.n	80012c8 <xQueueGenericCreate+0x2c>
        __asm volatile
 80012b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012b4:	f383 8811 	msr	BASEPRI, r3
 80012b8:	f3bf 8f6f 	isb	sy
 80012bc:	f3bf 8f4f 	dsb	sy
 80012c0:	61bb      	str	r3, [r7, #24]
    }
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <xQueueGenericCreate+0x4a>
 80012d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d101      	bne.n	80012ea <xQueueGenericCreate+0x4e>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <xQueueGenericCreate+0x50>
 80012ea:	2300      	movs	r3, #0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10b      	bne.n	8001308 <xQueueGenericCreate+0x6c>
        __asm volatile
 80012f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012f4:	f383 8811 	msr	BASEPRI, r3
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	f3bf 8f4f 	dsb	sy
 8001300:	617b      	str	r3, [r7, #20]
    }
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800130e:	d90b      	bls.n	8001328 <xQueueGenericCreate+0x8c>
        __asm volatile
 8001310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001314:	f383 8811 	msr	BASEPRI, r3
 8001318:	f3bf 8f6f 	isb	sy
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	613b      	str	r3, [r7, #16]
    }
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	3350      	adds	r3, #80	@ 0x50
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fd27 	bl	8002d80 <pvPortMalloc>
 8001332:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00d      	beq.n	8001356 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3350      	adds	r3, #80	@ 0x50
 8001342:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001344:	79fa      	ldrb	r2, [r7, #7]
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4613      	mov	r3, r2
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 f805 	bl	8001360 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001356:	6a3b      	ldr	r3, [r7, #32]
    }
 8001358:	4618      	mov	r0, r3
 800135a:	3728      	adds	r7, #40	@ 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d103      	bne.n	800137c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e002      	b.n	8001382 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800138e:	2101      	movs	r1, #1
 8001390:	69b8      	ldr	r0, [r7, #24]
 8001392:	f7ff ff19 	bl	80011c8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	@ 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 80013be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10b      	bne.n	80013dc <xQueueGenericSend+0x34>
        __asm volatile
 80013c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013c8:	f383 8811 	msr	BASEPRI, r3
 80013cc:	f3bf 8f6f 	isb	sy
 80013d0:	f3bf 8f4f 	dsb	sy
 80013d4:	623b      	str	r3, [r7, #32]
    }
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d103      	bne.n	80013ea <xQueueGenericSend+0x42>
 80013e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <xQueueGenericSend+0x46>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <xQueueGenericSend+0x48>
 80013ee:	2300      	movs	r3, #0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10b      	bne.n	800140c <xQueueGenericSend+0x64>
        __asm volatile
 80013f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013f8:	f383 8811 	msr	BASEPRI, r3
 80013fc:	f3bf 8f6f 	isb	sy
 8001400:	f3bf 8f4f 	dsb	sy
 8001404:	61fb      	str	r3, [r7, #28]
    }
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d103      	bne.n	800141a <xQueueGenericSend+0x72>
 8001412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <xQueueGenericSend+0x76>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <xQueueGenericSend+0x78>
 800141e:	2300      	movs	r3, #0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10b      	bne.n	800143c <xQueueGenericSend+0x94>
        __asm volatile
 8001424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001428:	f383 8811 	msr	BASEPRI, r3
 800142c:	f3bf 8f6f 	isb	sy
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	61bb      	str	r3, [r7, #24]
    }
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <xQueueGenericSend+0x90>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800143c:	f001 fb76 	bl	8002b2c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001448:	429a      	cmp	r2, r3
 800144a:	d302      	bcc.n	8001452 <xQueueGenericSend+0xaa>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d129      	bne.n	80014a6 <xQueueGenericSend+0xfe>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001458:	f000 f95a 	bl	8001710 <prvCopyDataToQueue>
 800145c:	6278      	str	r0, [r7, #36]	@ 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800145e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	2b00      	cmp	r3, #0
 8001464:	d010      	beq.n	8001488 <xQueueGenericSend+0xe0>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001468:	3324      	adds	r3, #36	@ 0x24
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fe10 	bl	8002090 <xTaskRemoveFromEventList>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d013      	beq.n	800149e <xQueueGenericSend+0xf6>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001476:	4b40      	ldr	r3, [pc, #256]	@ (8001578 <xQueueGenericSend+0x1d0>)
 8001478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f3bf 8f4f 	dsb	sy
 8001482:	f3bf 8f6f 	isb	sy
 8001486:	e00a      	b.n	800149e <xQueueGenericSend+0xf6>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <xQueueGenericSend+0xf6>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800148e:	4b3a      	ldr	r3, [pc, #232]	@ (8001578 <xQueueGenericSend+0x1d0>)
 8001490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800149e:	f001 fb77 	bl	8002b90 <vPortExitCritical>
                return pdPASS;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e063      	b.n	800156e <xQueueGenericSend+0x1c6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d103      	bne.n	80014b4 <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80014ac:	f001 fb70 	bl	8002b90 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e05c      	b.n	800156e <xQueueGenericSend+0x1c6>
                }
                else if( xEntryTimeSet == pdFALSE )
 80014b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fe4a 	bl	8002158 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80014c8:	f001 fb62 	bl	8002b90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80014cc:	f000 fbf8 	bl	8001cc0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80014d0:	f001 fb2c 	bl	8002b2c <vPortEnterCritical>
 80014d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d103      	bne.n	80014ea <xQueueGenericSend+0x142>
 80014e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80014ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f6:	d103      	bne.n	8001500 <xQueueGenericSend+0x158>
 80014f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001500:	f001 fb46 	bl	8002b90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001504:	1d3a      	adds	r2, r7, #4
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fe39 	bl	8002184 <xTaskCheckForTimeOut>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d124      	bne.n	8001562 <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800151a:	f000 f9f1 	bl	8001900 <prvIsQueueFull>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d018      	beq.n	8001556 <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001526:	3310      	adds	r3, #16
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fd89 	bl	8002044 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001534:	f000 f97c 	bl	8001830 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001538:	f000 fbd0 	bl	8001cdc <xTaskResumeAll>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	f47f af7c 	bne.w	800143c <xQueueGenericSend+0x94>
                {
                    portYIELD_WITHIN_API();
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <xQueueGenericSend+0x1d0>)
 8001546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f3bf 8f4f 	dsb	sy
 8001550:	f3bf 8f6f 	isb	sy
 8001554:	e772      	b.n	800143c <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001558:	f000 f96a 	bl	8001830 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800155c:	f000 fbbe 	bl	8001cdc <xTaskResumeAll>
 8001560:	e76c      	b.n	800143c <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001564:	f000 f964 	bl	8001830 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001568:	f000 fbb8 	bl	8001cdc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800156c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800156e:	4618      	mov	r0, r3
 8001570:	3730      	adds	r7, #48	@ 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000ed04 	.word	0xe000ed04

0800157c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	@ 0x30
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10b      	bne.n	80015ae <xQueueReceive+0x32>
        __asm volatile
 8001596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800159a:	f383 8811 	msr	BASEPRI, r3
 800159e:	f3bf 8f6f 	isb	sy
 80015a2:	f3bf 8f4f 	dsb	sy
 80015a6:	623b      	str	r3, [r7, #32]
    }
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	e7fd      	b.n	80015aa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <xQueueReceive+0x40>
 80015b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <xQueueReceive+0x44>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <xQueueReceive+0x46>
 80015c0:	2300      	movs	r3, #0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10b      	bne.n	80015de <xQueueReceive+0x62>
        __asm volatile
 80015c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ca:	f383 8811 	msr	BASEPRI, r3
 80015ce:	f3bf 8f6f 	isb	sy
 80015d2:	f3bf 8f4f 	dsb	sy
 80015d6:	61fb      	str	r3, [r7, #28]
    }
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	e7fd      	b.n	80015da <xQueueReceive+0x5e>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80015de:	f001 faa5 	bl	8002b2c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d01f      	beq.n	800162e <xQueueReceive+0xb2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80015f2:	f000 f8f7 	bl	80017e4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	1e5a      	subs	r2, r3, #1
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00f      	beq.n	8001626 <xQueueReceive+0xaa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	3310      	adds	r3, #16
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd40 	bl	8002090 <xTaskRemoveFromEventList>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <xQueueReceive+0xaa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <xQueueReceive+0x190>)
 8001618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001626:	f001 fab3 	bl	8002b90 <vPortExitCritical>
                return pdPASS;
 800162a:	2301      	movs	r3, #1
 800162c:	e069      	b.n	8001702 <xQueueReceive+0x186>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <xQueueReceive+0xc0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001634:	f001 faac 	bl	8002b90 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001638:	2300      	movs	r3, #0
 800163a:	e062      	b.n	8001702 <xQueueReceive+0x186>
                }
                else if( xEntryTimeSet == pdFALSE )
 800163c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <xQueueReceive+0xd4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fd86 	bl	8002158 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800164c:	2301      	movs	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001650:	f001 fa9e 	bl	8002b90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001654:	f000 fb34 	bl	8001cc0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001658:	f001 fa68 	bl	8002b2c <vPortEnterCritical>
 800165c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800165e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001662:	b25b      	sxtb	r3, r3
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d103      	bne.n	8001672 <xQueueReceive+0xf6>
 800166a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001678:	b25b      	sxtb	r3, r3
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167e:	d103      	bne.n	8001688 <xQueueReceive+0x10c>
 8001680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001688:	f001 fa82 	bl	8002b90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800168c:	1d3a      	adds	r2, r7, #4
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fd75 	bl	8002184 <xTaskCheckForTimeOut>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d123      	bne.n	80016e8 <xQueueReceive+0x16c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016a2:	f000 f917 	bl	80018d4 <prvIsQueueEmpty>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d017      	beq.n	80016dc <xQueueReceive+0x160>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80016ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ae:	3324      	adds	r3, #36	@ 0x24
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fcc5 	bl	8002044 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80016ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016bc:	f000 f8b8 	bl	8001830 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80016c0:	f000 fb0c 	bl	8001cdc <xTaskResumeAll>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d189      	bne.n	80015de <xQueueReceive+0x62>
                {
                    portYIELD_WITHIN_API();
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <xQueueReceive+0x190>)
 80016cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	e780      	b.n	80015de <xQueueReceive+0x62>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80016dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016de:	f000 f8a7 	bl	8001830 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80016e2:	f000 fafb 	bl	8001cdc <xTaskResumeAll>
 80016e6:	e77a      	b.n	80015de <xQueueReceive+0x62>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80016e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016ea:	f000 f8a1 	bl	8001830 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80016ee:	f000 faf5 	bl	8001cdc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016f4:	f000 f8ee 	bl	80018d4 <prvIsQueueEmpty>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f43f af6f 	beq.w	80015de <xQueueReceive+0x62>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001700:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001702:	4618      	mov	r0, r3
 8001704:	3730      	adds	r7, #48	@ 0x30
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000ed04 	.word	0xe000ed04

08001710 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001724:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10d      	bne.n	800174a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d14d      	bne.n	80017d2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fe48 	bl	80023d0 <xTaskPriorityDisinherit>
 8001740:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	e043      	b.n	80017d2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d119      	bne.n	8001784 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6858      	ldr	r0, [r3, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	461a      	mov	r2, r3
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	f007 fb31 	bl	8008dc2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	441a      	add	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	429a      	cmp	r2, r3
 8001778:	d32b      	bcc.n	80017d2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	e026      	b.n	80017d2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	68d8      	ldr	r0, [r3, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	461a      	mov	r2, r3
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	f007 fb17 	bl	8008dc2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	425b      	negs	r3, r3
 800179e:	441a      	add	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	425b      	negs	r3, r3
 80017ba:	441a      	add	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d105      	bne.n	80017d2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80017da:	697b      	ldr	r3, [r7, #20]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d018      	beq.n	8001828 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	441a      	add	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d303      	bcc.n	8001818 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68d9      	ldr	r1, [r3, #12]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	461a      	mov	r2, r3
 8001822:	6838      	ldr	r0, [r7, #0]
 8001824:	f007 facd 	bl	8008dc2 <memcpy>
    }
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001838:	f001 f978 	bl	8002b2c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001842:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001844:	e011      	b.n	800186a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	2b00      	cmp	r3, #0
 800184c:	d012      	beq.n	8001874 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3324      	adds	r3, #36	@ 0x24
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fc1c 	bl	8002090 <xTaskRemoveFromEventList>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800185e:	f000 fcf9 	bl	8002254 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	3b01      	subs	r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	2b00      	cmp	r3, #0
 8001870:	dce9      	bgt.n	8001846 <prvUnlockQueue+0x16>
 8001872:	e000      	b.n	8001876 <prvUnlockQueue+0x46>
                        break;
 8001874:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	22ff      	movs	r2, #255	@ 0xff
 800187a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800187e:	f001 f987 	bl	8002b90 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001882:	f001 f953 	bl	8002b2c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800188c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800188e:	e011      	b.n	80018b4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d012      	beq.n	80018be <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3310      	adds	r3, #16
 800189c:	4618      	mov	r0, r3
 800189e:	f000 fbf7 	bl	8002090 <xTaskRemoveFromEventList>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80018a8:	f000 fcd4 	bl	8002254 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dce9      	bgt.n	8001890 <prvUnlockQueue+0x60>
 80018bc:	e000      	b.n	80018c0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80018be:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	22ff      	movs	r2, #255	@ 0xff
 80018c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80018c8:	f001 f962 	bl	8002b90 <vPortExitCritical>
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80018dc:	f001 f926 	bl	8002b2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e001      	b.n	80018f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80018f2:	f001 f94d 	bl	8002b90 <vPortExitCritical>

    return xReturn;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001908:	f001 f910 	bl	8002b2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001914:	429a      	cmp	r2, r3
 8001916:	d102      	bne.n	800191e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001918:	2301      	movs	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e001      	b.n	8001922 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001922:	f001 f935 	bl	8002b90 <vPortExitCritical>

    return xReturn;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af04      	add	r7, sp, #16
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fa1b 	bl	8002d80 <pvPortMalloc>
 800194a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00e      	beq.n	8001970 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001952:	2058      	movs	r0, #88	@ 0x58
 8001954:	f001 fa14 	bl	8002d80 <pvPortMalloc>
 8001958:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	631a      	str	r2, [r3, #48]	@ 0x30
 8001966:	e005      	b.n	8001974 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001968:	6978      	ldr	r0, [r7, #20]
 800196a:	f001 faeb 	bl	8002f44 <vPortFree>
 800196e:	e001      	b.n	8001974 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d013      	beq.n	80019a2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	2300      	movs	r3, #0
 800197e:	9303      	str	r3, [sp, #12]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f80e 	bl	80019b2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001996:	69f8      	ldr	r0, [r7, #28]
 8001998:	f000 f8a2 	bl	8001ae0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800199c:	2301      	movs	r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	e002      	b.n	80019a8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80019a8:	69bb      	ldr	r3, [r7, #24]
    }
 80019aa:	4618      	mov	r0, r3
 80019ac:	3720      	adds	r7, #32
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b088      	sub	sp, #32
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	461a      	mov	r2, r3
 80019ca:	21a5      	movs	r1, #165	@ 0xa5
 80019cc:	f007 f96d 	bl	8008caa <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019da:	3b01      	subs	r3, #1
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f023 0307 	bic.w	r3, r3, #7
 80019e8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <prvInitialiseNewTask+0x5a>
        __asm volatile
 80019f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	617b      	str	r3, [r7, #20]
    }
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01f      	beq.n	8001a52 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	e012      	b.n	8001a3e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	7819      	ldrb	r1, [r3, #0]
 8001a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4413      	add	r3, r2
 8001a26:	3334      	adds	r3, #52	@ 0x34
 8001a28:	460a      	mov	r2, r1
 8001a2a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d9e9      	bls.n	8001a18 <prvInitialiseNewTask+0x66>
 8001a44:	e000      	b.n	8001a48 <prvInitialiseNewTask+0x96>
            {
                break;
 8001a46:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001a50:	e003      	b.n	8001a5a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d901      	bls.n	8001a64 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a60:	2304      	movs	r3, #4
 8001a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a68:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a6e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a72:	2200      	movs	r2, #0
 8001a74:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a78:	3304      	adds	r3, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb10 	bl	80010a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a82:	3318      	adds	r3, #24
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fb0b 	bl	80010a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a8e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a92:	f1c3 0205 	rsb	r2, r3, #5
 8001a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a98:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a9e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa2:	3350      	adds	r3, #80	@ 0x50
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f007 f8fe 	bl	8008caa <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab0:	3354      	adds	r3, #84	@ 0x54
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f007 f8f7 	bl	8008caa <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	68f9      	ldr	r1, [r7, #12]
 8001ac0:	69b8      	ldr	r0, [r7, #24]
 8001ac2:	f000 fe7f 	bl	80027c4 <pxPortInitialiseStack>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aca:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ad6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001ae8:	f001 f820 	bl	8002b2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001aec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba0 <prvAddNewTaskToReadyList+0xc0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba0 <prvAddNewTaskToReadyList+0xc0>)
 8001af4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001af6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba4 <prvAddNewTaskToReadyList+0xc4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001afe:	4a29      	ldr	r2, [pc, #164]	@ (8001ba4 <prvAddNewTaskToReadyList+0xc4>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b04:	4b26      	ldr	r3, [pc, #152]	@ (8001ba0 <prvAddNewTaskToReadyList+0xc0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d110      	bne.n	8001b2e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001b0c:	f000 fbc6 	bl	800229c <prvInitialiseTaskLists>
 8001b10:	e00d      	b.n	8001b2e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001b12:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <prvAddNewTaskToReadyList+0xc8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <prvAddNewTaskToReadyList+0xc4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d802      	bhi.n	8001b2e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba4 <prvAddNewTaskToReadyList+0xc4>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <prvAddNewTaskToReadyList+0xcc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3301      	adds	r3, #1
 8001b34:	4a1d      	ldr	r2, [pc, #116]	@ (8001bac <prvAddNewTaskToReadyList+0xcc>)
 8001b36:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <prvAddNewTaskToReadyList+0xcc>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b44:	2201      	movs	r2, #1
 8001b46:	409a      	lsls	r2, r3
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <prvAddNewTaskToReadyList+0xd0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	4a18      	ldr	r2, [pc, #96]	@ (8001bb0 <prvAddNewTaskToReadyList+0xd0>)
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4a15      	ldr	r2, [pc, #84]	@ (8001bb4 <prvAddNewTaskToReadyList+0xd4>)
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3304      	adds	r3, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f7ff faa6 	bl	80010ba <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001b6e:	f001 f80f 	bl	8002b90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <prvAddNewTaskToReadyList+0xc8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00e      	beq.n	8001b98 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <prvAddNewTaskToReadyList+0xc4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <prvAddNewTaskToReadyList+0xd8>)
 8001b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	f3bf 8f4f 	dsb	sy
 8001b94:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200002cc 	.word	0x200002cc
 8001ba4:	200001f4 	.word	0x200001f4
 8001ba8:	200002d8 	.word	0x200002d8
 8001bac:	200002e8 	.word	0x200002e8
 8001bb0:	200002d4 	.word	0x200002d4
 8001bb4:	200001f8 	.word	0x200001f8
 8001bb8:	e000ed04 	.word	0xe000ed04

08001bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d018      	beq.n	8001c00 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <vTaskDelay+0x64>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <vTaskDelay+0x32>
        __asm volatile
 8001bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bda:	f383 8811 	msr	BASEPRI, r3
 8001bde:	f3bf 8f6f 	isb	sy
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	60bb      	str	r3, [r7, #8]
    }
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	e7fd      	b.n	8001bea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001bee:	f000 f867 	bl	8001cc0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fd7f 	bl	80026f8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001bfa:	f000 f86f 	bl	8001cdc <xTaskResumeAll>
 8001bfe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <vTaskDelay+0x68>)
 8001c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	f3bf 8f4f 	dsb	sy
 8001c12:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200002f4 	.word	0x200002f4
 8001c24:	e000ed04 	.word	0xe000ed04

08001c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <vTaskStartScheduler+0x7c>)
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2300      	movs	r3, #0
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2300      	movs	r3, #0
 8001c38:	2282      	movs	r2, #130	@ 0x82
 8001c3a:	491b      	ldr	r1, [pc, #108]	@ (8001ca8 <vTaskStartScheduler+0x80>)
 8001c3c:	481b      	ldr	r0, [pc, #108]	@ (8001cac <vTaskStartScheduler+0x84>)
 8001c3e:	f7ff fe77 	bl	8001930 <xTaskCreate>
 8001c42:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d116      	bne.n	8001c78 <vTaskStartScheduler+0x50>
        __asm volatile
 8001c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c4e:	f383 8811 	msr	BASEPRI, r3
 8001c52:	f3bf 8f6f 	isb	sy
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	60bb      	str	r3, [r7, #8]
    }
 8001c5c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <vTaskStartScheduler+0x88>)
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001c66:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <vTaskStartScheduler+0x8c>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <vTaskStartScheduler+0x90>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001c72:	f000 fe37 	bl	80028e4 <xPortStartScheduler>
 8001c76:	e00f      	b.n	8001c98 <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7e:	d10b      	bne.n	8001c98 <vTaskStartScheduler+0x70>
        __asm volatile
 8001c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c84:	f383 8811 	msr	BASEPRI, r3
 8001c88:	f3bf 8f6f 	isb	sy
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	607b      	str	r3, [r7, #4]
    }
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <vTaskStartScheduler+0x94>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200002f0 	.word	0x200002f0
 8001ca8:	0800d4e0 	.word	0x0800d4e0
 8001cac:	0800226d 	.word	0x0800226d
 8001cb0:	200002ec 	.word	0x200002ec
 8001cb4:	200002d8 	.word	0x200002d8
 8001cb8:	200002d0 	.word	0x200002d0
 8001cbc:	0800d570 	.word	0x0800d570

08001cc0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <vTaskSuspendAll+0x18>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a03      	ldr	r2, [pc, #12]	@ (8001cd8 <vTaskSuspendAll+0x18>)
 8001ccc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	200002f4 	.word	0x200002f4

08001cdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001cea:	4b42      	ldr	r3, [pc, #264]	@ (8001df4 <xTaskResumeAll+0x118>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10b      	bne.n	8001d0a <xTaskResumeAll+0x2e>
        __asm volatile
 8001cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	603b      	str	r3, [r7, #0]
    }
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	e7fd      	b.n	8001d06 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001d0a:	f000 ff0f 	bl	8002b2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001d0e:	4b39      	ldr	r3, [pc, #228]	@ (8001df4 <xTaskResumeAll+0x118>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	4a37      	ldr	r2, [pc, #220]	@ (8001df4 <xTaskResumeAll+0x118>)
 8001d16:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d18:	4b36      	ldr	r3, [pc, #216]	@ (8001df4 <xTaskResumeAll+0x118>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d161      	bne.n	8001de4 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d20:	4b35      	ldr	r3, [pc, #212]	@ (8001df8 <xTaskResumeAll+0x11c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d05d      	beq.n	8001de4 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d28:	e02e      	b.n	8001d88 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d2a:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <xTaskResumeAll+0x120>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3318      	adds	r3, #24
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fa1c 	bl	8001174 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fa17 	bl	8001174 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e00 <xTaskResumeAll+0x124>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	4a2a      	ldr	r2, [pc, #168]	@ (8001e00 <xTaskResumeAll+0x124>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4a27      	ldr	r2, [pc, #156]	@ (8001e04 <xTaskResumeAll+0x128>)
 8001d66:	441a      	add	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7ff f9a3 	bl	80010ba <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d78:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <xTaskResumeAll+0x12c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d302      	bcc.n	8001d88 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8001d82:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <xTaskResumeAll+0x130>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <xTaskResumeAll+0x120>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1cc      	bne.n	8001d2a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001d96:	f000 faff 	bl	8002398 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <xTaskResumeAll+0x134>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d010      	beq.n	8001dc8 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001da6:	f000 f837 	bl	8001e18 <xTaskIncrementTick>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <xTaskResumeAll+0x130>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f1      	bne.n	8001da6 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <xTaskResumeAll+0x134>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001dc8:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <xTaskResumeAll+0x130>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d009      	beq.n	8001de4 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <xTaskResumeAll+0x138>)
 8001dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f3bf 8f4f 	dsb	sy
 8001de0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001de4:	f000 fed4 	bl	8002b90 <vPortExitCritical>

    return xAlreadyYielded;
 8001de8:	68bb      	ldr	r3, [r7, #8]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200002f4 	.word	0x200002f4
 8001df8:	200002cc 	.word	0x200002cc
 8001dfc:	2000028c 	.word	0x2000028c
 8001e00:	200002d4 	.word	0x200002d4
 8001e04:	200001f8 	.word	0x200001f8
 8001e08:	200001f4 	.word	0x200001f4
 8001e0c:	200002e0 	.word	0x200002e0
 8001e10:	200002dc 	.word	0x200002dc
 8001e14:	e000ed04 	.word	0xe000ed04

08001e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e22:	4b4f      	ldr	r3, [pc, #316]	@ (8001f60 <xTaskIncrementTick+0x148>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 808f 	bne.w	8001f4a <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f64 <xTaskIncrementTick+0x14c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001e34:	4a4b      	ldr	r2, [pc, #300]	@ (8001f64 <xTaskIncrementTick+0x14c>)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d121      	bne.n	8001e84 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001e40:	4b49      	ldr	r3, [pc, #292]	@ (8001f68 <xTaskIncrementTick+0x150>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <xTaskIncrementTick+0x4a>
        __asm volatile
 8001e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	603b      	str	r3, [r7, #0]
    }
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	e7fd      	b.n	8001e5e <xTaskIncrementTick+0x46>
 8001e62:	4b41      	ldr	r3, [pc, #260]	@ (8001f68 <xTaskIncrementTick+0x150>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	4b40      	ldr	r3, [pc, #256]	@ (8001f6c <xTaskIncrementTick+0x154>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8001f68 <xTaskIncrementTick+0x150>)
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4a3e      	ldr	r2, [pc, #248]	@ (8001f6c <xTaskIncrementTick+0x154>)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b3e      	ldr	r3, [pc, #248]	@ (8001f70 <xTaskIncrementTick+0x158>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f70 <xTaskIncrementTick+0x158>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	f000 fa8a 	bl	8002398 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001e84:	4b3b      	ldr	r3, [pc, #236]	@ (8001f74 <xTaskIncrementTick+0x15c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d348      	bcc.n	8001f20 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e8e:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <xTaskIncrementTick+0x150>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d104      	bne.n	8001ea2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e98:	4b36      	ldr	r3, [pc, #216]	@ (8001f74 <xTaskIncrementTick+0x15c>)
 8001e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9e:	601a      	str	r2, [r3, #0]
                    break;
 8001ea0:	e03e      	b.n	8001f20 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ea2:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <xTaskIncrementTick+0x150>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d203      	bcs.n	8001ec2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001eba:	4a2e      	ldr	r2, [pc, #184]	@ (8001f74 <xTaskIncrementTick+0x15c>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ec0:	e02e      	b.n	8001f20 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f954 	bl	8001174 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d004      	beq.n	8001ede <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	3318      	adds	r3, #24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f94b 	bl	8001174 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <xTaskIncrementTick+0x160>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	4a22      	ldr	r2, [pc, #136]	@ (8001f78 <xTaskIncrementTick+0x160>)
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f7c <xTaskIncrementTick+0x164>)
 8001efe:	441a      	add	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	3304      	adds	r3, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f7ff f8d7 	bl	80010ba <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <xTaskIncrementTick+0x168>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d3b9      	bcc.n	8001e8e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f1e:	e7b6      	b.n	8001e8e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f20:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <xTaskIncrementTick+0x168>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f26:	4915      	ldr	r1, [pc, #84]	@ (8001f7c <xTaskIncrementTick+0x164>)
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d901      	bls.n	8001f3c <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <xTaskIncrementTick+0x16c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e004      	b.n	8001f54 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <xTaskIncrementTick+0x170>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <xTaskIncrementTick+0x170>)
 8001f52:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001f54:	697b      	ldr	r3, [r7, #20]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200002f4 	.word	0x200002f4
 8001f64:	200002d0 	.word	0x200002d0
 8001f68:	20000284 	.word	0x20000284
 8001f6c:	20000288 	.word	0x20000288
 8001f70:	200002e4 	.word	0x200002e4
 8001f74:	200002ec 	.word	0x200002ec
 8001f78:	200002d4 	.word	0x200002d4
 8001f7c:	200001f8 	.word	0x200001f8
 8001f80:	200001f4 	.word	0x200001f4
 8001f84:	200002e0 	.word	0x200002e0
 8001f88:	200002dc 	.word	0x200002dc

08001f8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f92:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <vTaskSwitchContext+0xa4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <vTaskSwitchContext+0xa8>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001fa0:	e040      	b.n	8002024 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8001fa2:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <vTaskSwitchContext+0xa8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fa8:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <vTaskSwitchContext+0xac>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	f1c3 031f 	rsb	r3, r3, #31
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	491f      	ldr	r1, [pc, #124]	@ (800203c <vTaskSwitchContext+0xb0>)
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10b      	bne.n	8001fea <vTaskSwitchContext+0x5e>
        __asm volatile
 8001fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	607b      	str	r3, [r7, #4]
    }
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	e7fd      	b.n	8001fe6 <vTaskSwitchContext+0x5a>
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4a11      	ldr	r2, [pc, #68]	@ (800203c <vTaskSwitchContext+0xb0>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	3308      	adds	r3, #8
 800200c:	429a      	cmp	r2, r3
 800200e:	d104      	bne.n	800201a <vTaskSwitchContext+0x8e>
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <vTaskSwitchContext+0xb4>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	200002f4 	.word	0x200002f4
 8002034:	200002e0 	.word	0x200002e0
 8002038:	200002d4 	.word	0x200002d4
 800203c:	200001f8 	.word	0x200001f8
 8002040:	200001f4 	.word	0x200001f4

08002044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8002054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002058:	f383 8811 	msr	BASEPRI, r3
 800205c:	f3bf 8f6f 	isb	sy
 8002060:	f3bf 8f4f 	dsb	sy
 8002064:	60fb      	str	r3, [r7, #12]
    }
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800206c:	4b07      	ldr	r3, [pc, #28]	@ (800208c <vTaskPlaceOnEventList+0x48>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3318      	adds	r3, #24
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff f844 	bl	8001102 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800207a:	2101      	movs	r1, #1
 800207c:	6838      	ldr	r0, [r7, #0]
 800207e:	f000 fb3b 	bl	80026f8 <prvAddCurrentTaskToDelayedList>
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200001f4 	.word	0x200001f4

08002090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80020a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020aa:	f383 8811 	msr	BASEPRI, r3
 80020ae:	f3bf 8f6f 	isb	sy
 80020b2:	f3bf 8f4f 	dsb	sy
 80020b6:	60fb      	str	r3, [r7, #12]
    }
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	e7fd      	b.n	80020ba <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	3318      	adds	r3, #24
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f856 	bl	8001174 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <xTaskRemoveFromEventList+0xb0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d11c      	bne.n	800210a <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	3304      	adds	r3, #4
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f84d 	bl	8001174 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	2201      	movs	r2, #1
 80020e0:	409a      	lsls	r2, r3
 80020e2:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <xTaskRemoveFromEventList+0xb4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	4a16      	ldr	r2, [pc, #88]	@ (8002144 <xTaskRemoveFromEventList+0xb4>)
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4a13      	ldr	r2, [pc, #76]	@ (8002148 <xTaskRemoveFromEventList+0xb8>)
 80020fa:	441a      	add	r2, r3
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	3304      	adds	r3, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f7fe ffd9 	bl	80010ba <vListInsertEnd>
 8002108:	e005      	b.n	8002116 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	3318      	adds	r3, #24
 800210e:	4619      	mov	r1, r3
 8002110:	480e      	ldr	r0, [pc, #56]	@ (800214c <xTaskRemoveFromEventList+0xbc>)
 8002112:	f7fe ffd2 	bl	80010ba <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <xTaskRemoveFromEventList+0xc0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	429a      	cmp	r2, r3
 8002122:	d905      	bls.n	8002130 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002124:	2301      	movs	r3, #1
 8002126:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002128:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <xTaskRemoveFromEventList+0xc4>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e001      	b.n	8002134 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002134:	697b      	ldr	r3, [r7, #20]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200002f4 	.word	0x200002f4
 8002144:	200002d4 	.word	0x200002d4
 8002148:	200001f8 	.word	0x200001f8
 800214c:	2000028c 	.word	0x2000028c
 8002150:	200001f4 	.word	0x200001f4
 8002154:	200002e0 	.word	0x200002e0

08002158 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <vTaskInternalSetTimeOutState+0x24>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <vTaskInternalSetTimeOutState+0x28>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	605a      	str	r2, [r3, #4]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	200002e4 	.word	0x200002e4
 8002180:	200002d0 	.word	0x200002d0

08002184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	613b      	str	r3, [r7, #16]
    }
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10b      	bne.n	80021ca <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80021b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b6:	f383 8811 	msr	BASEPRI, r3
 80021ba:	f3bf 8f6f 	isb	sy
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	60fb      	str	r3, [r7, #12]
    }
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	e7fd      	b.n	80021c6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80021ca:	f000 fcaf 	bl	8002b2c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80021ce:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <xTaskCheckForTimeOut+0xc8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d102      	bne.n	80021ee <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	e026      	b.n	800223c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <xTaskCheckForTimeOut+0xcc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d00a      	beq.n	8002210 <xTaskCheckForTimeOut+0x8c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	429a      	cmp	r2, r3
 8002202:	d305      	bcc.n	8002210 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002204:	2301      	movs	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e015      	b.n	800223c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	429a      	cmp	r2, r3
 8002218:	d20b      	bcs.n	8002232 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad2      	subs	r2, r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ff96 	bl	8002158 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	e004      	b.n	800223c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002238:	2301      	movs	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800223c:	f000 fca8 	bl	8002b90 <vPortExitCritical>

    return xReturn;
 8002240:	69fb      	ldr	r3, [r7, #28]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200002d0 	.word	0x200002d0
 8002250:	200002e4 	.word	0x200002e4

08002254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002258:	4b03      	ldr	r3, [pc, #12]	@ (8002268 <vTaskMissedYield+0x14>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	200002e0 	.word	0x200002e0

0800226c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002274:	f000 f852 	bl	800231c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <prvIdleTask+0x28>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d9f9      	bls.n	8002274 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <prvIdleTask+0x2c>)
 8002282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002290:	e7f0      	b.n	8002274 <prvIdleTask+0x8>
 8002292:	bf00      	nop
 8002294:	200001f8 	.word	0x200001f8
 8002298:	e000ed04 	.word	0xe000ed04

0800229c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	e00c      	b.n	80022c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4a12      	ldr	r2, [pc, #72]	@ (80022fc <prvInitialiseTaskLists+0x60>)
 80022b4:	4413      	add	r3, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fed2 	bl	8001060 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3301      	adds	r3, #1
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d9ef      	bls.n	80022a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80022c8:	480d      	ldr	r0, [pc, #52]	@ (8002300 <prvInitialiseTaskLists+0x64>)
 80022ca:	f7fe fec9 	bl	8001060 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80022ce:	480d      	ldr	r0, [pc, #52]	@ (8002304 <prvInitialiseTaskLists+0x68>)
 80022d0:	f7fe fec6 	bl	8001060 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80022d4:	480c      	ldr	r0, [pc, #48]	@ (8002308 <prvInitialiseTaskLists+0x6c>)
 80022d6:	f7fe fec3 	bl	8001060 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80022da:	480c      	ldr	r0, [pc, #48]	@ (800230c <prvInitialiseTaskLists+0x70>)
 80022dc:	f7fe fec0 	bl	8001060 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80022e0:	480b      	ldr	r0, [pc, #44]	@ (8002310 <prvInitialiseTaskLists+0x74>)
 80022e2:	f7fe febd 	bl	8001060 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <prvInitialiseTaskLists+0x78>)
 80022e8:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <prvInitialiseTaskLists+0x64>)
 80022ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <prvInitialiseTaskLists+0x7c>)
 80022ee:	4a05      	ldr	r2, [pc, #20]	@ (8002304 <prvInitialiseTaskLists+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200001f8 	.word	0x200001f8
 8002300:	2000025c 	.word	0x2000025c
 8002304:	20000270 	.word	0x20000270
 8002308:	2000028c 	.word	0x2000028c
 800230c:	200002a0 	.word	0x200002a0
 8002310:	200002b8 	.word	0x200002b8
 8002314:	20000284 	.word	0x20000284
 8002318:	20000288 	.word	0x20000288

0800231c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002322:	e019      	b.n	8002358 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002324:	f000 fc02 	bl	8002b2c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002328:	4b10      	ldr	r3, [pc, #64]	@ (800236c <prvCheckTasksWaitingTermination+0x50>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe ff1d 	bl	8001174 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800233a:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <prvCheckTasksWaitingTermination+0x54>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3b01      	subs	r3, #1
 8002340:	4a0b      	ldr	r2, [pc, #44]	@ (8002370 <prvCheckTasksWaitingTermination+0x54>)
 8002342:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <prvCheckTasksWaitingTermination+0x58>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <prvCheckTasksWaitingTermination+0x58>)
 800234c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800234e:	f000 fc1f 	bl	8002b90 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f810 	bl	8002378 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <prvCheckTasksWaitingTermination+0x58>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e1      	bne.n	8002324 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200002a0 	.word	0x200002a0
 8002370:	200002cc 	.word	0x200002cc
 8002374:	200002b4 	.word	0x200002b4

08002378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fddd 	bl	8002f44 <vPortFree>
                vPortFree( pxTCB );
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fdda 	bl	8002f44 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800239c:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <prvResetNextTaskUnblockTime+0x30>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <prvResetNextTaskUnblockTime+0x34>)
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80023ae:	e005      	b.n	80023bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <prvResetNextTaskUnblockTime+0x30>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <prvResetNextTaskUnblockTime+0x34>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000284 	.word	0x20000284
 80023cc:	200002ec 	.word	0x200002ec

080023d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d065      	beq.n	80024b2 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80023e6:	4b35      	ldr	r3, [pc, #212]	@ (80024bc <xTaskPriorityDisinherit+0xec>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d00b      	beq.n	8002408 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	60fb      	str	r3, [r7, #12]
    }
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	60bb      	str	r3, [r7, #8]
    }
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	429a      	cmp	r2, r3
 800243c:	d039      	beq.n	80024b2 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d135      	bne.n	80024b2 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	3304      	adds	r3, #4
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fe92 	bl	8001174 <uxListRemove>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	2201      	movs	r2, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43da      	mvns	r2, r3
 8002462:	4b17      	ldr	r3, [pc, #92]	@ (80024c0 <xTaskPriorityDisinherit+0xf0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4013      	ands	r3, r2
 8002468:	4a15      	ldr	r2, [pc, #84]	@ (80024c0 <xTaskPriorityDisinherit+0xf0>)
 800246a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	f1c3 0205 	rsb	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	2201      	movs	r2, #1
 8002486:	409a      	lsls	r2, r3
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <xTaskPriorityDisinherit+0xf0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	4a0c      	ldr	r2, [pc, #48]	@ (80024c0 <xTaskPriorityDisinherit+0xf0>)
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <xTaskPriorityDisinherit+0xf4>)
 80024a0:	441a      	add	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	3304      	adds	r3, #4
 80024a6:	4619      	mov	r1, r3
 80024a8:	4610      	mov	r0, r2
 80024aa:	f7fe fe06 	bl	80010ba <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80024ae:	2301      	movs	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80024b2:	697b      	ldr	r3, [r7, #20]
    }
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200001f4 	.word	0x200001f4
 80024c0:	200002d4 	.word	0x200002d4
 80024c4:	200001f8 	.word	0x200001f8

080024c8 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <ulTaskGenericNotifyTake+0x2a>
        __asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	613b      	str	r3, [r7, #16]
    }
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	e7fd      	b.n	80024ee <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 80024f2:	f000 fb1b 	bl	8002b2c <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80024f6:	4b26      	ldr	r3, [pc, #152]	@ (8002590 <ulTaskGenericNotifyTake+0xc8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	3214      	adds	r2, #20
 80024fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002506:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <ulTaskGenericNotifyTake+0xc8>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	3354      	adds	r3, #84	@ 0x54
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800251a:	2101      	movs	r1, #1
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8eb 	bl	80026f8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <ulTaskGenericNotifyTake+0xcc>)
 8002524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002532:	f000 fb2d 	bl	8002b90 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002536:	f000 faf9 	bl	8002b2c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE(  );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800253a:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <ulTaskGenericNotifyTake+0xc8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	3214      	adds	r2, #20
 8002542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002546:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d012      	beq.n	8002574 <ulTaskGenericNotifyTake+0xac>
            {
                if( xClearCountOnExit != pdFALSE )
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <ulTaskGenericNotifyTake+0x9c>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <ulTaskGenericNotifyTake+0xc8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	3214      	adds	r2, #20
 800255c:	2100      	movs	r1, #0
 800255e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002562:	e007      	b.n	8002574 <ulTaskGenericNotifyTake+0xac>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8002564:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <ulTaskGenericNotifyTake+0xc8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	1e51      	subs	r1, r2, #1
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	3214      	adds	r2, #20
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <ulTaskGenericNotifyTake+0xc8>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	3354      	adds	r3, #84	@ 0x54
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002582:	f000 fb05 	bl	8002b90 <vPortExitCritical>

        return ulReturn;
 8002586:	697b      	ldr	r3, [r7, #20]
    }
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200001f4 	.word	0x200001f4
 8002594:	e000ed04 	.word	0xe000ed04

08002598 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	@ 0x38
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <vTaskGenericNotifyGiveFromISR+0x2a>
        __asm volatile
 80025aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	e7fd      	b.n	80025be <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <vTaskGenericNotifyGiveFromISR+0x48>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <vTaskGenericNotifyGiveFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025e0:	f000 fb8c 	bl	8002cfc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80025e8:	f3ef 8211 	mrs	r2, BASEPRI
 80025ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	623a      	str	r2, [r7, #32]
 80025fe:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002600:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002604:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	3354      	adds	r3, #84	@ 0x54
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002612:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4413      	add	r3, r2
 8002618:	3354      	adds	r3, #84	@ 0x54
 800261a:	2202      	movs	r2, #2
 800261c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800261e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	3214      	adds	r2, #20
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	1c59      	adds	r1, r3, #1
 800262a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	3214      	adds	r2, #20
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002634:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002638:	2b01      	cmp	r3, #1
 800263a:	d146      	bne.n	80026ca <vTaskGenericNotifyGiveFromISR+0x132>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800263c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <vTaskGenericNotifyGiveFromISR+0xc4>
        __asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	61bb      	str	r3, [r7, #24]
    }
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <vTaskGenericNotifyGiveFromISR+0xc0>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800265c:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <vTaskGenericNotifyGiveFromISR+0x148>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d11c      	bne.n	800269e <vTaskGenericNotifyGiveFromISR+0x106>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002666:	3304      	adds	r3, #4
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fd83 	bl	8001174 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800266e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	2201      	movs	r2, #1
 8002674:	409a      	lsls	r2, r3
 8002676:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <vTaskGenericNotifyGiveFromISR+0x14c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	4a19      	ldr	r2, [pc, #100]	@ (80026e4 <vTaskGenericNotifyGiveFromISR+0x14c>)
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <vTaskGenericNotifyGiveFromISR+0x150>)
 800268e:	441a      	add	r2, r3
 8002690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002692:	3304      	adds	r3, #4
 8002694:	4619      	mov	r1, r3
 8002696:	4610      	mov	r0, r2
 8002698:	f7fe fd0f 	bl	80010ba <vListInsertEnd>
 800269c:	e005      	b.n	80026aa <vTaskGenericNotifyGiveFromISR+0x112>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800269e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a0:	3318      	adds	r3, #24
 80026a2:	4619      	mov	r1, r3
 80026a4:	4811      	ldr	r0, [pc, #68]	@ (80026ec <vTaskGenericNotifyGiveFromISR+0x154>)
 80026a6:	f7fe fd08 	bl	80010ba <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <vTaskGenericNotifyGiveFromISR+0x158>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d908      	bls.n	80026ca <vTaskGenericNotifyGiveFromISR+0x132>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <vTaskGenericNotifyGiveFromISR+0x12c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <vTaskGenericNotifyGiveFromISR+0x15c>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026cc:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80026d4:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 80026d6:	bf00      	nop
 80026d8:	3738      	adds	r7, #56	@ 0x38
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200002f4 	.word	0x200002f4
 80026e4:	200002d4 	.word	0x200002d4
 80026e8:	200001f8 	.word	0x200001f8
 80026ec:	2000028c 	.word	0x2000028c
 80026f0:	200001f4 	.word	0x200001f4
 80026f4:	200002e0 	.word	0x200002e0

080026f8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002702:	4b29      	ldr	r3, [pc, #164]	@ (80027a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002708:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3304      	adds	r3, #4
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fd30 	bl	8001174 <uxListRemove>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800271a:	4b24      	ldr	r3, [pc, #144]	@ (80027ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	2201      	movs	r2, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	4b21      	ldr	r3, [pc, #132]	@ (80027b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4013      	ands	r3, r2
 800272e:	4a20      	ldr	r2, [pc, #128]	@ (80027b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002730:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d10a      	bne.n	8002750 <prvAddCurrentTaskToDelayedList+0x58>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002740:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3304      	adds	r3, #4
 8002746:	4619      	mov	r1, r3
 8002748:	481a      	ldr	r0, [pc, #104]	@ (80027b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800274a:	f7fe fcb6 	bl	80010ba <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800274e:	e026      	b.n	800279e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002758:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	429a      	cmp	r2, r3
 8002766:	d209      	bcs.n	800277c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002768:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3304      	adds	r3, #4
 8002772:	4619      	mov	r1, r3
 8002774:	4610      	mov	r0, r2
 8002776:	f7fe fcc4 	bl	8001102 <vListInsert>
}
 800277a:	e010      	b.n	800279e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800277c:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3304      	adds	r3, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f7fe fcba 	bl	8001102 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800278e:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	429a      	cmp	r2, r3
 8002796:	d202      	bcs.n	800279e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002798:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	6013      	str	r3, [r2, #0]
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200002d0 	.word	0x200002d0
 80027ac:	200001f4 	.word	0x200001f4
 80027b0:	200002d4 	.word	0x200002d4
 80027b4:	200002b8 	.word	0x200002b8
 80027b8:	20000288 	.word	0x20000288
 80027bc:	20000284 	.word	0x20000284
 80027c0:	200002ec 	.word	0x200002ec

080027c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3b04      	subs	r3, #4
 80027d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3b04      	subs	r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f023 0201 	bic.w	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3b04      	subs	r3, #4
 80027f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80027f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002828 <pxPortInitialiseStack+0x64>)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3b14      	subs	r3, #20
 80027fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3b04      	subs	r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f06f 0202 	mvn.w	r2, #2
 8002812:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3b20      	subs	r3, #32
 8002818:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	0800282d 	.word	0x0800282d

0800282c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002836:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <prvTaskExitError+0x58>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d00b      	beq.n	8002858 <prvTaskExitError+0x2c>
        __asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	60fb      	str	r3, [r7, #12]
    }
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <prvTaskExitError+0x28>
        __asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	60bb      	str	r3, [r7, #8]
    }
 800286a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800286c:	bf00      	nop
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0fc      	beq.n	800286e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000000 	.word	0x20000000
	...

08002890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002890:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <pxCurrentTCBConst2>)
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	6808      	ldr	r0, [r1, #0]
 8002896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289a:	f380 8809 	msr	PSP, r0
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f04f 0000 	mov.w	r0, #0
 80028a6:	f380 8811 	msr	BASEPRI, r0
 80028aa:	4770      	bx	lr
 80028ac:	f3af 8000 	nop.w

080028b0 <pxCurrentTCBConst2>:
 80028b0:	200001f4 	.word	0x200001f4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop

080028b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80028b8:	4808      	ldr	r0, [pc, #32]	@ (80028dc <prvPortStartFirstTask+0x24>)
 80028ba:	6800      	ldr	r0, [r0, #0]
 80028bc:	6800      	ldr	r0, [r0, #0]
 80028be:	f380 8808 	msr	MSP, r0
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f380 8814 	msr	CONTROL, r0
 80028ca:	b662      	cpsie	i
 80028cc:	b661      	cpsie	f
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	df00      	svc	0
 80028d8:	bf00      	nop
 80028da:	0000      	.short	0x0000
 80028dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop

080028e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <xPortStartScheduler+0x124>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a47      	ldr	r2, [pc, #284]	@ (8002a0c <xPortStartScheduler+0x128>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10b      	bne.n	800290c <xPortStartScheduler+0x28>
        __asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	60fb      	str	r3, [r7, #12]
    }
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800290c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a08 <xPortStartScheduler+0x124>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3f      	ldr	r2, [pc, #252]	@ (8002a10 <xPortStartScheduler+0x12c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10b      	bne.n	800292e <xPortStartScheduler+0x4a>
        __asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	613b      	str	r3, [r7, #16]
    }
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	e7fd      	b.n	800292a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800292e:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <xPortStartScheduler+0x130>)
 8002930:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	22ff      	movs	r2, #255	@ 0xff
 800293e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b31      	ldr	r3, [pc, #196]	@ (8002a18 <xPortStartScheduler+0x134>)
 8002954:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <xPortStartScheduler+0x138>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800295c:	e009      	b.n	8002972 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800295e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a1c <xPortStartScheduler+0x138>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3b01      	subs	r3, #1
 8002964:	4a2d      	ldr	r2, [pc, #180]	@ (8002a1c <xPortStartScheduler+0x138>)
 8002966:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297a:	2b80      	cmp	r3, #128	@ 0x80
 800297c:	d0ef      	beq.n	800295e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800297e:	4b27      	ldr	r3, [pc, #156]	@ (8002a1c <xPortStartScheduler+0x138>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	d00b      	beq.n	80029a2 <xPortStartScheduler+0xbe>
        __asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	60bb      	str	r3, [r7, #8]
    }
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	e7fd      	b.n	800299e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029a2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a1c <xPortStartScheduler+0x138>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <xPortStartScheduler+0x138>)
 80029aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <xPortStartScheduler+0x138>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029b4:	4a19      	ldr	r2, [pc, #100]	@ (8002a1c <xPortStartScheduler+0x138>)
 80029b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029c0:	4b17      	ldr	r3, [pc, #92]	@ (8002a20 <xPortStartScheduler+0x13c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a16      	ldr	r2, [pc, #88]	@ (8002a20 <xPortStartScheduler+0x13c>)
 80029c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029cc:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <xPortStartScheduler+0x13c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <xPortStartScheduler+0x13c>)
 80029d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80029d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80029d8:	f000 f960 	bl	8002c9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80029dc:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <xPortStartScheduler+0x140>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80029e2:	f000 f97f 	bl	8002ce4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <xPortStartScheduler+0x144>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002a28 <xPortStartScheduler+0x144>)
 80029ec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80029f0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80029f2:	f7ff ff61 	bl	80028b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80029f6:	f7ff fac9 	bl	8001f8c <vTaskSwitchContext>
    prvTaskExitError();
 80029fa:	f7ff ff17 	bl	800282c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	e000ed00 	.word	0xe000ed00
 8002a0c:	410fc271 	.word	0x410fc271
 8002a10:	410fc270 	.word	0x410fc270
 8002a14:	e000e400 	.word	0xe000e400
 8002a18:	200002f8 	.word	0x200002f8
 8002a1c:	200002fc 	.word	0x200002fc
 8002a20:	e000ed20 	.word	0xe000ed20
 8002a24:	20000000 	.word	0x20000000
 8002a28:	e000ef34 	.word	0xe000ef34

08002a2c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a32:	4b38      	ldr	r3, [pc, #224]	@ (8002b14 <vInitPrioGroupValue+0xe8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a38      	ldr	r2, [pc, #224]	@ (8002b18 <vInitPrioGroupValue+0xec>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d10b      	bne.n	8002a54 <vInitPrioGroupValue+0x28>
        __asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	60fb      	str	r3, [r7, #12]
    }
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a54:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <vInitPrioGroupValue+0xe8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a30      	ldr	r2, [pc, #192]	@ (8002b1c <vInitPrioGroupValue+0xf0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10b      	bne.n	8002a76 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	613b      	str	r3, [r7, #16]
    }
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	e7fd      	b.n	8002a72 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a76:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <vInitPrioGroupValue+0xf4>)
 8002a78:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	22ff      	movs	r2, #255	@ 0xff
 8002a86:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <vInitPrioGroupValue+0xf8>)
 8002a9c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a9e:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <vInitPrioGroupValue+0xfc>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002aa4:	e009      	b.n	8002aba <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002aa6:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <vInitPrioGroupValue+0xfc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	4a1e      	ldr	r2, [pc, #120]	@ (8002b28 <vInitPrioGroupValue+0xfc>)
 8002aae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac2:	2b80      	cmp	r3, #128	@ 0x80
 8002ac4:	d0ef      	beq.n	8002aa6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ac6:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <vInitPrioGroupValue+0xfc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d00b      	beq.n	8002aea <vInitPrioGroupValue+0xbe>
        __asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	60bb      	str	r3, [r7, #8]
    }
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	e7fd      	b.n	8002ae6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <vInitPrioGroupValue+0xfc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <vInitPrioGroupValue+0xfc>)
 8002af2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <vInitPrioGroupValue+0xfc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002afc:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <vInitPrioGroupValue+0xfc>)
 8002afe:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00
 8002b18:	410fc271 	.word	0x410fc271
 8002b1c:	410fc270 	.word	0x410fc270
 8002b20:	e000e400 	.word	0xe000e400
 8002b24:	200002f8 	.word	0x200002f8
 8002b28:	200002fc 	.word	0x200002fc

08002b2c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
        __asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	607b      	str	r3, [r7, #4]
    }
 8002b44:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <vPortEnterCritical+0x5c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002b88 <vPortEnterCritical+0x5c>)
 8002b4e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002b50:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <vPortEnterCritical+0x5c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d110      	bne.n	8002b7a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <vPortEnterCritical+0x60>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <vPortEnterCritical+0x4e>
        __asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	603b      	str	r3, [r7, #0]
    }
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	e7fd      	b.n	8002b76 <vPortEnterCritical+0x4a>
    }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	e000ed04 	.word	0xe000ed04

08002b90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b96:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <vPortExitCritical+0x50>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <vPortExitCritical+0x26>
        __asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	607b      	str	r3, [r7, #4]
    }
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	e7fd      	b.n	8002bb2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <vPortExitCritical+0x50>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	4a08      	ldr	r2, [pc, #32]	@ (8002be0 <vPortExitCritical+0x50>)
 8002bbe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002bc0:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <vPortExitCritical+0x50>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <vPortExitCritical+0x44>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f383 8811 	msr	BASEPRI, r3
    }
 8002bd2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	20000000 	.word	0x20000000
	...

08002bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002bf0:	f3ef 8009 	mrs	r0, PSP
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <pxCurrentTCBConst>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f01e 0f10 	tst.w	lr, #16
 8002c00:	bf08      	it	eq
 8002c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	6010      	str	r0, [r2, #0]
 8002c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002c14:	f380 8811 	msr	BASEPRI, r0
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f7ff f9b4 	bl	8001f8c <vTaskSwitchContext>
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f380 8811 	msr	BASEPRI, r0
 8002c2c:	bc09      	pop	{r0, r3}
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	6808      	ldr	r0, [r1, #0]
 8002c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c36:	f01e 0f10 	tst.w	lr, #16
 8002c3a:	bf08      	it	eq
 8002c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c40:	f380 8809 	msr	PSP, r0
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	f3af 8000 	nop.w

08002c50 <pxCurrentTCBConst>:
 8002c50:	200001f4 	.word	0x200001f4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop

08002c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	607b      	str	r3, [r7, #4]
    }
 8002c70:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c72:	f7ff f8d1 	bl	8001e18 <xTaskIncrementTick>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <SysTick_Handler+0x40>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f383 8811 	msr	BASEPRI, r3
    }
 8002c8e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <vPortSetupTimerInterrupt+0x34>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <vPortSetupTimerInterrupt+0x38>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <vPortSetupTimerInterrupt+0x3c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <vPortSetupTimerInterrupt+0x40>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	099b      	lsrs	r3, r3, #6
 8002cb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <vPortSetupTimerInterrupt+0x44>)
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cbe:	4b04      	ldr	r3, [pc, #16]	@ (8002cd0 <vPortSetupTimerInterrupt+0x34>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	601a      	str	r2, [r3, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e010 	.word	0xe000e010
 8002cd4:	e000e018 	.word	0xe000e018
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	057619f1 	.word	0x057619f1
 8002ce0:	e000e014 	.word	0xe000e014

08002ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002cf4 <vPortEnableVFP+0x10>
 8002ce8:	6801      	ldr	r1, [r0, #0]
 8002cea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002cee:	6001      	str	r1, [r0, #0]
 8002cf0:	4770      	bx	lr
 8002cf2:	0000      	.short	0x0000
 8002cf4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop

08002cfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002d02:	f3ef 8305 	mrs	r3, IPSR
 8002d06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	d915      	bls.n	8002d3a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002d0e:	4a18      	ldr	r2, [pc, #96]	@ (8002d70 <vPortValidateInterruptPriority+0x74>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d18:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <vPortValidateInterruptPriority+0x78>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	7afa      	ldrb	r2, [r7, #11]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d20b      	bcs.n	8002d3a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	607b      	str	r3, [r7, #4]
    }
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	e7fd      	b.n	8002d36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <vPortValidateInterruptPriority+0x7c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <vPortValidateInterruptPriority+0x80>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d90b      	bls.n	8002d62 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	603b      	str	r3, [r7, #0]
    }
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	e7fd      	b.n	8002d5e <vPortValidateInterruptPriority+0x62>
    }
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e3f0 	.word	0xe000e3f0
 8002d74:	200002f8 	.word	0x200002f8
 8002d78:	e000ed0c 	.word	0xe000ed0c
 8002d7c:	200002fc 	.word	0x200002fc

08002d80 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	@ 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002d8c:	f7fe ff98 	bl	8001cc0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002d90:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <pvPortMalloc+0x1ac>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002d98:	f000 f938 	bl	800300c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d9c:	4b64      	ldr	r3, [pc, #400]	@ (8002f30 <pvPortMalloc+0x1b0>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f040 80a9 	bne.w	8002efc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d02e      	beq.n	8002e0e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002db0:	2208      	movs	r2, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d228      	bcs.n	8002e0e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d022      	beq.n	8002e14 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f023 0307 	bic.w	r3, r3, #7
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d215      	bcs.n	8002e08 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f023 0307 	bic.w	r3, r3, #7
 8002de2:	3308      	adds	r3, #8
 8002de4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d011      	beq.n	8002e14 <pvPortMalloc+0x94>
        __asm volatile
 8002df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	617b      	str	r3, [r7, #20]
    }
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	e7fd      	b.n	8002e04 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e0c:	e002      	b.n	8002e14 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	e000      	b.n	8002e16 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e14:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d06f      	beq.n	8002efc <pvPortMalloc+0x17c>
 8002e1c:	4b45      	ldr	r3, [pc, #276]	@ (8002f34 <pvPortMalloc+0x1b4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d86a      	bhi.n	8002efc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002e26:	4b44      	ldr	r3, [pc, #272]	@ (8002f38 <pvPortMalloc+0x1b8>)
 8002e28:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002e2a:	4b43      	ldr	r3, [pc, #268]	@ (8002f38 <pvPortMalloc+0x1b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e30:	e004      	b.n	8002e3c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d903      	bls.n	8002e4e <pvPortMalloc+0xce>
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f1      	bne.n	8002e32 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002e4e:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <pvPortMalloc+0x1ac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d051      	beq.n	8002efc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4413      	add	r3, r2
 8002e60:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	1ad2      	subs	r2, r2, r3
 8002e72:	2308      	movs	r3, #8
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d920      	bls.n	8002ebc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <pvPortMalloc+0x124>
        __asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	613b      	str	r3, [r7, #16]
    }
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	1ad2      	subs	r2, r2, r3
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002eb6:	69b8      	ldr	r0, [r7, #24]
 8002eb8:	f000 f90a 	bl	80030d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f34 <pvPortMalloc+0x1b4>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f34 <pvPortMalloc+0x1b4>)
 8002ec8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002eca:	4b1a      	ldr	r3, [pc, #104]	@ (8002f34 <pvPortMalloc+0x1b4>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <pvPortMalloc+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d203      	bcs.n	8002ede <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ed6:	4b17      	ldr	r3, [pc, #92]	@ (8002f34 <pvPortMalloc+0x1b4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a18      	ldr	r2, [pc, #96]	@ (8002f3c <pvPortMalloc+0x1bc>)
 8002edc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4b13      	ldr	r3, [pc, #76]	@ (8002f30 <pvPortMalloc+0x1b0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <pvPortMalloc+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	4a11      	ldr	r2, [pc, #68]	@ (8002f40 <pvPortMalloc+0x1c0>)
 8002efa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002efc:	f7fe feee 	bl	8001cdc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <pvPortMalloc+0x1a2>
        __asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	60fb      	str	r3, [r7, #12]
    }
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	e7fd      	b.n	8002f1e <pvPortMalloc+0x19e>
    return pvReturn;
 8002f22:	69fb      	ldr	r3, [r7, #28]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3728      	adds	r7, #40	@ 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20003308 	.word	0x20003308
 8002f30:	2000331c 	.word	0x2000331c
 8002f34:	2000330c 	.word	0x2000330c
 8002f38:	20003300 	.word	0x20003300
 8002f3c:	20003310 	.word	0x20003310
 8002f40:	20003314 	.word	0x20003314

08002f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d04f      	beq.n	8002ff6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002f56:	2308      	movs	r3, #8
 8002f58:	425b      	negs	r3, r3
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4b25      	ldr	r3, [pc, #148]	@ (8003000 <vPortFree+0xbc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10b      	bne.n	8002f8a <vPortFree+0x46>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	60fb      	str	r3, [r7, #12]
    }
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	e7fd      	b.n	8002f86 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <vPortFree+0x66>
        __asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	60bb      	str	r3, [r7, #8]
    }
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	e7fd      	b.n	8002fa6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <vPortFree+0xbc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01e      	beq.n	8002ff6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d11a      	bne.n	8002ff6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <vPortFree+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002fd0:	f7fe fe76 	bl	8001cc0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003004 <vPortFree+0xc0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a09      	ldr	r2, [pc, #36]	@ (8003004 <vPortFree+0xc0>)
 8002fe0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002fe2:	6938      	ldr	r0, [r7, #16]
 8002fe4:	f000 f874 	bl	80030d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002fe8:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <vPortFree+0xc4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	4a06      	ldr	r2, [pc, #24]	@ (8003008 <vPortFree+0xc4>)
 8002ff0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002ff2:	f7fe fe73 	bl	8001cdc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002ff6:	bf00      	nop
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2000331c 	.word	0x2000331c
 8003004:	2000330c 	.word	0x2000330c
 8003008:	20003318 	.word	0x20003318

0800300c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003012:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003016:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003018:	4b27      	ldr	r3, [pc, #156]	@ (80030b8 <prvHeapInit+0xac>)
 800301a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3307      	adds	r3, #7
 800302a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0307 	bic.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	4a1f      	ldr	r2, [pc, #124]	@ (80030b8 <prvHeapInit+0xac>)
 800303c:	4413      	add	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <prvHeapInit+0xb0>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800304a:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <prvHeapInit+0xb0>)
 800304c:	2200      	movs	r2, #0
 800304e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4413      	add	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003058:	2208      	movs	r2, #8
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0307 	bic.w	r3, r3, #7
 8003066:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a15      	ldr	r2, [pc, #84]	@ (80030c0 <prvHeapInit+0xb4>)
 800306c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800306e:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <prvHeapInit+0xb4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <prvHeapInit+0xb4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	1ad2      	subs	r2, r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800308c:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <prvHeapInit+0xb4>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <prvHeapInit+0xb8>)
 800309a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a09      	ldr	r2, [pc, #36]	@ (80030c8 <prvHeapInit+0xbc>)
 80030a2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030a4:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <prvHeapInit+0xc0>)
 80030a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80030aa:	601a      	str	r2, [r3, #0]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	20000300 	.word	0x20000300
 80030bc:	20003300 	.word	0x20003300
 80030c0:	20003308 	.word	0x20003308
 80030c4:	20003310 	.word	0x20003310
 80030c8:	2000330c 	.word	0x2000330c
 80030cc:	2000331c 	.word	0x2000331c

080030d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030d8:	4b28      	ldr	r3, [pc, #160]	@ (800317c <prvInsertBlockIntoFreeList+0xac>)
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e002      	b.n	80030e4 <prvInsertBlockIntoFreeList+0x14>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d8f7      	bhi.n	80030de <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4413      	add	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d108      	bne.n	8003112 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	441a      	add	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	441a      	add	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d118      	bne.n	8003158 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <prvInsertBlockIntoFreeList+0xb0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d00d      	beq.n	800314e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	441a      	add	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e008      	b.n	8003160 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800314e:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <prvInsertBlockIntoFreeList+0xb0>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e003      	b.n	8003160 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	d002      	beq.n	800316e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20003300 	.word	0x20003300
 8003180:	20003308 	.word	0x20003308

08003184 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800318a:	463b      	mov	r3, r7
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003196:	4b28      	ldr	r3, [pc, #160]	@ (8003238 <MX_ADC1_Init+0xb4>)
 8003198:	4a28      	ldr	r2, [pc, #160]	@ (800323c <MX_ADC1_Init+0xb8>)
 800319a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800319c:	4b26      	ldr	r3, [pc, #152]	@ (8003238 <MX_ADC1_Init+0xb4>)
 800319e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031a4:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80031aa:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80031b0:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031b6:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031be:	4b1e      	ldr	r3, [pc, #120]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003240 <MX_ADC1_Init+0xbc>)
 80031c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031d2:	2202      	movs	r2, #2
 80031d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80031d6:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80031de:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031e4:	4814      	ldr	r0, [pc, #80]	@ (8003238 <MX_ADC1_Init+0xb4>)
 80031e6:	f001 f88b 	bl	8004300 <HAL_ADC_Init>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031f0:	f000 fd66 	bl	8003cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80031fc:	2307      	movs	r3, #7
 80031fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003200:	463b      	mov	r3, r7
 8003202:	4619      	mov	r1, r3
 8003204:	480c      	ldr	r0, [pc, #48]	@ (8003238 <MX_ADC1_Init+0xb4>)
 8003206:	f001 fb01 	bl	800480c <HAL_ADC_ConfigChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003210:	f000 fd56 	bl	8003cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003214:	2301      	movs	r3, #1
 8003216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003218:	2302      	movs	r3, #2
 800321a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800321c:	463b      	mov	r3, r7
 800321e:	4619      	mov	r1, r3
 8003220:	4805      	ldr	r0, [pc, #20]	@ (8003238 <MX_ADC1_Init+0xb4>)
 8003222:	f001 faf3 	bl	800480c <HAL_ADC_ConfigChannel>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800322c:	f000 fd48 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20003320 	.word	0x20003320
 800323c:	40012000 	.word	0x40012000
 8003240:	0f000001 	.word	0x0f000001

08003244 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800324a:	463b      	mov	r3, r7
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003256:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 8003258:	4a28      	ldr	r2, [pc, #160]	@ (80032fc <MX_ADC2_Init+0xb8>)
 800325a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800325c:	4b26      	ldr	r3, [pc, #152]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 800325e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003262:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003264:	4b24      	ldr	r3, [pc, #144]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800326a:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 800326c:	2201      	movs	r2, #1
 800326e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003270:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 8003272:	2201      	movs	r2, #1
 8003274:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800327e:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 8003280:	2200      	movs	r2, #0
 8003282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003284:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 8003286:	4a1e      	ldr	r2, [pc, #120]	@ (8003300 <MX_ADC2_Init+0xbc>)
 8003288:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800328a:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 800328c:	2200      	movs	r2, #0
 800328e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8003290:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 8003292:	2202      	movs	r2, #2
 8003294:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003296:	4b18      	ldr	r3, [pc, #96]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800329e:	4b16      	ldr	r3, [pc, #88]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80032a4:	4814      	ldr	r0, [pc, #80]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 80032a6:	f001 f82b 	bl	8004300 <HAL_ADC_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80032b0:	f000 fd06 	bl	8003cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80032b4:	2306      	movs	r3, #6
 80032b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80032b8:	2301      	movs	r3, #1
 80032ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80032bc:	2307      	movs	r3, #7
 80032be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032c0:	463b      	mov	r3, r7
 80032c2:	4619      	mov	r1, r3
 80032c4:	480c      	ldr	r0, [pc, #48]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 80032c6:	f001 faa1 	bl	800480c <HAL_ADC_ConfigChannel>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80032d0:	f000 fcf6 	bl	8003cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80032d4:	2307      	movs	r3, #7
 80032d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80032d8:	2302      	movs	r3, #2
 80032da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032dc:	463b      	mov	r3, r7
 80032de:	4619      	mov	r1, r3
 80032e0:	4805      	ldr	r0, [pc, #20]	@ (80032f8 <MX_ADC2_Init+0xb4>)
 80032e2:	f001 fa93 	bl	800480c <HAL_ADC_ConfigChannel>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80032ec:	f000 fce8 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20003368 	.word	0x20003368
 80032fc:	40012100 	.word	0x40012100
 8003300:	0f000001 	.word	0x0f000001

08003304 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08c      	sub	sp, #48	@ 0x30
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a66      	ldr	r2, [pc, #408]	@ (80034bc <HAL_ADC_MspInit+0x1b8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d160      	bne.n	80033e8 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	4b65      	ldr	r3, [pc, #404]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	4a64      	ldr	r2, [pc, #400]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003334:	6453      	str	r3, [r2, #68]	@ 0x44
 8003336:	4b62      	ldr	r3, [pc, #392]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	4b5e      	ldr	r3, [pc, #376]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	4a5d      	ldr	r2, [pc, #372]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6313      	str	r3, [r2, #48]	@ 0x30
 8003352:	4b5b      	ldr	r3, [pc, #364]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800335e:	2303      	movs	r3, #3
 8003360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003362:	2303      	movs	r3, #3
 8003364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	4619      	mov	r1, r3
 8003370:	4854      	ldr	r0, [pc, #336]	@ (80034c4 <HAL_ADC_MspInit+0x1c0>)
 8003372:	f002 f9e9 	bl	8005748 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003376:	4b54      	ldr	r3, [pc, #336]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 8003378:	4a54      	ldr	r2, [pc, #336]	@ (80034cc <HAL_ADC_MspInit+0x1c8>)
 800337a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800337c:	4b52      	ldr	r3, [pc, #328]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 800337e:	2200      	movs	r2, #0
 8003380:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003382:	4b51      	ldr	r3, [pc, #324]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003388:	4b4f      	ldr	r3, [pc, #316]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 800338a:	2200      	movs	r2, #0
 800338c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800338e:	4b4e      	ldr	r3, [pc, #312]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 8003390:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003394:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003396:	4b4c      	ldr	r3, [pc, #304]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 8003398:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800339c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800339e:	4b4a      	ldr	r3, [pc, #296]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 80033a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033a6:	4b48      	ldr	r3, [pc, #288]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 80033a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033ae:	4b46      	ldr	r3, [pc, #280]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b4:	4b44      	ldr	r3, [pc, #272]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033ba:	4843      	ldr	r0, [pc, #268]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 80033bc:	f001 fdc2 	bl	8004f44 <HAL_DMA_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80033c6:	f000 fc7b 	bl	8003cc0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a3e      	ldr	r2, [pc, #248]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 80033ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80033d0:	4a3d      	ldr	r2, [pc, #244]	@ (80034c8 <HAL_ADC_MspInit+0x1c4>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2106      	movs	r1, #6
 80033da:	2012      	movs	r0, #18
 80033dc:	f001 fd88 	bl	8004ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80033e0:	2012      	movs	r0, #18
 80033e2:	f001 fda1 	bl	8004f28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80033e6:	e065      	b.n	80034b4 <HAL_ADC_MspInit+0x1b0>
  else if(adcHandle->Instance==ADC2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a38      	ldr	r2, [pc, #224]	@ (80034d0 <HAL_ADC_MspInit+0x1cc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d160      	bne.n	80034b4 <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	4b32      	ldr	r3, [pc, #200]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	4a31      	ldr	r2, [pc, #196]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 80033fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003400:	6453      	str	r3, [r2, #68]	@ 0x44
 8003402:	4b2f      	ldr	r3, [pc, #188]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	4b2b      	ldr	r3, [pc, #172]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	4a2a      	ldr	r2, [pc, #168]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6313      	str	r3, [r2, #48]	@ 0x30
 800341e:	4b28      	ldr	r3, [pc, #160]	@ (80034c0 <HAL_ADC_MspInit+0x1bc>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800342a:	23c0      	movs	r3, #192	@ 0xc0
 800342c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800342e:	2303      	movs	r3, #3
 8003430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003436:	f107 031c 	add.w	r3, r7, #28
 800343a:	4619      	mov	r1, r3
 800343c:	4821      	ldr	r0, [pc, #132]	@ (80034c4 <HAL_ADC_MspInit+0x1c0>)
 800343e:	f002 f983 	bl	8005748 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003442:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 8003444:	4a24      	ldr	r2, [pc, #144]	@ (80034d8 <HAL_ADC_MspInit+0x1d4>)
 8003446:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003448:	4b22      	ldr	r3, [pc, #136]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 800344a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800344e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003450:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003456:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 8003458:	2200      	movs	r2, #0
 800345a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800345c:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 800345e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003462:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003464:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 8003466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800346a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800346c:	4b19      	ldr	r3, [pc, #100]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 800346e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003472:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003474:	4b17      	ldr	r3, [pc, #92]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 8003476:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800347a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800347c:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 800347e:	2200      	movs	r2, #0
 8003480:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003482:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 8003484:	2200      	movs	r2, #0
 8003486:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003488:	4812      	ldr	r0, [pc, #72]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 800348a:	f001 fd5b 	bl	8004f44 <HAL_DMA_Init>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_ADC_MspInit+0x194>
      Error_Handler();
 8003494:	f000 fc14 	bl	8003cc0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0e      	ldr	r2, [pc, #56]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 800349c:	639a      	str	r2, [r3, #56]	@ 0x38
 800349e:	4a0d      	ldr	r2, [pc, #52]	@ (80034d4 <HAL_ADC_MspInit+0x1d0>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80034a4:	2200      	movs	r2, #0
 80034a6:	2106      	movs	r1, #6
 80034a8:	2012      	movs	r0, #18
 80034aa:	f001 fd21 	bl	8004ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80034ae:	2012      	movs	r0, #18
 80034b0:	f001 fd3a 	bl	8004f28 <HAL_NVIC_EnableIRQ>
}
 80034b4:	bf00      	nop
 80034b6:	3730      	adds	r7, #48	@ 0x30
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40012000 	.word	0x40012000
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	200033b0 	.word	0x200033b0
 80034cc:	40026410 	.word	0x40026410
 80034d0:	40012100 	.word	0x40012100
 80034d4:	20003410 	.word	0x20003410
 80034d8:	40026440 	.word	0x40026440

080034dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <MX_DMA_Init+0x4c>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003528 <MX_DMA_Init+0x4c>)
 80034ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <MX_DMA_Init+0x4c>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2106      	movs	r1, #6
 8003502:	2038      	movs	r0, #56	@ 0x38
 8003504:	f001 fcf4 	bl	8004ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003508:	2038      	movs	r0, #56	@ 0x38
 800350a:	f001 fd0d 	bl	8004f28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 6, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2106      	movs	r1, #6
 8003512:	203a      	movs	r0, #58	@ 0x3a
 8003514:	f001 fcec 	bl	8004ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003518:	203a      	movs	r0, #58	@ 0x3a
 800351a:	f001 fd05 	bl	8004f28 <HAL_NVIC_EnableIRQ>

}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800

0800352c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	@ 0x28
 8003530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	4b3c      	ldr	r3, [pc, #240]	@ (8003638 <MX_GPIO_Init+0x10c>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	4a3b      	ldr	r2, [pc, #236]	@ (8003638 <MX_GPIO_Init+0x10c>)
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	6313      	str	r3, [r2, #48]	@ 0x30
 8003552:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <MX_GPIO_Init+0x10c>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b35      	ldr	r3, [pc, #212]	@ (8003638 <MX_GPIO_Init+0x10c>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	4a34      	ldr	r2, [pc, #208]	@ (8003638 <MX_GPIO_Init+0x10c>)
 8003568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800356c:	6313      	str	r3, [r2, #48]	@ 0x30
 800356e:	4b32      	ldr	r3, [pc, #200]	@ (8003638 <MX_GPIO_Init+0x10c>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	4b2e      	ldr	r3, [pc, #184]	@ (8003638 <MX_GPIO_Init+0x10c>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	4a2d      	ldr	r2, [pc, #180]	@ (8003638 <MX_GPIO_Init+0x10c>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6313      	str	r3, [r2, #48]	@ 0x30
 800358a:	4b2b      	ldr	r3, [pc, #172]	@ (8003638 <MX_GPIO_Init+0x10c>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <MX_GPIO_Init+0x10c>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	4a26      	ldr	r2, [pc, #152]	@ (8003638 <MX_GPIO_Init+0x10c>)
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a6:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <MX_GPIO_Init+0x10c>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2120      	movs	r1, #32
 80035b6:	4821      	ldr	r0, [pc, #132]	@ (800363c <MX_GPIO_Init+0x110>)
 80035b8:	f002 fa5a 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDBlue_Pin|LEDYellow_Pin|LEDRed_Pin|LEDGreen_Pin, GPIO_PIN_RESET);
 80035bc:	2200      	movs	r2, #0
 80035be:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80035c2:	481f      	ldr	r0, [pc, #124]	@ (8003640 <MX_GPIO_Init+0x114>)
 80035c4:	f002 fa54 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80035c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80035d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	4619      	mov	r1, r3
 80035de:	4818      	ldr	r0, [pc, #96]	@ (8003640 <MX_GPIO_Init+0x114>)
 80035e0:	f002 f8b2 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80035e4:	2320      	movs	r3, #32
 80035e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e8:	2301      	movs	r3, #1
 80035ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f0:	2300      	movs	r3, #0
 80035f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4619      	mov	r1, r3
 80035fa:	4810      	ldr	r0, [pc, #64]	@ (800363c <MX_GPIO_Init+0x110>)
 80035fc:	f002 f8a4 	bl	8005748 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDBlue_Pin LEDYellow_Pin LEDRed_Pin LEDGreen_Pin */
  GPIO_InitStruct.Pin = LEDBlue_Pin|LEDYellow_Pin|LEDRed_Pin|LEDGreen_Pin;
 8003600:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003606:	2311      	movs	r3, #17
 8003608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800360e:	2302      	movs	r3, #2
 8003610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4619      	mov	r1, r3
 8003618:	4809      	ldr	r0, [pc, #36]	@ (8003640 <MX_GPIO_Init+0x114>)
 800361a:	f002 f895 	bl	8005748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	2106      	movs	r1, #6
 8003622:	2028      	movs	r0, #40	@ 0x28
 8003624:	f001 fc64 	bl	8004ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003628:	2028      	movs	r0, #40	@ 0x28
 800362a:	f001 fc7d 	bl	8004f28 <HAL_NVIC_EnableIRQ>

}
 800362e:	bf00      	nop
 8003630:	3728      	adds	r7, #40	@ 0x28
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	40020000 	.word	0x40020000
 8003640:	40020800 	.word	0x40020800

08003644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800364a:	f000 fe17 	bl	800427c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800364e:	f000 f8c7 	bl	80037e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003652:	f7ff ff6b 	bl	800352c <MX_GPIO_Init>
  MX_DMA_Init();
 8003656:	f7ff ff41 	bl	80034dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800365a:	f000 fd37 	bl	80040cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800365e:	f7ff fd91 	bl	8003184 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003662:	f7ff fdef 	bl	8003244 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8003666:	f000 fd07 	bl	8004078 <MX_USART1_UART_Init>
	//							RTOS Init
	//***********************************************************************
	{

		// Enable the CYCCNT counter
		DWT_CTRL |= (1 << 0);
 800366a:	4b4b      	ldr	r3, [pc, #300]	@ (8003798 <main+0x154>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a4a      	ldr	r2, [pc, #296]	@ (8003798 <main+0x154>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6013      	str	r3, [r2, #0]
	//***********************************************************************
	//					RTOS : Task Creation/ Queue define
	//***********************************************************************
	{
		//<-----------------------Task Creation---------------------->
		status = xTaskCreate(LED_Green_Handler, "LED_Green_Task", 200, NULL, 2,
 8003676:	4b49      	ldr	r3, [pc, #292]	@ (800379c <main+0x158>)
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	2302      	movs	r3, #2
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2300      	movs	r3, #0
 8003680:	22c8      	movs	r2, #200	@ 0xc8
 8003682:	4947      	ldr	r1, [pc, #284]	@ (80037a0 <main+0x15c>)
 8003684:	4847      	ldr	r0, [pc, #284]	@ (80037a4 <main+0x160>)
 8003686:	f7fe f953 	bl	8001930 <xTaskCreate>
 800368a:	6178      	str	r0, [r7, #20]
				&task1_handle);
		configASSERT(status == pdPASS);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d00b      	beq.n	80036aa <main+0x66>
        __asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	613b      	str	r3, [r7, #16]
    }
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	e7fd      	b.n	80036a6 <main+0x62>

		status = xTaskCreate(LED_Red_Handler, "LED_Red_Task", 200, NULL, 2,
 80036aa:	4b3f      	ldr	r3, [pc, #252]	@ (80037a8 <main+0x164>)
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	2302      	movs	r3, #2
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2300      	movs	r3, #0
 80036b4:	22c8      	movs	r2, #200	@ 0xc8
 80036b6:	493d      	ldr	r1, [pc, #244]	@ (80037ac <main+0x168>)
 80036b8:	483d      	ldr	r0, [pc, #244]	@ (80037b0 <main+0x16c>)
 80036ba:	f7fe f939 	bl	8001930 <xTaskCreate>
 80036be:	6178      	str	r0, [r7, #20]
				&task2_handle);
		configASSERT(status == pdPASS);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d00b      	beq.n	80036de <main+0x9a>
        __asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	60fb      	str	r3, [r7, #12]
    }
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	e7fd      	b.n	80036da <main+0x96>

		status = xTaskCreate(Para_Calc_Handler, "Para_Calc_Task", 500, NULL, 2,
 80036de:	4b35      	ldr	r3, [pc, #212]	@ (80037b4 <main+0x170>)
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	2302      	movs	r3, #2
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	2300      	movs	r3, #0
 80036e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80036ec:	4932      	ldr	r1, [pc, #200]	@ (80037b8 <main+0x174>)
 80036ee:	4833      	ldr	r0, [pc, #204]	@ (80037bc <main+0x178>)
 80036f0:	f7fe f91e 	bl	8001930 <xTaskCreate>
 80036f4:	6178      	str	r0, [r7, #20]
				&task3_handle);
		configASSERT(status == pdPASS);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d00b      	beq.n	8003714 <main+0xd0>
        __asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	60bb      	str	r3, [r7, #8]
    }
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <main+0xcc>

		//Printing On UART 1: ESP32
		status = xTaskCreate(Print_Handler, "Print_Task", 500, NULL, 2,
 8003714:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <main+0x17c>)
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	2302      	movs	r3, #2
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2300      	movs	r3, #0
 800371e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003722:	4928      	ldr	r1, [pc, #160]	@ (80037c4 <main+0x180>)
 8003724:	4828      	ldr	r0, [pc, #160]	@ (80037c8 <main+0x184>)
 8003726:	f7fe f903 	bl	8001930 <xTaskCreate>
 800372a:	6178      	str	r0, [r7, #20]
				&task4_handle);
		configASSERT(status == pdPASS);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d00b      	beq.n	800374a <main+0x106>
        __asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	607b      	str	r3, [r7, #4]
    }
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	e7fd      	b.n	8003746 <main+0x102>

		//<-----------------------Queue Creation---------------------->

		//		q_adc = xQueueCreate(1, sizeof(ADC_Struct_t));

		q_print = xQueueCreate(8, MAX_LEN);
 800374a:	2200      	movs	r2, #0
 800374c:	2120      	movs	r1, #32
 800374e:	2008      	movs	r0, #8
 8003750:	f7fd fda4 	bl	800129c <xQueueGenericCreate>
 8003754:	4603      	mov	r3, r0
 8003756:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <main+0x188>)
 8003758:	6013      	str	r3, [r2, #0]
		configASSERT(q_print != NULL);
 800375a:	4b1c      	ldr	r3, [pc, #112]	@ (80037cc <main+0x188>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <main+0x136>
        __asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	603b      	str	r3, [r7, #0]
    }
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	e7fd      	b.n	8003776 <main+0x132>
	}
	//***********************************************************************
	//							 HAL Init
	//***********************************************************************
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) (adc.ADC1_Val), 4);
 800377a:	2204      	movs	r2, #4
 800377c:	4914      	ldr	r1, [pc, #80]	@ (80037d0 <main+0x18c>)
 800377e:	4815      	ldr	r0, [pc, #84]	@ (80037d4 <main+0x190>)
 8003780:	f000 ff12 	bl	80045a8 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(&hadc2, (uint32_t*) (adc.ADC2_Val), 2);
 8003784:	2202      	movs	r2, #2
 8003786:	4914      	ldr	r1, [pc, #80]	@ (80037d8 <main+0x194>)
 8003788:	4814      	ldr	r0, [pc, #80]	@ (80037dc <main+0x198>)
 800378a:	f000 ff0d 	bl	80045a8 <HAL_ADC_Start_DMA>
	//***********************************************************************
	//							RTOS : Task Scheduler Starts
	//***********************************************************************
	{
		//<-----------------------Task Scheduler Starts---------------------->
		vTaskStartScheduler();
 800378e:	f7fe fa4b 	bl	8001c28 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003792:	bf00      	nop
 8003794:	e7fd      	b.n	8003792 <main+0x14e>
 8003796:	bf00      	nop
 8003798:	e0001000 	.word	0xe0001000
 800379c:	20003470 	.word	0x20003470
 80037a0:	0800d4ec 	.word	0x0800d4ec
 80037a4:	080038c5 	.word	0x080038c5
 80037a8:	20003474 	.word	0x20003474
 80037ac:	0800d4fc 	.word	0x0800d4fc
 80037b0:	0800397d 	.word	0x0800397d
 80037b4:	20003478 	.word	0x20003478
 80037b8:	0800d50c 	.word	0x0800d50c
 80037bc:	08003ad1 	.word	0x08003ad1
 80037c0:	2000347c 	.word	0x2000347c
 80037c4:	0800d51c 	.word	0x0800d51c
 80037c8:	08003a41 	.word	0x08003a41
 80037cc:	20003480 	.word	0x20003480
 80037d0:	20003484 	.word	0x20003484
 80037d4:	20003320 	.word	0x20003320
 80037d8:	2000348c 	.word	0x2000348c
 80037dc:	20003368 	.word	0x20003368

080037e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b094      	sub	sp, #80	@ 0x50
 80037e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037e6:	f107 031c 	add.w	r3, r7, #28
 80037ea:	2234      	movs	r2, #52	@ 0x34
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f005 fa5b 	bl	8008caa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037f4:	f107 0308 	add.w	r3, r7, #8
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	2300      	movs	r3, #0
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	4b2c      	ldr	r3, [pc, #176]	@ (80038bc <SystemClock_Config+0xdc>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	4a2b      	ldr	r2, [pc, #172]	@ (80038bc <SystemClock_Config+0xdc>)
 800380e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003812:	6413      	str	r3, [r2, #64]	@ 0x40
 8003814:	4b29      	ldr	r3, [pc, #164]	@ (80038bc <SystemClock_Config+0xdc>)
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003820:	2300      	movs	r3, #0
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <SystemClock_Config+0xe0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a25      	ldr	r2, [pc, #148]	@ (80038c0 <SystemClock_Config+0xe0>)
 800382a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <SystemClock_Config+0xe0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800383c:	2302      	movs	r3, #2
 800383e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003840:	2301      	movs	r3, #1
 8003842:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003844:	2310      	movs	r3, #16
 8003846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003848:	2302      	movs	r3, #2
 800384a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800384c:	2300      	movs	r3, #0
 800384e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003850:	2308      	movs	r3, #8
 8003852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003854:	23b4      	movs	r3, #180	@ 0xb4
 8003856:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003858:	2302      	movs	r3, #2
 800385a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800385c:	2302      	movs	r3, #2
 800385e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003860:	2302      	movs	r3, #2
 8003862:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003864:	f107 031c 	add.w	r3, r7, #28
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fd0b 	bl	8006284 <HAL_RCC_OscConfig>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003874:	f000 fa24 	bl	8003cc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003878:	f002 f938 	bl	8005aec <HAL_PWREx_EnableOverDrive>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003882:	f000 fa1d 	bl	8003cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003886:	230f      	movs	r3, #15
 8003888:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800388a:	2302      	movs	r3, #2
 800388c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003892:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800389c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800389e:	f107 0308 	add.w	r3, r7, #8
 80038a2:	2105      	movs	r1, #5
 80038a4:	4618      	mov	r0, r3
 80038a6:	f002 f971 	bl	8005b8c <HAL_RCC_ClockConfig>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80038b0:	f000 fa06 	bl	8003cc0 <Error_Handler>
  }
}
 80038b4:	bf00      	nop
 80038b6:	3750      	adds	r7, #80	@ 0x50
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40007000 	.word	0x40007000

080038c4 <LED_Green_Handler>:

/* USER CODE BEGIN 4 */

void LED_Green_Handler(void *param) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08c      	sub	sp, #48	@ 0x30
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

	char tx[MAX_LEN];
	int counter = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while (1) {
		ang += 0.3f;
 80038d0:	4b23      	ldr	r3, [pc, #140]	@ (8003960 <LED_Green_Handler+0x9c>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8003964 <LED_Green_Handler+0xa0>
 80038da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038de:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <LED_Green_Handler+0x9c>)
 80038e0:	edc3 7a00 	vstr	s15, [r3]
		if (ang >= 6.27f) {
 80038e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003960 <LED_Green_Handler+0x9c>)
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8003968 <LED_Green_Handler+0xa4>
 80038ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	db03      	blt.n	8003900 <LED_Green_Handler+0x3c>
			ang = 0;
 80038f8:	4b19      	ldr	r3, [pc, #100]	@ (8003960 <LED_Green_Handler+0x9c>)
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
		}
		val = (int32_t) (1000.0f * sin(ang));
 8003900:	4b17      	ldr	r3, [pc, #92]	@ (8003960 <LED_Green_Handler+0x9c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fc fe3f 	bl	8000588 <__aeabi_f2d>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	ec43 2b10 	vmov	d0, r2, r3
 8003912:	f008 fdb5 	bl	800c480 <sin>
 8003916:	ec51 0b10 	vmov	r0, r1, d0
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	4b13      	ldr	r3, [pc, #76]	@ (800396c <LED_Green_Handler+0xa8>)
 8003920:	f7fc fe8a 	bl	8000638 <__aeabi_dmul>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f7fd f934 	bl	8000b98 <__aeabi_d2iz>
 8003930:	4603      	mov	r3, r0
 8003932:	4a0f      	ldr	r2, [pc, #60]	@ (8003970 <LED_Green_Handler+0xac>)
 8003934:	6013      	str	r3, [r2, #0]
		// convert integer to string safely
		snprintf(tx, sizeof(tx), "SV:%d\r\n", val);
 8003936:	4b0e      	ldr	r3, [pc, #56]	@ (8003970 <LED_Green_Handler+0xac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f107 000c 	add.w	r0, r7, #12
 800393e:	4a0d      	ldr	r2, [pc, #52]	@ (8003974 <LED_Green_Handler+0xb0>)
 8003940:	2120      	movs	r1, #32
 8003942:	f005 f917 	bl	8008b74 <sniprintf>

		xQueueSend(q_print, &tx, portMAX_DELAY);
 8003946:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <LED_Green_Handler+0xb4>)
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	f107 010c 	add.w	r1, r7, #12
 800394e:	2300      	movs	r3, #0
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	f7fd fd28 	bl	80013a8 <xQueueGenericSend>
//		sprintf(str_green, "%03d\n", (uint32_t) (val * 10.0f));
//		sprintf((char*) str_g, "%03.0f\n", val); // /* , |%04.0f : sysVar.nMotor*/

//		xQueueSend(q_print, &buffer, portMAX_DELAY);

		vTaskDelay(pdMS_TO_TICKS(50));
 8003958:	2096      	movs	r0, #150	@ 0x96
 800395a:	f7fe f92f 	bl	8001bbc <vTaskDelay>
		ang += 0.3f;
 800395e:	e7b7      	b.n	80038d0 <LED_Green_Handler+0xc>
 8003960:	200034b4 	.word	0x200034b4
 8003964:	3e99999a 	.word	0x3e99999a
 8003968:	40c8a3d7 	.word	0x40c8a3d7
 800396c:	408f4000 	.word	0x408f4000
 8003970:	200034bc 	.word	0x200034bc
 8003974:	0800d528 	.word	0x0800d528
 8003978:	20003480 	.word	0x20003480

0800397c <LED_Red_Handler>:
	}

}

void LED_Red_Handler(void *param) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	@ 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	char tx2[MAX_LEN];
	while (1) {
		ang2 += 0.3f;
 8003984:	4b26      	ldr	r3, [pc, #152]	@ (8003a20 <LED_Red_Handler+0xa4>)
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003a24 <LED_Red_Handler+0xa8>
 800398e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003992:	4b23      	ldr	r3, [pc, #140]	@ (8003a20 <LED_Red_Handler+0xa4>)
 8003994:	edc3 7a00 	vstr	s15, [r3]
		if (ang2 >= 6.27f) {
 8003998:	4b21      	ldr	r3, [pc, #132]	@ (8003a20 <LED_Red_Handler+0xa4>)
 800399a:	edd3 7a00 	vldr	s15, [r3]
 800399e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003a28 <LED_Red_Handler+0xac>
 80039a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039aa:	db03      	blt.n	80039b4 <LED_Red_Handler+0x38>
			ang2 = 0;
 80039ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <LED_Red_Handler+0xa4>)
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
		}
		val2 = (int32_t) (1000.0f * sin(ang2 + 0.1f));
 80039b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <LED_Red_Handler+0xa4>)
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003a2c <LED_Red_Handler+0xb0>
 80039be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039c2:	ee17 0a90 	vmov	r0, s15
 80039c6:	f7fc fddf 	bl	8000588 <__aeabi_f2d>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	ec43 2b10 	vmov	d0, r2, r3
 80039d2:	f008 fd55 	bl	800c480 <sin>
 80039d6:	ec51 0b10 	vmov	r0, r1, d0
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <LED_Red_Handler+0xb4>)
 80039e0:	f7fc fe2a 	bl	8000638 <__aeabi_dmul>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7fd f8d4 	bl	8000b98 <__aeabi_d2iz>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4a10      	ldr	r2, [pc, #64]	@ (8003a34 <LED_Red_Handler+0xb8>)
 80039f4:	6013      	str	r3, [r2, #0]
		// convert integer to string safely
		snprintf(tx2, sizeof(tx2), "SI:%d\r\n", val2);
 80039f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <LED_Red_Handler+0xb8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f107 0008 	add.w	r0, r7, #8
 80039fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003a38 <LED_Red_Handler+0xbc>)
 8003a00:	2120      	movs	r1, #32
 8003a02:	f005 f8b7 	bl	8008b74 <sniprintf>

		xQueueSend(q_print, &tx2, portMAX_DELAY);
 8003a06:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <LED_Red_Handler+0xc0>)
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	f107 0108 	add.w	r1, r7, #8
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f04f 32ff 	mov.w	r2, #4294967295
 8003a14:	f7fd fcc8 	bl	80013a8 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(50));
 8003a18:	2096      	movs	r0, #150	@ 0x96
 8003a1a:	f7fe f8cf 	bl	8001bbc <vTaskDelay>
		ang2 += 0.3f;
 8003a1e:	e7b1      	b.n	8003984 <LED_Red_Handler+0x8>
 8003a20:	200034b8 	.word	0x200034b8
 8003a24:	3e99999a 	.word	0x3e99999a
 8003a28:	40c8a3d7 	.word	0x40c8a3d7
 8003a2c:	3dcccccd 	.word	0x3dcccccd
 8003a30:	408f4000 	.word	0x408f4000
 8003a34:	200034c0 	.word	0x200034c0
 8003a38:	0800d530 	.word	0x0800d530
 8003a3c:	20003480 	.word	0x20003480

08003a40 <Print_Handler>:
//		vTaskDelay(pdMS_TO_TICKS(1000));
//	}
//
//}

void Print_Handler(void *param) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	@ 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	char rx[MAX_LEN] = "start\n";
 8003a48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <Print_Handler+0x80>)
 8003a4a:	f107 030c 	add.w	r3, r7, #12
 8003a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a52:	6018      	str	r0, [r3, #0]
 8003a54:	3304      	adds	r3, #4
 8003a56:	8019      	strh	r1, [r3, #0]
 8003a58:	3302      	adds	r3, #2
 8003a5a:	0c0a      	lsrs	r2, r1, #16
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	f107 0313 	add.w	r3, r7, #19
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	60da      	str	r2, [r3, #12]
 8003a6c:	611a      	str	r2, [r3, #16]
 8003a6e:	615a      	str	r2, [r3, #20]
 8003a70:	761a      	strb	r2, [r3, #24]
	while (1) {

		xQueueReceive(q_print, rx, portMAX_DELAY);
 8003a72:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <Print_Handler+0x84>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f107 010c 	add.w	r1, r7, #12
 8003a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fd7c 	bl	800157c <xQueueReceive>
		size_t len = strnlen(rx, MAX_LEN); // safe check
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	2120      	movs	r1, #32
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f005 f915 	bl	8008cba <strnlen>
 8003a90:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (len > 0) {
 8003a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ec      	beq.n	8003a72 <Print_Handler+0x32>
			HAL_UART_Transmit(&huart2, (uint8_t*) rx, len,
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	f107 010c 	add.w	r1, r7, #12
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa4:	4808      	ldr	r0, [pc, #32]	@ (8003ac8 <Print_Handler+0x88>)
 8003aa6:	f003 f977 	bl	8006d98 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			HAL_UART_Transmit(&huart1, (uint8_t*) rx, len,
 8003aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	f107 010c 	add.w	r1, r7, #12
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	4805      	ldr	r0, [pc, #20]	@ (8003acc <Print_Handler+0x8c>)
 8003ab8:	f003 f96e 	bl	8006d98 <HAL_UART_Transmit>
	while (1) {
 8003abc:	e7d9      	b.n	8003a72 <Print_Handler+0x32>
 8003abe:	bf00      	nop
 8003ac0:	0800d538 	.word	0x0800d538
 8003ac4:	20003480 	.word	0x20003480
 8003ac8:	20003558 	.word	0x20003558
 8003acc:	20003510 	.word	0x20003510

08003ad0 <Para_Calc_Handler>:
//				strlen((char*) print_str), HAL_MAX_DELAY);
//	}
//
//}

static void Para_Calc_Handler(void *param) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	@ 0x30
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	6078      	str	r0, [r7, #4]
	char tx3[MAX_LEN];
	while (1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8003adc:	2101      	movs	r1, #1
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f7fe fcf2 	bl	80024c8 <ulTaskGenericNotifyTake>
		vrms = (float) (adc.ADC1_Val[0]) * 500.0f / 4096.0f;
 8003ae4:	4b46      	ldr	r3, [pc, #280]	@ (8003c00 <Para_Calc_Handler+0x130>)
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af0:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8003c04 <Para_Calc_Handler+0x134>
 8003af4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003af8:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003c08 <Para_Calc_Handler+0x138>
 8003afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b00:	4b42      	ldr	r3, [pc, #264]	@ (8003c0c <Para_Calc_Handler+0x13c>)
 8003b02:	edc3 7a00 	vstr	s15, [r3]
		irms = (float) (adc.ADC1_Val[1]) * 20.0f / 4096.0f;
 8003b06:	4b3e      	ldr	r3, [pc, #248]	@ (8003c00 <Para_Calc_Handler+0x130>)
 8003b08:	885b      	ldrh	r3, [r3, #2]
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b12:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003b16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b1a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8003c08 <Para_Calc_Handler+0x138>
 8003b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b22:	4b3b      	ldr	r3, [pc, #236]	@ (8003c10 <Para_Calc_Handler+0x140>)
 8003b24:	edc3 7a00 	vstr	s15, [r3]
		power = vrms * irms;
 8003b28:	4b38      	ldr	r3, [pc, #224]	@ (8003c0c <Para_Calc_Handler+0x13c>)
 8003b2a:	ed93 7a00 	vldr	s14, [r3]
 8003b2e:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <Para_Calc_Handler+0x140>)
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b38:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <Para_Calc_Handler+0x144>)
 8003b3a:	edc3 7a00 	vstr	s15, [r3]
		temperature = (float) (adc.ADC2_Val[0]) * 200.0f / 4096.0f;
 8003b3e:	4b30      	ldr	r3, [pc, #192]	@ (8003c00 <Para_Calc_Handler+0x130>)
 8003b40:	891b      	ldrh	r3, [r3, #8]
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8003c18 <Para_Calc_Handler+0x148>
 8003b4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b52:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8003c08 <Para_Calc_Handler+0x138>
 8003b56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b5a:	4b30      	ldr	r3, [pc, #192]	@ (8003c1c <Para_Calc_Handler+0x14c>)
 8003b5c:	edc3 7a00 	vstr	s15, [r3]
		vrms_int = (uint32_t) vrms;
 8003b60:	4b2a      	ldr	r3, [pc, #168]	@ (8003c0c <Para_Calc_Handler+0x13c>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b6a:	ee17 2a90 	vmov	r2, s15
 8003b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c20 <Para_Calc_Handler+0x150>)
 8003b70:	601a      	str	r2, [r3, #0]
		irms_int = (uint32_t) irms;
 8003b72:	4b27      	ldr	r3, [pc, #156]	@ (8003c10 <Para_Calc_Handler+0x140>)
 8003b74:	edd3 7a00 	vldr	s15, [r3]
 8003b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7c:	ee17 2a90 	vmov	r2, s15
 8003b80:	4b28      	ldr	r3, [pc, #160]	@ (8003c24 <Para_Calc_Handler+0x154>)
 8003b82:	601a      	str	r2, [r3, #0]
		power_int = (uint32_t) power;
 8003b84:	4b23      	ldr	r3, [pc, #140]	@ (8003c14 <Para_Calc_Handler+0x144>)
 8003b86:	edd3 7a00 	vldr	s15, [r3]
 8003b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b8e:	ee17 2a90 	vmov	r2, s15
 8003b92:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <Para_Calc_Handler+0x158>)
 8003b94:	601a      	str	r2, [r3, #0]
		temperature_int = (uint32_t) temperature;
 8003b96:	4b21      	ldr	r3, [pc, #132]	@ (8003c1c <Para_Calc_Handler+0x14c>)
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ba0:	ee17 2a90 	vmov	r2, s15
 8003ba4:	4b21      	ldr	r3, [pc, #132]	@ (8003c2c <Para_Calc_Handler+0x15c>)
 8003ba6:	601a      	str	r2, [r3, #0]

		// convert integer to string safely
		snprintf(tx3, sizeof(tx3), "NV:%d %d \n", vrms_int, irms_int);
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <Para_Calc_Handler+0x150>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <Para_Calc_Handler+0x154>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f107 0008 	add.w	r0, r7, #8
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c30 <Para_Calc_Handler+0x160>)
 8003bba:	2120      	movs	r1, #32
 8003bbc:	f004 ffda 	bl	8008b74 <sniprintf>
		xQueueSend(q_print, &tx3, portMAX_DELAY);
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c34 <Para_Calc_Handler+0x164>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	f107 0108 	add.w	r1, r7, #8
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f04f 32ff 	mov.w	r2, #4294967295
 8003bce:	f7fd fbeb 	bl	80013a8 <xQueueGenericSend>
		snprintf(tx3, sizeof(tx3), "NPT:%d %d \n", power_int, temperature_int);
 8003bd2:	4b15      	ldr	r3, [pc, #84]	@ (8003c28 <Para_Calc_Handler+0x158>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <Para_Calc_Handler+0x15c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f107 0008 	add.w	r0, r7, #8
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <Para_Calc_Handler+0x168>)
 8003be4:	2120      	movs	r1, #32
 8003be6:	f004 ffc5 	bl	8008b74 <sniprintf>
		xQueueSend(q_print, &tx3, portMAX_DELAY);
 8003bea:	4b12      	ldr	r3, [pc, #72]	@ (8003c34 <Para_Calc_Handler+0x164>)
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	f107 0108 	add.w	r1, r7, #8
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf8:	f7fd fbd6 	bl	80013a8 <xQueueGenericSend>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003bfc:	bf00      	nop
 8003bfe:	e76b      	b.n	8003ad8 <Para_Calc_Handler+0x8>
 8003c00:	20003484 	.word	0x20003484
 8003c04:	43fa0000 	.word	0x43fa0000
 8003c08:	45800000 	.word	0x45800000
 8003c0c:	20003498 	.word	0x20003498
 8003c10:	2000349c 	.word	0x2000349c
 8003c14:	20003494 	.word	0x20003494
 8003c18:	43480000 	.word	0x43480000
 8003c1c:	200034a0 	.word	0x200034a0
 8003c20:	200034a8 	.word	0x200034a8
 8003c24:	200034ac 	.word	0x200034ac
 8003c28:	200034a4 	.word	0x200034a4
 8003c2c:	200034b0 	.word	0x200034b0
 8003c30:	0800d558 	.word	0x0800d558
 8003c34:	20003480 	.word	0x20003480
 8003c38:	0800d564 	.word	0x0800d564

08003c3c <HAL_ADC_ConvCpltCallback>:
	}
}
//***********************************************************************
//								ISR
//***********************************************************************
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	adc_isr_cnt++;
 8003c44:	4b12      	ldr	r3, [pc, #72]	@ (8003c90 <HAL_ADC_ConvCpltCallback+0x54>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	4a11      	ldr	r2, [pc, #68]	@ (8003c90 <HAL_ADC_ConvCpltCallback+0x54>)
 8003c4c:	6013      	str	r3, [r2, #0]
	if (adc_isr_cnt > 1000) {
 8003c4e:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <HAL_ADC_ConvCpltCallback+0x54>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c56:	dd17      	ble.n	8003c88 <HAL_ADC_ConvCpltCallback+0x4c>
		adc_isr_cnt = 0;
 8003c58:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <HAL_ADC_ConvCpltCallback+0x54>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(task3_handle, &xHigherPriorityTaskWoken);
 8003c62:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <HAL_ADC_ConvCpltCallback+0x58>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f107 020c 	add.w	r2, r7, #12
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fc93 	bl	8002598 <vTaskGenericNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <HAL_ADC_ConvCpltCallback+0x4c>
 8003c78:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <HAL_ADC_ConvCpltCallback+0x5c>)
 8003c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	f3bf 8f6f 	isb	sy
	}
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20003490 	.word	0x20003490
 8003c94:	20003478 	.word	0x20003478
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003cae:	f000 fb07 	bl	80042c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40001000 	.word	0x40001000

08003cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc4:	b672      	cpsid	i
}
 8003cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <Error_Handler+0x8>

08003ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	4a0f      	ldr	r2, [pc, #60]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	4a08      	ldr	r2, [pc, #32]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_MspInit+0x4c>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
    vInitPrioGroupValue();
 8003d0a:	f7fe fe8f 	bl	8002a2c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800

08003d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08e      	sub	sp, #56	@ 0x38
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	4b33      	ldr	r3, [pc, #204]	@ (8003e00 <HAL_InitTick+0xe4>)
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	4a32      	ldr	r2, [pc, #200]	@ (8003e00 <HAL_InitTick+0xe4>)
 8003d36:	f043 0310 	orr.w	r3, r3, #16
 8003d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d3c:	4b30      	ldr	r3, [pc, #192]	@ (8003e00 <HAL_InitTick+0xe4>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d48:	f107 0210 	add.w	r2, r7, #16
 8003d4c:	f107 0314 	add.w	r3, r7, #20
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f002 f834 	bl	8005dc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d62:	f002 f805 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8003d66:	6378      	str	r0, [r7, #52]	@ 0x34
 8003d68:	e004      	b.n	8003d74 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d6a:	f002 f801 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d76:	4a23      	ldr	r2, [pc, #140]	@ (8003e04 <HAL_InitTick+0xe8>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	0c9b      	lsrs	r3, r3, #18
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d82:	4b21      	ldr	r3, [pc, #132]	@ (8003e08 <HAL_InitTick+0xec>)
 8003d84:	4a21      	ldr	r2, [pc, #132]	@ (8003e0c <HAL_InitTick+0xf0>)
 8003d86:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003d88:	4b1f      	ldr	r3, [pc, #124]	@ (8003e08 <HAL_InitTick+0xec>)
 8003d8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d90:	4a1d      	ldr	r2, [pc, #116]	@ (8003e08 <HAL_InitTick+0xec>)
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003d96:	4b1c      	ldr	r3, [pc, #112]	@ (8003e08 <HAL_InitTick+0xec>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e08 <HAL_InitTick+0xec>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da2:	4b19      	ldr	r3, [pc, #100]	@ (8003e08 <HAL_InitTick+0xec>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003da8:	4817      	ldr	r0, [pc, #92]	@ (8003e08 <HAL_InitTick+0xec>)
 8003daa:	f002 fd09 	bl	80067c0 <HAL_TIM_Base_Init>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003db4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d11b      	bne.n	8003df4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003dbc:	4812      	ldr	r0, [pc, #72]	@ (8003e08 <HAL_InitTick+0xec>)
 8003dbe:	f002 fd59 	bl	8006874 <HAL_TIM_Base_Start_IT>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d111      	bne.n	8003df4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003dd0:	2036      	movs	r0, #54	@ 0x36
 8003dd2:	f001 f8a9 	bl	8004f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d808      	bhi.n	8003dee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003ddc:	2200      	movs	r2, #0
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	2036      	movs	r0, #54	@ 0x36
 8003de2:	f001 f885 	bl	8004ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003de6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e10 <HAL_InitTick+0xf4>)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e002      	b.n	8003df4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003df4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3738      	adds	r7, #56	@ 0x38
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800
 8003e04:	431bde83 	.word	0x431bde83
 8003e08:	200034c4 	.word	0x200034c4
 8003e0c:	40001000 	.word	0x40001000
 8003e10:	20000008 	.word	0x20000008

08003e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <NMI_Handler+0x4>

08003e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <HardFault_Handler+0x4>

08003e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <MemManage_Handler+0x4>

08003e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <BusFault_Handler+0x4>

08003e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <UsageFault_Handler+0x4>

08003e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e50:	4803      	ldr	r0, [pc, #12]	@ (8003e60 <ADC_IRQHandler+0x14>)
 8003e52:	f000 fa98 	bl	8004386 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003e56:	4803      	ldr	r0, [pc, #12]	@ (8003e64 <ADC_IRQHandler+0x18>)
 8003e58:	f000 fa95 	bl	8004386 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20003320 	.word	0x20003320
 8003e64:	20003368 	.word	0x20003368

08003e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e6c:	4802      	ldr	r0, [pc, #8]	@ (8003e78 <USART2_IRQHandler+0x10>)
 8003e6e:	f003 f81f 	bl	8006eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20003558 	.word	0x20003558

08003e7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//	Button_ISR();
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003e80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003e84:	f001 fe0e 	bl	8005aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e88:	bf00      	nop
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e90:	4802      	ldr	r0, [pc, #8]	@ (8003e9c <TIM6_DAC_IRQHandler+0x10>)
 8003e92:	f002 fd5f 	bl	8006954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200034c4 	.word	0x200034c4

08003ea0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ea4:	4802      	ldr	r0, [pc, #8]	@ (8003eb0 <DMA2_Stream0_IRQHandler+0x10>)
 8003ea6:	f001 f9e5 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	200033b0 	.word	0x200033b0

08003eb4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003eb8:	4802      	ldr	r0, [pc, #8]	@ (8003ec4 <DMA2_Stream2_IRQHandler+0x10>)
 8003eba:	f001 f9db 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20003410 	.word	0x20003410

08003ec8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return 1;
 8003ecc:	2301      	movs	r3, #1
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <_kill>:

int _kill(int pid, int sig)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ee2:	f004 ff41 	bl	8008d68 <__errno>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2216      	movs	r2, #22
 8003eea:	601a      	str	r2, [r3, #0]
  return -1;
 8003eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <_exit>:

void _exit (int status)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f00:	f04f 31ff 	mov.w	r1, #4294967295
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ffe7 	bl	8003ed8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f0a:	bf00      	nop
 8003f0c:	e7fd      	b.n	8003f0a <_exit+0x12>

08003f0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	e00a      	b.n	8003f36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f20:	f3af 8000 	nop.w
 8003f24:	4601      	mov	r1, r0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	60ba      	str	r2, [r7, #8]
 8003f2c:	b2ca      	uxtb	r2, r1
 8003f2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3301      	adds	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	dbf0      	blt.n	8003f20 <_read+0x12>
  }

  return len;
 8003f3e:	687b      	ldr	r3, [r7, #4]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e009      	b.n	8003f6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	60ba      	str	r2, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	dbf1      	blt.n	8003f5a <_write+0x12>
  }
  return len;
 8003f76:	687b      	ldr	r3, [r7, #4]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <_close>:

int _close(int file)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fa8:	605a      	str	r2, [r3, #4]
  return 0;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <_isatty>:

int _isatty(int file)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fc0:	2301      	movs	r3, #1
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b085      	sub	sp, #20
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ff0:	4a14      	ldr	r2, [pc, #80]	@ (8004044 <_sbrk+0x5c>)
 8003ff2:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <_sbrk+0x60>)
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ffc:	4b13      	ldr	r3, [pc, #76]	@ (800404c <_sbrk+0x64>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004004:	4b11      	ldr	r3, [pc, #68]	@ (800404c <_sbrk+0x64>)
 8004006:	4a12      	ldr	r2, [pc, #72]	@ (8004050 <_sbrk+0x68>)
 8004008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800400a:	4b10      	ldr	r3, [pc, #64]	@ (800404c <_sbrk+0x64>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	429a      	cmp	r2, r3
 8004016:	d207      	bcs.n	8004028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004018:	f004 fea6 	bl	8008d68 <__errno>
 800401c:	4603      	mov	r3, r0
 800401e:	220c      	movs	r2, #12
 8004020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
 8004026:	e009      	b.n	800403c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004028:	4b08      	ldr	r3, [pc, #32]	@ (800404c <_sbrk+0x64>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800402e:	4b07      	ldr	r3, [pc, #28]	@ (800404c <_sbrk+0x64>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	4a05      	ldr	r2, [pc, #20]	@ (800404c <_sbrk+0x64>)
 8004038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800403a:	68fb      	ldr	r3, [r7, #12]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20020000 	.word	0x20020000
 8004048:	00000400 	.word	0x00000400
 800404c:	2000350c 	.word	0x2000350c
 8004050:	200036f0 	.word	0x200036f0

08004054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <SystemInit+0x20>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	4a05      	ldr	r2, [pc, #20]	@ (8004074 <SystemInit+0x20>)
 8004060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800407c:	4b11      	ldr	r3, [pc, #68]	@ (80040c4 <MX_USART1_UART_Init+0x4c>)
 800407e:	4a12      	ldr	r2, [pc, #72]	@ (80040c8 <MX_USART1_UART_Init+0x50>)
 8004080:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004082:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <MX_USART1_UART_Init+0x4c>)
 8004084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004088:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800408a:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <MX_USART1_UART_Init+0x4c>)
 800408c:	2200      	movs	r2, #0
 800408e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004090:	4b0c      	ldr	r3, [pc, #48]	@ (80040c4 <MX_USART1_UART_Init+0x4c>)
 8004092:	2200      	movs	r2, #0
 8004094:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004096:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <MX_USART1_UART_Init+0x4c>)
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800409c:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <MX_USART1_UART_Init+0x4c>)
 800409e:	220c      	movs	r2, #12
 80040a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040a2:	4b08      	ldr	r3, [pc, #32]	@ (80040c4 <MX_USART1_UART_Init+0x4c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <MX_USART1_UART_Init+0x4c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80040ae:	4805      	ldr	r0, [pc, #20]	@ (80040c4 <MX_USART1_UART_Init+0x4c>)
 80040b0:	f002 fe22 	bl	8006cf8 <HAL_UART_Init>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80040ba:	f7ff fe01 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20003510 	.word	0x20003510
 80040c8:	40011000 	.word	0x40011000

080040cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040d2:	4a12      	ldr	r2, [pc, #72]	@ (800411c <MX_USART2_UART_Init+0x50>)
 80040d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040d6:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040de:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040f0:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040f2:	220c      	movs	r2, #12
 80040f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040f6:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004102:	4805      	ldr	r0, [pc, #20]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 8004104:	f002 fdf8 	bl	8006cf8 <HAL_UART_Init>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800410e:	f7ff fdd7 	bl	8003cc0 <Error_Handler>



  /* USER CODE END USART2_Init 2 */

}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20003558 	.word	0x20003558
 800411c:	40004400 	.word	0x40004400

08004120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08c      	sub	sp, #48	@ 0x30
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 031c 	add.w	r3, r7, #28
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a36      	ldr	r2, [pc, #216]	@ (8004218 <HAL_UART_MspInit+0xf8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d12d      	bne.n	800419e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	4b35      	ldr	r3, [pc, #212]	@ (800421c <HAL_UART_MspInit+0xfc>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	4a34      	ldr	r2, [pc, #208]	@ (800421c <HAL_UART_MspInit+0xfc>)
 800414c:	f043 0310 	orr.w	r3, r3, #16
 8004150:	6453      	str	r3, [r2, #68]	@ 0x44
 8004152:	4b32      	ldr	r3, [pc, #200]	@ (800421c <HAL_UART_MspInit+0xfc>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	4b2e      	ldr	r3, [pc, #184]	@ (800421c <HAL_UART_MspInit+0xfc>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	4a2d      	ldr	r2, [pc, #180]	@ (800421c <HAL_UART_MspInit+0xfc>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6313      	str	r3, [r2, #48]	@ 0x30
 800416e:	4b2b      	ldr	r3, [pc, #172]	@ (800421c <HAL_UART_MspInit+0xfc>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800417a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800417e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004188:	2303      	movs	r3, #3
 800418a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800418c:	2307      	movs	r3, #7
 800418e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004190:	f107 031c 	add.w	r3, r7, #28
 8004194:	4619      	mov	r1, r3
 8004196:	4822      	ldr	r0, [pc, #136]	@ (8004220 <HAL_UART_MspInit+0x100>)
 8004198:	f001 fad6 	bl	8005748 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800419c:	e038      	b.n	8004210 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a20      	ldr	r2, [pc, #128]	@ (8004224 <HAL_UART_MspInit+0x104>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d133      	bne.n	8004210 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <HAL_UART_MspInit+0xfc>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	4a1a      	ldr	r2, [pc, #104]	@ (800421c <HAL_UART_MspInit+0xfc>)
 80041b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b8:	4b18      	ldr	r3, [pc, #96]	@ (800421c <HAL_UART_MspInit+0xfc>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	4b14      	ldr	r3, [pc, #80]	@ (800421c <HAL_UART_MspInit+0xfc>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	4a13      	ldr	r2, [pc, #76]	@ (800421c <HAL_UART_MspInit+0xfc>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d4:	4b11      	ldr	r3, [pc, #68]	@ (800421c <HAL_UART_MspInit+0xfc>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80041e0:	230c      	movs	r3, #12
 80041e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e4:	2302      	movs	r3, #2
 80041e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ec:	2303      	movs	r3, #3
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041f0:	2307      	movs	r3, #7
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f4:	f107 031c 	add.w	r3, r7, #28
 80041f8:	4619      	mov	r1, r3
 80041fa:	4809      	ldr	r0, [pc, #36]	@ (8004220 <HAL_UART_MspInit+0x100>)
 80041fc:	f001 faa4 	bl	8005748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8004200:	2200      	movs	r2, #0
 8004202:	2106      	movs	r1, #6
 8004204:	2026      	movs	r0, #38	@ 0x26
 8004206:	f000 fe73 	bl	8004ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800420a:	2026      	movs	r0, #38	@ 0x26
 800420c:	f000 fe8c 	bl	8004f28 <HAL_NVIC_EnableIRQ>
}
 8004210:	bf00      	nop
 8004212:	3730      	adds	r7, #48	@ 0x30
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40011000 	.word	0x40011000
 800421c:	40023800 	.word	0x40023800
 8004220:	40020000 	.word	0x40020000
 8004224:	40004400 	.word	0x40004400

08004228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004260 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800422c:	f7ff ff12 	bl	8004054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004230:	480c      	ldr	r0, [pc, #48]	@ (8004264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004232:	490d      	ldr	r1, [pc, #52]	@ (8004268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004234:	4a0d      	ldr	r2, [pc, #52]	@ (800426c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004238:	e002      	b.n	8004240 <LoopCopyDataInit>

0800423a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800423a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800423c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800423e:	3304      	adds	r3, #4

08004240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004244:	d3f9      	bcc.n	800423a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004246:	4a0a      	ldr	r2, [pc, #40]	@ (8004270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004248:	4c0a      	ldr	r4, [pc, #40]	@ (8004274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800424a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800424c:	e001      	b.n	8004252 <LoopFillZerobss>

0800424e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800424e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004250:	3204      	adds	r2, #4

08004252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004254:	d3fb      	bcc.n	800424e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004256:	f004 fd8d 	bl	8008d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800425a:	f7ff f9f3 	bl	8003644 <main>
  bx  lr    
 800425e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004268:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800426c:	0800dba8 	.word	0x0800dba8
  ldr r2, =_sbss
 8004270:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004274:	200036f0 	.word	0x200036f0

08004278 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004278:	e7fe      	b.n	8004278 <CAN1_RX0_IRQHandler>
	...

0800427c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004280:	4b0e      	ldr	r3, [pc, #56]	@ (80042bc <HAL_Init+0x40>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0d      	ldr	r2, [pc, #52]	@ (80042bc <HAL_Init+0x40>)
 8004286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800428a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800428c:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <HAL_Init+0x40>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0a      	ldr	r2, [pc, #40]	@ (80042bc <HAL_Init+0x40>)
 8004292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004298:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <HAL_Init+0x40>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a07      	ldr	r2, [pc, #28]	@ (80042bc <HAL_Init+0x40>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a4:	2003      	movs	r0, #3
 80042a6:	f000 fe18 	bl	8004eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042aa:	200f      	movs	r0, #15
 80042ac:	f7ff fd36 	bl	8003d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042b0:	f7ff fd0c 	bl	8003ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023c00 	.word	0x40023c00

080042c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042c4:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <HAL_IncTick+0x20>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <HAL_IncTick+0x24>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4413      	add	r3, r2
 80042d0:	4a04      	ldr	r2, [pc, #16]	@ (80042e4 <HAL_IncTick+0x24>)
 80042d2:	6013      	str	r3, [r2, #0]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	2000000c 	.word	0x2000000c
 80042e4:	200035a0 	.word	0x200035a0

080042e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return uwTick;
 80042ec:	4b03      	ldr	r3, [pc, #12]	@ (80042fc <HAL_GetTick+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	200035a0 	.word	0x200035a0

08004300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e033      	b.n	800437e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fe fff0 	bl	8003304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d118      	bne.n	8004370 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004346:	f023 0302 	bic.w	r3, r3, #2
 800434a:	f043 0202 	orr.w	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fb8c 	bl	8004a70 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	f043 0201 	orr.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	641a      	str	r2, [r3, #64]	@ 0x40
 800436e:	e001      	b.n	8004374 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d049      	beq.n	8004450 <HAL_ADC_IRQHandler+0xca>
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d046      	beq.n	8004450 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d105      	bne.n	80043da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d12b      	bne.n	8004440 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d127      	bne.n	8004440 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d006      	beq.n	800440c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004408:	2b00      	cmp	r3, #0
 800440a:	d119      	bne.n	8004440 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0220 	bic.w	r2, r2, #32
 800441a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004420:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	f043 0201 	orr.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff fbfb 	bl	8003c3c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f06f 0212 	mvn.w	r2, #18
 800444e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d057      	beq.n	8004516 <HAL_ADC_IRQHandler+0x190>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d054      	beq.n	8004516 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d139      	bne.n	8004506 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d12b      	bne.n	8004506 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d124      	bne.n	8004506 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11d      	bne.n	8004506 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d119      	bne.n	8004506 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044e0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fc30 	bl	8004d6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 020c 	mvn.w	r2, #12
 8004514:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d017      	beq.n	800455c <HAL_ADC_IRQHandler+0x1d6>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d014      	beq.n	800455c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	d10d      	bne.n	800455c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f949 	bl	80047e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0201 	mvn.w	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800456a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d015      	beq.n	800459e <HAL_ADC_IRQHandler+0x218>
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d012      	beq.n	800459e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457c:	f043 0202 	orr.w	r2, r3, #2
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0220 	mvn.w	r2, #32
 800458c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f932 	bl	80047f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0220 	mvn.w	r2, #32
 800459c:	601a      	str	r2, [r3, #0]
  }
}
 800459e:	bf00      	nop
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_ADC_Start_DMA+0x22>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e0eb      	b.n	80047a2 <HAL_ADC_Start_DMA+0x1fa>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d018      	beq.n	8004612 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045f0:	4b6e      	ldr	r3, [pc, #440]	@ (80047ac <HAL_ADC_Start_DMA+0x204>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a6e      	ldr	r2, [pc, #440]	@ (80047b0 <HAL_ADC_Start_DMA+0x208>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	0c9a      	lsrs	r2, r3, #18
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8004604:	e002      	b.n	800460c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	3b01      	subs	r3, #1
 800460a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f9      	bne.n	8004606 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004620:	d107      	bne.n	8004632 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004630:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	f040 80a3 	bne.w	8004788 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800466c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004680:	d106      	bne.n	8004690 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004686:	f023 0206 	bic.w	r2, r3, #6
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	645a      	str	r2, [r3, #68]	@ 0x44
 800468e:	e002      	b.n	8004696 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800469e:	4b45      	ldr	r3, [pc, #276]	@ (80047b4 <HAL_ADC_Start_DMA+0x20c>)
 80046a0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a6:	4a44      	ldr	r2, [pc, #272]	@ (80047b8 <HAL_ADC_Start_DMA+0x210>)
 80046a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	4a43      	ldr	r2, [pc, #268]	@ (80047bc <HAL_ADC_Start_DMA+0x214>)
 80046b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b6:	4a42      	ldr	r2, [pc, #264]	@ (80047c0 <HAL_ADC_Start_DMA+0x218>)
 80046b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80046c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80046d2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046e2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	334c      	adds	r3, #76	@ 0x4c
 80046ee:	4619      	mov	r1, r3
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f000 fcd4 	bl	80050a0 <HAL_DMA_Start_IT>
 80046f8:	4603      	mov	r3, r0
 80046fa:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2b00      	cmp	r3, #0
 8004706:	d12a      	bne.n	800475e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2d      	ldr	r2, [pc, #180]	@ (80047c4 <HAL_ADC_Start_DMA+0x21c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d015      	beq.n	800473e <HAL_ADC_Start_DMA+0x196>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <HAL_ADC_Start_DMA+0x220>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d105      	bne.n	8004728 <HAL_ADC_Start_DMA+0x180>
 800471c:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <HAL_ADC_Start_DMA+0x20c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a27      	ldr	r2, [pc, #156]	@ (80047cc <HAL_ADC_Start_DMA+0x224>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d136      	bne.n	80047a0 <HAL_ADC_Start_DMA+0x1f8>
 8004732:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <HAL_ADC_Start_DMA+0x20c>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	2b00      	cmp	r3, #0
 800473c:	d130      	bne.n	80047a0 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d129      	bne.n	80047a0 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	e020      	b.n	80047a0 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a18      	ldr	r2, [pc, #96]	@ (80047c4 <HAL_ADC_Start_DMA+0x21c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d11b      	bne.n	80047a0 <HAL_ADC_Start_DMA+0x1f8>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d114      	bne.n	80047a0 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	e00b      	b.n	80047a0 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	f043 0210 	orr.w	r2, r3, #16
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000004 	.word	0x20000004
 80047b0:	431bde83 	.word	0x431bde83
 80047b4:	40012300 	.word	0x40012300
 80047b8:	08004c69 	.word	0x08004c69
 80047bc:	08004d23 	.word	0x08004d23
 80047c0:	08004d3f 	.word	0x08004d3f
 80047c4:	40012000 	.word	0x40012000
 80047c8:	40012100 	.word	0x40012100
 80047cc:	40012200 	.word	0x40012200

080047d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x1c>
 8004824:	2302      	movs	r3, #2
 8004826:	e113      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x244>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b09      	cmp	r3, #9
 8004836:	d925      	bls.n	8004884 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68d9      	ldr	r1, [r3, #12]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	3b1e      	subs	r3, #30
 800484e:	2207      	movs	r2, #7
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43da      	mvns	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	400a      	ands	r2, r1
 800485c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68d9      	ldr	r1, [r3, #12]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	4618      	mov	r0, r3
 8004870:	4603      	mov	r3, r0
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4403      	add	r3, r0
 8004876:	3b1e      	subs	r3, #30
 8004878:	409a      	lsls	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	e022      	b.n	80048ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6919      	ldr	r1, [r3, #16]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	4613      	mov	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	2207      	movs	r2, #7
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43da      	mvns	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	400a      	ands	r2, r1
 80048a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6919      	ldr	r1, [r3, #16]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4618      	mov	r0, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4403      	add	r3, r0
 80048c0:	409a      	lsls	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d824      	bhi.n	800491c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	3b05      	subs	r3, #5
 80048e4:	221f      	movs	r2, #31
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43da      	mvns	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	400a      	ands	r2, r1
 80048f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4618      	mov	r0, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	3b05      	subs	r3, #5
 800490e:	fa00 f203 	lsl.w	r2, r0, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	635a      	str	r2, [r3, #52]	@ 0x34
 800491a:	e04c      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d824      	bhi.n	800496e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	3b23      	subs	r3, #35	@ 0x23
 8004936:	221f      	movs	r2, #31
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43da      	mvns	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	400a      	ands	r2, r1
 8004944:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	4618      	mov	r0, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	3b23      	subs	r3, #35	@ 0x23
 8004960:	fa00 f203 	lsl.w	r2, r0, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	631a      	str	r2, [r3, #48]	@ 0x30
 800496c:	e023      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	3b41      	subs	r3, #65	@ 0x41
 8004980:	221f      	movs	r2, #31
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43da      	mvns	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	400a      	ands	r2, r1
 800498e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	4618      	mov	r0, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	3b41      	subs	r3, #65	@ 0x41
 80049aa:	fa00 f203 	lsl.w	r2, r0, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049b6:	4b29      	ldr	r3, [pc, #164]	@ (8004a5c <HAL_ADC_ConfigChannel+0x250>)
 80049b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a28      	ldr	r2, [pc, #160]	@ (8004a60 <HAL_ADC_ConfigChannel+0x254>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10f      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x1d8>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b12      	cmp	r3, #18
 80049ca:	d10b      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a60 <HAL_ADC_ConfigChannel+0x254>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d12b      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x23a>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <HAL_ADC_ConfigChannel+0x258>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <HAL_ADC_ConfigChannel+0x1f4>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b11      	cmp	r3, #17
 80049fe:	d122      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a11      	ldr	r2, [pc, #68]	@ (8004a64 <HAL_ADC_ConfigChannel+0x258>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d111      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a22:	4b11      	ldr	r3, [pc, #68]	@ (8004a68 <HAL_ADC_ConfigChannel+0x25c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a11      	ldr	r2, [pc, #68]	@ (8004a6c <HAL_ADC_ConfigChannel+0x260>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	0c9a      	lsrs	r2, r3, #18
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004a38:	e002      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f9      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40012300 	.word	0x40012300
 8004a60:	40012000 	.word	0x40012000
 8004a64:	10000012 	.word	0x10000012
 8004a68:	20000004 	.word	0x20000004
 8004a6c:	431bde83 	.word	0x431bde83

08004a70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a78:	4b79      	ldr	r3, [pc, #484]	@ (8004c60 <ADC_Init+0x1f0>)
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	021a      	lsls	r2, r3, #8
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6859      	ldr	r1, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6899      	ldr	r1, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b02:	4a58      	ldr	r2, [pc, #352]	@ (8004c64 <ADC_Init+0x1f4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d022      	beq.n	8004b4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6899      	ldr	r1, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6899      	ldr	r1, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	e00f      	b.n	8004b6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0202 	bic.w	r2, r2, #2
 8004b7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6899      	ldr	r1, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	7e1b      	ldrb	r3, [r3, #24]
 8004b88:	005a      	lsls	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01b      	beq.n	8004bd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004baa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004bba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	035a      	lsls	r2, r3, #13
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	e007      	b.n	8004be4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	051a      	lsls	r2, r3, #20
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6899      	ldr	r1, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c26:	025a      	lsls	r2, r3, #9
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6899      	ldr	r1, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	029a      	lsls	r2, r3, #10
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40012300 	.word	0x40012300
 8004c64:	0f000001 	.word	0x0f000001

08004c68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d13c      	bne.n	8004cfc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d12b      	bne.n	8004cf4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d127      	bne.n	8004cf4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d006      	beq.n	8004cc0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d119      	bne.n	8004cf4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0220 	bic.w	r2, r2, #32
 8004cce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d105      	bne.n	8004cf4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	f043 0201 	orr.w	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7fe ffa1 	bl	8003c3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cfa:	e00e      	b.n	8004d1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fd75 	bl	80047f8 <HAL_ADC_ErrorCallback>
}
 8004d0e:	e004      	b.n	8004d1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4798      	blx	r3
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff fd4d 	bl	80047d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2240      	movs	r2, #64	@ 0x40
 8004d50:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	f043 0204 	orr.w	r2, r3, #4
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff fd4a 	bl	80047f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d90:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004db2:	4a04      	ldr	r2, [pc, #16]	@ (8004dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	60d3      	str	r3, [r2, #12]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000ed00 	.word	0xe000ed00

08004dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dcc:	4b04      	ldr	r3, [pc, #16]	@ (8004de0 <__NVIC_GetPriorityGrouping+0x18>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	0a1b      	lsrs	r3, r3, #8
 8004dd2:	f003 0307 	and.w	r3, r3, #7
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	e000ed00 	.word	0xe000ed00

08004de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	db0b      	blt.n	8004e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	f003 021f 	and.w	r2, r3, #31
 8004dfc:	4907      	ldr	r1, [pc, #28]	@ (8004e1c <__NVIC_EnableIRQ+0x38>)
 8004dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	2001      	movs	r0, #1
 8004e06:	fa00 f202 	lsl.w	r2, r0, r2
 8004e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	e000e100 	.word	0xe000e100

08004e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	6039      	str	r1, [r7, #0]
 8004e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	db0a      	blt.n	8004e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	490c      	ldr	r1, [pc, #48]	@ (8004e6c <__NVIC_SetPriority+0x4c>)
 8004e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3e:	0112      	lsls	r2, r2, #4
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	440b      	add	r3, r1
 8004e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e48:	e00a      	b.n	8004e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	4908      	ldr	r1, [pc, #32]	@ (8004e70 <__NVIC_SetPriority+0x50>)
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	3b04      	subs	r3, #4
 8004e58:	0112      	lsls	r2, r2, #4
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	761a      	strb	r2, [r3, #24]
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	e000e100 	.word	0xe000e100
 8004e70:	e000ed00 	.word	0xe000ed00

08004e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	@ 0x24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f1c3 0307 	rsb	r3, r3, #7
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	bf28      	it	cs
 8004e92:	2304      	movcs	r3, #4
 8004e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d902      	bls.n	8004ea4 <NVIC_EncodePriority+0x30>
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	3b03      	subs	r3, #3
 8004ea2:	e000      	b.n	8004ea6 <NVIC_EncodePriority+0x32>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	43d9      	mvns	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ecc:	4313      	orrs	r3, r2
         );
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3724      	adds	r7, #36	@ 0x24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ff4c 	bl	8004d80 <__NVIC_SetPriorityGrouping>
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f02:	f7ff ff61 	bl	8004dc8 <__NVIC_GetPriorityGrouping>
 8004f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	6978      	ldr	r0, [r7, #20]
 8004f0e:	f7ff ffb1 	bl	8004e74 <NVIC_EncodePriority>
 8004f12:	4602      	mov	r2, r0
 8004f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff ff80 	bl	8004e20 <__NVIC_SetPriority>
}
 8004f20:	bf00      	nop
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff ff54 	bl	8004de4 <__NVIC_EnableIRQ>
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f50:	f7ff f9ca 	bl	80042e8 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e099      	b.n	8005094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f80:	e00f      	b.n	8004fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f82:	f7ff f9b1 	bl	80042e8 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	d908      	bls.n	8004fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e078      	b.n	8005094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e8      	bne.n	8004f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4b38      	ldr	r3, [pc, #224]	@ (800509c <HAL_DMA_Init+0x158>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d107      	bne.n	800500c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	4313      	orrs	r3, r2
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0307 	bic.w	r3, r3, #7
 8005022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	2b04      	cmp	r3, #4
 8005034:	d117      	bne.n	8005066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fb01 	bl	8005650 <DMA_CheckFifoParam>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2240      	movs	r2, #64	@ 0x40
 8005058:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005062:	2301      	movs	r3, #1
 8005064:	e016      	b.n	8005094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fab8 	bl	80055e4 <DMA_CalcBaseAndBitshift>
 8005074:	4603      	mov	r3, r0
 8005076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507c:	223f      	movs	r2, #63	@ 0x3f
 800507e:	409a      	lsls	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	f010803f 	.word	0xf010803f

080050a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_DMA_Start_IT+0x26>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e040      	b.n	8005148 <HAL_DMA_Start_IT+0xa8>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d12f      	bne.n	800513a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fa4a 	bl	8005588 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f8:	223f      	movs	r2, #63	@ 0x3f
 80050fa:	409a      	lsls	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0216 	orr.w	r2, r2, #22
 800510e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0208 	orr.w	r2, r2, #8
 8005126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e005      	b.n	8005146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005142:	2302      	movs	r3, #2
 8005144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005146:	7dfb      	ldrb	r3, [r7, #23]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800515e:	f7ff f8c3 	bl	80042e8 <HAL_GetTick>
 8005162:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d008      	beq.n	8005182 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2280      	movs	r2, #128	@ 0x80
 8005174:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e052      	b.n	8005228 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0216 	bic.w	r2, r2, #22
 8005190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <HAL_DMA_Abort+0x62>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0208 	bic.w	r2, r2, #8
 80051c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d2:	e013      	b.n	80051fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051d4:	f7ff f888 	bl	80042e8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d90c      	bls.n	80051fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2203      	movs	r2, #3
 80051ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e015      	b.n	8005228 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e4      	bne.n	80051d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520e:	223f      	movs	r2, #63	@ 0x3f
 8005210:	409a      	lsls	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d004      	beq.n	800524e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2280      	movs	r2, #128	@ 0x80
 8005248:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e00c      	b.n	8005268 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2205      	movs	r2, #5
 8005252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005280:	4b8e      	ldr	r3, [pc, #568]	@ (80054bc <HAL_DMA_IRQHandler+0x248>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a8e      	ldr	r2, [pc, #568]	@ (80054c0 <HAL_DMA_IRQHandler+0x24c>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	0a9b      	lsrs	r3, r3, #10
 800528c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005292:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529e:	2208      	movs	r2, #8
 80052a0:	409a      	lsls	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01a      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d013      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0204 	bic.w	r2, r2, #4
 80052c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052cc:	2208      	movs	r2, #8
 80052ce:	409a      	lsls	r2, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d8:	f043 0201 	orr.w	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e4:	2201      	movs	r2, #1
 80052e6:	409a      	lsls	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005302:	2201      	movs	r2, #1
 8005304:	409a      	lsls	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530e:	f043 0202 	orr.w	r2, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800531a:	2204      	movs	r2, #4
 800531c:	409a      	lsls	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d012      	beq.n	800534c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005338:	2204      	movs	r2, #4
 800533a:	409a      	lsls	r2, r3
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005344:	f043 0204 	orr.w	r2, r3, #4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005350:	2210      	movs	r2, #16
 8005352:	409a      	lsls	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d043      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d03c      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536e:	2210      	movs	r2, #16
 8005370:	409a      	lsls	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d018      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d108      	bne.n	80053a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d024      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
 80053a2:	e01f      	b.n	80053e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01b      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
 80053b4:	e016      	b.n	80053e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d107      	bne.n	80053d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0208 	bic.w	r2, r2, #8
 80053d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e8:	2220      	movs	r2, #32
 80053ea:	409a      	lsls	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 808f 	beq.w	8005514 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8087 	beq.w	8005514 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540a:	2220      	movs	r2, #32
 800540c:	409a      	lsls	r2, r3
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b05      	cmp	r3, #5
 800541c:	d136      	bne.n	800548c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0216 	bic.w	r2, r2, #22
 800542c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800543c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_DMA_IRQHandler+0x1da>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0208 	bic.w	r2, r2, #8
 800545c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005462:	223f      	movs	r2, #63	@ 0x3f
 8005464:	409a      	lsls	r2, r3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547e:	2b00      	cmp	r3, #0
 8005480:	d07e      	beq.n	8005580 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
        }
        return;
 800548a:	e079      	b.n	8005580 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01d      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10d      	bne.n	80054c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d031      	beq.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3
 80054b8:	e02c      	b.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
 80054ba:	bf00      	nop
 80054bc:	20000004 	.word	0x20000004
 80054c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d023      	beq.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
 80054d4:	e01e      	b.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10f      	bne.n	8005504 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0210 	bic.w	r2, r2, #16
 80054f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005518:	2b00      	cmp	r3, #0
 800551a:	d032      	beq.n	8005582 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d022      	beq.n	800556e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2205      	movs	r2, #5
 800552c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	3301      	adds	r3, #1
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	429a      	cmp	r2, r3
 800554a:	d307      	bcc.n	800555c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f2      	bne.n	8005540 <HAL_DMA_IRQHandler+0x2cc>
 800555a:	e000      	b.n	800555e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800555c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
 800557e:	e000      	b.n	8005582 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005580:	bf00      	nop
    }
  }
}
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b40      	cmp	r3, #64	@ 0x40
 80055b4:	d108      	bne.n	80055c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055c6:	e007      	b.n	80055d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	60da      	str	r2, [r3, #12]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	3b10      	subs	r3, #16
 80055f4:	4a14      	ldr	r2, [pc, #80]	@ (8005648 <DMA_CalcBaseAndBitshift+0x64>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	091b      	lsrs	r3, r3, #4
 80055fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055fe:	4a13      	ldr	r2, [pc, #76]	@ (800564c <DMA_CalcBaseAndBitshift+0x68>)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d909      	bls.n	8005626 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	1d1a      	adds	r2, r3, #4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	659a      	str	r2, [r3, #88]	@ 0x58
 8005624:	e007      	b.n	8005636 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	aaaaaaab 	.word	0xaaaaaaab
 800564c:	0800d58c 	.word	0x0800d58c

08005650 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005660:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d11f      	bne.n	80056aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d856      	bhi.n	800571e <DMA_CheckFifoParam+0xce>
 8005670:	a201      	add	r2, pc, #4	@ (adr r2, 8005678 <DMA_CheckFifoParam+0x28>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	08005689 	.word	0x08005689
 800567c:	0800569b 	.word	0x0800569b
 8005680:	08005689 	.word	0x08005689
 8005684:	0800571f 	.word	0x0800571f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d046      	beq.n	8005722 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005698:	e043      	b.n	8005722 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056a2:	d140      	bne.n	8005726 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a8:	e03d      	b.n	8005726 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b2:	d121      	bne.n	80056f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d837      	bhi.n	800572a <DMA_CheckFifoParam+0xda>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <DMA_CheckFifoParam+0x70>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056d7 	.word	0x080056d7
 80056c8:	080056d1 	.word	0x080056d1
 80056cc:	080056e9 	.word	0x080056e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
      break;
 80056d4:	e030      	b.n	8005738 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d025      	beq.n	800572e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e6:	e022      	b.n	800572e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056f0:	d11f      	bne.n	8005732 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056f6:	e01c      	b.n	8005732 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d903      	bls.n	8005706 <DMA_CheckFifoParam+0xb6>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d003      	beq.n	800570c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005704:	e018      	b.n	8005738 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	73fb      	strb	r3, [r7, #15]
      break;
 800570a:	e015      	b.n	8005738 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005710:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00e      	beq.n	8005736 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	e00b      	b.n	8005736 <DMA_CheckFifoParam+0xe6>
      break;
 800571e:	bf00      	nop
 8005720:	e00a      	b.n	8005738 <DMA_CheckFifoParam+0xe8>
      break;
 8005722:	bf00      	nop
 8005724:	e008      	b.n	8005738 <DMA_CheckFifoParam+0xe8>
      break;
 8005726:	bf00      	nop
 8005728:	e006      	b.n	8005738 <DMA_CheckFifoParam+0xe8>
      break;
 800572a:	bf00      	nop
 800572c:	e004      	b.n	8005738 <DMA_CheckFifoParam+0xe8>
      break;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <DMA_CheckFifoParam+0xe8>
      break;   
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <DMA_CheckFifoParam+0xe8>
      break;
 8005736:	bf00      	nop
    }
  } 
  
  return status; 
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop

08005748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	@ 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	e165      	b.n	8005a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005764:	2201      	movs	r2, #1
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4013      	ands	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	429a      	cmp	r2, r3
 800577e:	f040 8154 	bne.w	8005a2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d005      	beq.n	800579a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005796:	2b02      	cmp	r3, #2
 8005798:	d130      	bne.n	80057fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	2203      	movs	r2, #3
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057d0:	2201      	movs	r2, #1
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	f003 0201 	and.w	r2, r3, #1
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	2b03      	cmp	r3, #3
 8005806:	d017      	beq.n	8005838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d123      	bne.n	800588c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	08da      	lsrs	r2, r3, #3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3208      	adds	r2, #8
 800584c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	220f      	movs	r2, #15
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4013      	ands	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	08da      	lsrs	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3208      	adds	r2, #8
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	2203      	movs	r2, #3
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 0203 	and.w	r2, r3, #3
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80ae 	beq.w	8005a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005a48 <HAL_GPIO_Init+0x300>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d6:	4a5c      	ldr	r2, [pc, #368]	@ (8005a48 <HAL_GPIO_Init+0x300>)
 80058d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80058de:	4b5a      	ldr	r3, [pc, #360]	@ (8005a48 <HAL_GPIO_Init+0x300>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058ea:	4a58      	ldr	r2, [pc, #352]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	3302      	adds	r3, #2
 80058f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	220f      	movs	r2, #15
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4013      	ands	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a4f      	ldr	r2, [pc, #316]	@ (8005a50 <HAL_GPIO_Init+0x308>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d025      	beq.n	8005962 <HAL_GPIO_Init+0x21a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a4e      	ldr	r2, [pc, #312]	@ (8005a54 <HAL_GPIO_Init+0x30c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01f      	beq.n	800595e <HAL_GPIO_Init+0x216>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a4d      	ldr	r2, [pc, #308]	@ (8005a58 <HAL_GPIO_Init+0x310>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d019      	beq.n	800595a <HAL_GPIO_Init+0x212>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a4c      	ldr	r2, [pc, #304]	@ (8005a5c <HAL_GPIO_Init+0x314>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <HAL_GPIO_Init+0x20e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a4b      	ldr	r2, [pc, #300]	@ (8005a60 <HAL_GPIO_Init+0x318>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00d      	beq.n	8005952 <HAL_GPIO_Init+0x20a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a4a      	ldr	r2, [pc, #296]	@ (8005a64 <HAL_GPIO_Init+0x31c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <HAL_GPIO_Init+0x206>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a49      	ldr	r2, [pc, #292]	@ (8005a68 <HAL_GPIO_Init+0x320>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d101      	bne.n	800594a <HAL_GPIO_Init+0x202>
 8005946:	2306      	movs	r3, #6
 8005948:	e00c      	b.n	8005964 <HAL_GPIO_Init+0x21c>
 800594a:	2307      	movs	r3, #7
 800594c:	e00a      	b.n	8005964 <HAL_GPIO_Init+0x21c>
 800594e:	2305      	movs	r3, #5
 8005950:	e008      	b.n	8005964 <HAL_GPIO_Init+0x21c>
 8005952:	2304      	movs	r3, #4
 8005954:	e006      	b.n	8005964 <HAL_GPIO_Init+0x21c>
 8005956:	2303      	movs	r3, #3
 8005958:	e004      	b.n	8005964 <HAL_GPIO_Init+0x21c>
 800595a:	2302      	movs	r3, #2
 800595c:	e002      	b.n	8005964 <HAL_GPIO_Init+0x21c>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <HAL_GPIO_Init+0x21c>
 8005962:	2300      	movs	r3, #0
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	f002 0203 	and.w	r2, r2, #3
 800596a:	0092      	lsls	r2, r2, #2
 800596c:	4093      	lsls	r3, r2
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005974:	4935      	ldr	r1, [pc, #212]	@ (8005a4c <HAL_GPIO_Init+0x304>)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	089b      	lsrs	r3, r3, #2
 800597a:	3302      	adds	r3, #2
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005982:	4b3a      	ldr	r3, [pc, #232]	@ (8005a6c <HAL_GPIO_Init+0x324>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059a6:	4a31      	ldr	r2, [pc, #196]	@ (8005a6c <HAL_GPIO_Init+0x324>)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059ac:	4b2f      	ldr	r3, [pc, #188]	@ (8005a6c <HAL_GPIO_Init+0x324>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059d0:	4a26      	ldr	r2, [pc, #152]	@ (8005a6c <HAL_GPIO_Init+0x324>)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059d6:	4b25      	ldr	r3, [pc, #148]	@ (8005a6c <HAL_GPIO_Init+0x324>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059fa:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <HAL_GPIO_Init+0x324>)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a00:	4b1a      	ldr	r3, [pc, #104]	@ (8005a6c <HAL_GPIO_Init+0x324>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a24:	4a11      	ldr	r2, [pc, #68]	@ (8005a6c <HAL_GPIO_Init+0x324>)
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2b0f      	cmp	r3, #15
 8005a34:	f67f ae96 	bls.w	8005764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	3724      	adds	r7, #36	@ 0x24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40013800 	.word	0x40013800
 8005a50:	40020000 	.word	0x40020000
 8005a54:	40020400 	.word	0x40020400
 8005a58:	40020800 	.word	0x40020800
 8005a5c:	40020c00 	.word	0x40020c00
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40021400 	.word	0x40021400
 8005a68:	40021800 	.word	0x40021800
 8005a6c:	40013c00 	.word	0x40013c00

08005a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	807b      	strh	r3, [r7, #2]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a80:	787b      	ldrb	r3, [r7, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a8c:	e003      	b.n	8005a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	041a      	lsls	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	619a      	str	r2, [r3, #24]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005aae:	4b08      	ldr	r3, [pc, #32]	@ (8005ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d006      	beq.n	8005ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005aba:	4a05      	ldr	r2, [pc, #20]	@ (8005ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f806 	bl	8005ad4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40013c00 	.word	0x40013c00

08005ad4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005af6:	2300      	movs	r3, #0
 8005af8:	603b      	str	r3, [r7, #0]
 8005afa:	4b20      	ldr	r3, [pc, #128]	@ (8005b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b06:	4b1d      	ldr	r3, [pc, #116]	@ (8005b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b12:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <HAL_PWREx_EnableOverDrive+0x94>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b18:	f7fe fbe6 	bl	80042e8 <HAL_GetTick>
 8005b1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b1e:	e009      	b.n	8005b34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b20:	f7fe fbe2 	bl	80042e8 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b2e:	d901      	bls.n	8005b34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e01f      	b.n	8005b74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b34:	4b13      	ldr	r3, [pc, #76]	@ (8005b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b40:	d1ee      	bne.n	8005b20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b42:	4b11      	ldr	r3, [pc, #68]	@ (8005b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b48:	f7fe fbce 	bl	80042e8 <HAL_GetTick>
 8005b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b4e:	e009      	b.n	8005b64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b50:	f7fe fbca 	bl	80042e8 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b5e:	d901      	bls.n	8005b64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e007      	b.n	8005b74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b64:	4b07      	ldr	r3, [pc, #28]	@ (8005b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b70:	d1ee      	bne.n	8005b50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	420e0040 	.word	0x420e0040
 8005b84:	40007000 	.word	0x40007000
 8005b88:	420e0044 	.word	0x420e0044

08005b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0cc      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba0:	4b68      	ldr	r3, [pc, #416]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d90c      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bae:	4b65      	ldr	r3, [pc, #404]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	4b63      	ldr	r3, [pc, #396]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0b8      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d020      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005be0:	4b59      	ldr	r3, [pc, #356]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4a58      	ldr	r2, [pc, #352]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005bea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bf8:	4b53      	ldr	r3, [pc, #332]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	4a52      	ldr	r2, [pc, #328]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c04:	4b50      	ldr	r3, [pc, #320]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	494d      	ldr	r1, [pc, #308]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d044      	beq.n	8005cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	4b47      	ldr	r3, [pc, #284]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d119      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d003      	beq.n	8005c4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e06f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e067      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c6a:	4b37      	ldr	r3, [pc, #220]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f023 0203 	bic.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4934      	ldr	r1, [pc, #208]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c7c:	f7fe fb34 	bl	80042e8 <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c82:	e00a      	b.n	8005c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c84:	f7fe fb30 	bl	80042e8 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e04f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 020c 	and.w	r2, r3, #12
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d1eb      	bne.n	8005c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cac:	4b25      	ldr	r3, [pc, #148]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d20c      	bcs.n	8005cd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cba:	4b22      	ldr	r3, [pc, #136]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b20      	ldr	r3, [pc, #128]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e032      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce0:	4b19      	ldr	r3, [pc, #100]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4916      	ldr	r1, [pc, #88]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cfe:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	490e      	ldr	r1, [pc, #56]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d12:	f000 f887 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	490a      	ldr	r1, [pc, #40]	@ (8005d4c <HAL_RCC_ClockConfig+0x1c0>)
 8005d24:	5ccb      	ldrb	r3, [r1, r3]
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	4a09      	ldr	r2, [pc, #36]	@ (8005d50 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d2e:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fd fff2 	bl	8003d1c <HAL_InitTick>

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023c00 	.word	0x40023c00
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	0800d574 	.word	0x0800d574
 8005d50:	20000004 	.word	0x20000004
 8005d54:	20000008 	.word	0x20000008

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	@ (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000004 	.word	0x20000004

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d74:	f7ff fff0 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0a9b      	lsrs	r3, r3, #10
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	@ (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	0800d584 	.word	0x0800d584

08005d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d9c:	f7ff ffdc 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0b5b      	lsrs	r3, r3, #13
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4903      	ldr	r1, [pc, #12]	@ (8005dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	0800d584 	.word	0x0800d584

08005dc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	220f      	movs	r2, #15
 8005dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005dd0:	4b12      	ldr	r3, [pc, #72]	@ (8005e1c <HAL_RCC_GetClockConfig+0x5c>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 0203 	and.w	r2, r3, #3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e1c <HAL_RCC_GetClockConfig+0x5c>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005de8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e1c <HAL_RCC_GetClockConfig+0x5c>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005df4:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <HAL_RCC_GetClockConfig+0x5c>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	08db      	lsrs	r3, r3, #3
 8005dfa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <HAL_RCC_GetClockConfig+0x60>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 020f 	and.w	r2, r3, #15
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	601a      	str	r2, [r3, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40023c00 	.word	0x40023c00

08005e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e28:	b0ae      	sub	sp, #184	@ 0xb8
 8005e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e4a:	4bcb      	ldr	r3, [pc, #812]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b0c      	cmp	r3, #12
 8005e54:	f200 8206 	bhi.w	8006264 <HAL_RCC_GetSysClockFreq+0x440>
 8005e58:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e95 	.word	0x08005e95
 8005e64:	08006265 	.word	0x08006265
 8005e68:	08006265 	.word	0x08006265
 8005e6c:	08006265 	.word	0x08006265
 8005e70:	08005e9d 	.word	0x08005e9d
 8005e74:	08006265 	.word	0x08006265
 8005e78:	08006265 	.word	0x08006265
 8005e7c:	08006265 	.word	0x08006265
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08006265 	.word	0x08006265
 8005e88:	08006265 	.word	0x08006265
 8005e8c:	08006265 	.word	0x08006265
 8005e90:	08006095 	.word	0x08006095
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e94:	4bb9      	ldr	r3, [pc, #740]	@ (800617c <HAL_RCC_GetSysClockFreq+0x358>)
 8005e96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e9a:	e1e7      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e9c:	4bb8      	ldr	r3, [pc, #736]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005ea2:	e1e3      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ea4:	4bb4      	ldr	r3, [pc, #720]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eb0:	4bb1      	ldr	r3, [pc, #708]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x354>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d071      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ebc:	4bae      	ldr	r3, [pc, #696]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	099b      	lsrs	r3, r3, #6
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ec8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	462b      	mov	r3, r5
 8005ee6:	f04f 0000 	mov.w	r0, #0
 8005eea:	f04f 0100 	mov.w	r1, #0
 8005eee:	0159      	lsls	r1, r3, #5
 8005ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ef4:	0150      	lsls	r0, r2, #5
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4621      	mov	r1, r4
 8005efc:	1a51      	subs	r1, r2, r1
 8005efe:	6439      	str	r1, [r7, #64]	@ 0x40
 8005f00:	4629      	mov	r1, r5
 8005f02:	eb63 0301 	sbc.w	r3, r3, r1
 8005f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005f14:	4649      	mov	r1, r9
 8005f16:	018b      	lsls	r3, r1, #6
 8005f18:	4641      	mov	r1, r8
 8005f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f1e:	4641      	mov	r1, r8
 8005f20:	018a      	lsls	r2, r1, #6
 8005f22:	4641      	mov	r1, r8
 8005f24:	1a51      	subs	r1, r2, r1
 8005f26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f28:	4649      	mov	r1, r9
 8005f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	00cb      	lsls	r3, r1, #3
 8005f40:	4641      	mov	r1, r8
 8005f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f46:	4641      	mov	r1, r8
 8005f48:	00ca      	lsls	r2, r1, #3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4622      	mov	r2, r4
 8005f52:	189b      	adds	r3, r3, r2
 8005f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f56:	462b      	mov	r3, r5
 8005f58:	460a      	mov	r2, r1
 8005f5a:	eb42 0303 	adc.w	r3, r2, r3
 8005f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	024b      	lsls	r3, r1, #9
 8005f70:	4621      	mov	r1, r4
 8005f72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f76:	4621      	mov	r1, r4
 8005f78:	024a      	lsls	r2, r1, #9
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f8c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005f90:	f7fa fe9a 	bl	8000cc8 <__aeabi_uldivmod>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4613      	mov	r3, r2
 8005f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f9e:	e067      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa0:	4b75      	ldr	r3, [pc, #468]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	099b      	lsrs	r3, r3, #6
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fba:	2300      	movs	r3, #0
 8005fbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fbe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	f04f 0000 	mov.w	r0, #0
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	0159      	lsls	r1, r3, #5
 8005fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd4:	0150      	lsls	r0, r2, #5
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4621      	mov	r1, r4
 8005fdc:	1a51      	subs	r1, r2, r1
 8005fde:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	018b      	lsls	r3, r1, #6
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ffe:	4641      	mov	r1, r8
 8006000:	018a      	lsls	r2, r1, #6
 8006002:	4641      	mov	r1, r8
 8006004:	ebb2 0a01 	subs.w	sl, r2, r1
 8006008:	4649      	mov	r1, r9
 800600a:	eb63 0b01 	sbc.w	fp, r3, r1
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800601a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800601e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006022:	4692      	mov	sl, r2
 8006024:	469b      	mov	fp, r3
 8006026:	4623      	mov	r3, r4
 8006028:	eb1a 0303 	adds.w	r3, sl, r3
 800602c:	623b      	str	r3, [r7, #32]
 800602e:	462b      	mov	r3, r5
 8006030:	eb4b 0303 	adc.w	r3, fp, r3
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006042:	4629      	mov	r1, r5
 8006044:	028b      	lsls	r3, r1, #10
 8006046:	4621      	mov	r1, r4
 8006048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800604c:	4621      	mov	r1, r4
 800604e:	028a      	lsls	r2, r1, #10
 8006050:	4610      	mov	r0, r2
 8006052:	4619      	mov	r1, r3
 8006054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006058:	2200      	movs	r2, #0
 800605a:	673b      	str	r3, [r7, #112]	@ 0x70
 800605c:	677a      	str	r2, [r7, #116]	@ 0x74
 800605e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006062:	f7fa fe31 	bl	8000cc8 <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4613      	mov	r3, r2
 800606c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006070:	4b41      	ldr	r3, [pc, #260]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x354>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	0c1b      	lsrs	r3, r3, #16
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	3301      	adds	r3, #1
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800608a:	fbb2 f3f3 	udiv	r3, r2, r3
 800608e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006092:	e0eb      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006094:	4b38      	ldr	r3, [pc, #224]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x354>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800609c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060a0:	4b35      	ldr	r3, [pc, #212]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x354>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d06b      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ac:	4b32      	ldr	r3, [pc, #200]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x354>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	099b      	lsrs	r3, r3, #6
 80060b2:	2200      	movs	r2, #0
 80060b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060be:	663b      	str	r3, [r7, #96]	@ 0x60
 80060c0:	2300      	movs	r3, #0
 80060c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80060c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80060c8:	4622      	mov	r2, r4
 80060ca:	462b      	mov	r3, r5
 80060cc:	f04f 0000 	mov.w	r0, #0
 80060d0:	f04f 0100 	mov.w	r1, #0
 80060d4:	0159      	lsls	r1, r3, #5
 80060d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060da:	0150      	lsls	r0, r2, #5
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4621      	mov	r1, r4
 80060e2:	1a51      	subs	r1, r2, r1
 80060e4:	61b9      	str	r1, [r7, #24]
 80060e6:	4629      	mov	r1, r5
 80060e8:	eb63 0301 	sbc.w	r3, r3, r1
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80060fa:	4659      	mov	r1, fp
 80060fc:	018b      	lsls	r3, r1, #6
 80060fe:	4651      	mov	r1, sl
 8006100:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006104:	4651      	mov	r1, sl
 8006106:	018a      	lsls	r2, r1, #6
 8006108:	4651      	mov	r1, sl
 800610a:	ebb2 0801 	subs.w	r8, r2, r1
 800610e:	4659      	mov	r1, fp
 8006110:	eb63 0901 	sbc.w	r9, r3, r1
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	f04f 0300 	mov.w	r3, #0
 800611c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006120:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006124:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006128:	4690      	mov	r8, r2
 800612a:	4699      	mov	r9, r3
 800612c:	4623      	mov	r3, r4
 800612e:	eb18 0303 	adds.w	r3, r8, r3
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	462b      	mov	r3, r5
 8006136:	eb49 0303 	adc.w	r3, r9, r3
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006148:	4629      	mov	r1, r5
 800614a:	024b      	lsls	r3, r1, #9
 800614c:	4621      	mov	r1, r4
 800614e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006152:	4621      	mov	r1, r4
 8006154:	024a      	lsls	r2, r1, #9
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800615e:	2200      	movs	r2, #0
 8006160:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006162:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006164:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006168:	f7fa fdae 	bl	8000cc8 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4613      	mov	r3, r2
 8006172:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006176:	e065      	b.n	8006244 <HAL_RCC_GetSysClockFreq+0x420>
 8006178:	40023800 	.word	0x40023800
 800617c:	00f42400 	.word	0x00f42400
 8006180:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006184:	4b3d      	ldr	r3, [pc, #244]	@ (800627c <HAL_RCC_GetSysClockFreq+0x458>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	099b      	lsrs	r3, r3, #6
 800618a:	2200      	movs	r2, #0
 800618c:	4618      	mov	r0, r3
 800618e:	4611      	mov	r1, r2
 8006190:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006194:	653b      	str	r3, [r7, #80]	@ 0x50
 8006196:	2300      	movs	r3, #0
 8006198:	657b      	str	r3, [r7, #84]	@ 0x54
 800619a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800619e:	4642      	mov	r2, r8
 80061a0:	464b      	mov	r3, r9
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f04f 0100 	mov.w	r1, #0
 80061aa:	0159      	lsls	r1, r3, #5
 80061ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061b0:	0150      	lsls	r0, r2, #5
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4641      	mov	r1, r8
 80061b8:	1a51      	subs	r1, r2, r1
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	4649      	mov	r1, r9
 80061be:	eb63 0301 	sbc.w	r3, r3, r1
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80061d0:	4659      	mov	r1, fp
 80061d2:	018b      	lsls	r3, r1, #6
 80061d4:	4651      	mov	r1, sl
 80061d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061da:	4651      	mov	r1, sl
 80061dc:	018a      	lsls	r2, r1, #6
 80061de:	4651      	mov	r1, sl
 80061e0:	1a54      	subs	r4, r2, r1
 80061e2:	4659      	mov	r1, fp
 80061e4:	eb63 0501 	sbc.w	r5, r3, r1
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	00eb      	lsls	r3, r5, #3
 80061f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061f6:	00e2      	lsls	r2, r4, #3
 80061f8:	4614      	mov	r4, r2
 80061fa:	461d      	mov	r5, r3
 80061fc:	4643      	mov	r3, r8
 80061fe:	18e3      	adds	r3, r4, r3
 8006200:	603b      	str	r3, [r7, #0]
 8006202:	464b      	mov	r3, r9
 8006204:	eb45 0303 	adc.w	r3, r5, r3
 8006208:	607b      	str	r3, [r7, #4]
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006216:	4629      	mov	r1, r5
 8006218:	028b      	lsls	r3, r1, #10
 800621a:	4621      	mov	r1, r4
 800621c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006220:	4621      	mov	r1, r4
 8006222:	028a      	lsls	r2, r1, #10
 8006224:	4610      	mov	r0, r2
 8006226:	4619      	mov	r1, r3
 8006228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800622c:	2200      	movs	r2, #0
 800622e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006230:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006232:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006236:	f7fa fd47 	bl	8000cc8 <__aeabi_uldivmod>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4613      	mov	r3, r2
 8006240:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006244:	4b0d      	ldr	r3, [pc, #52]	@ (800627c <HAL_RCC_GetSysClockFreq+0x458>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	0f1b      	lsrs	r3, r3, #28
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006252:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800625a:	fbb2 f3f3 	udiv	r3, r2, r3
 800625e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006262:	e003      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006264:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006266:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800626a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800626c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006270:	4618      	mov	r0, r3
 8006272:	37b8      	adds	r7, #184	@ 0xb8
 8006274:	46bd      	mov	sp, r7
 8006276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627a:	bf00      	nop
 800627c:	40023800 	.word	0x40023800
 8006280:	00f42400 	.word	0x00f42400

08006284 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e28d      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8083 	beq.w	80063aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80062a4:	4b94      	ldr	r3, [pc, #592]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 030c 	and.w	r3, r3, #12
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d019      	beq.n	80062e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80062b0:	4b91      	ldr	r3, [pc, #580]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d106      	bne.n	80062ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80062bc:	4b8e      	ldr	r3, [pc, #568]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062c8:	d00c      	beq.n	80062e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ca:	4b8b      	ldr	r3, [pc, #556]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80062d2:	2b0c      	cmp	r3, #12
 80062d4:	d112      	bne.n	80062fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d6:	4b88      	ldr	r3, [pc, #544]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062e2:	d10b      	bne.n	80062fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e4:	4b84      	ldr	r3, [pc, #528]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d05b      	beq.n	80063a8 <HAL_RCC_OscConfig+0x124>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d157      	bne.n	80063a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e25a      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006304:	d106      	bne.n	8006314 <HAL_RCC_OscConfig+0x90>
 8006306:	4b7c      	ldr	r3, [pc, #496]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a7b      	ldr	r2, [pc, #492]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800630c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	e01d      	b.n	8006350 <HAL_RCC_OscConfig+0xcc>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800631c:	d10c      	bne.n	8006338 <HAL_RCC_OscConfig+0xb4>
 800631e:	4b76      	ldr	r3, [pc, #472]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a75      	ldr	r2, [pc, #468]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 8006324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4b73      	ldr	r3, [pc, #460]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a72      	ldr	r2, [pc, #456]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 8006330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e00b      	b.n	8006350 <HAL_RCC_OscConfig+0xcc>
 8006338:	4b6f      	ldr	r3, [pc, #444]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a6e      	ldr	r2, [pc, #440]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800633e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	4b6c      	ldr	r3, [pc, #432]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a6b      	ldr	r2, [pc, #428]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800634a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800634e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fd ffc6 	bl	80042e8 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006360:	f7fd ffc2 	bl	80042e8 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b64      	cmp	r3, #100	@ 0x64
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e21f      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006372:	4b61      	ldr	r3, [pc, #388]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0f0      	beq.n	8006360 <HAL_RCC_OscConfig+0xdc>
 800637e:	e014      	b.n	80063aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fd ffb2 	bl	80042e8 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006388:	f7fd ffae 	bl	80042e8 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b64      	cmp	r3, #100	@ 0x64
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e20b      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639a:	4b57      	ldr	r3, [pc, #348]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x104>
 80063a6:	e000      	b.n	80063aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d06f      	beq.n	8006496 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063b6:	4b50      	ldr	r3, [pc, #320]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d017      	beq.n	80063f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80063c2:	4b4d      	ldr	r3, [pc, #308]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d105      	bne.n	80063da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80063ce:	4b4a      	ldr	r3, [pc, #296]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063da:	4b47      	ldr	r3, [pc, #284]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80063e2:	2b0c      	cmp	r3, #12
 80063e4:	d11c      	bne.n	8006420 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e6:	4b44      	ldr	r3, [pc, #272]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d116      	bne.n	8006420 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_RCC_OscConfig+0x186>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d001      	beq.n	800640a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e1d3      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640a:	4b3b      	ldr	r3, [pc, #236]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4937      	ldr	r1, [pc, #220]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641e:	e03a      	b.n	8006496 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006428:	4b34      	ldr	r3, [pc, #208]	@ (80064fc <HAL_RCC_OscConfig+0x278>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fd ff5b 	bl	80042e8 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006436:	f7fd ff57 	bl	80042e8 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e1b4      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006448:	4b2b      	ldr	r3, [pc, #172]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	4b28      	ldr	r3, [pc, #160]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4925      	ldr	r1, [pc, #148]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 8006464:	4313      	orrs	r3, r2
 8006466:	600b      	str	r3, [r1, #0]
 8006468:	e015      	b.n	8006496 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800646a:	4b24      	ldr	r3, [pc, #144]	@ (80064fc <HAL_RCC_OscConfig+0x278>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fd ff3a 	bl	80042e8 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006478:	f7fd ff36 	bl	80042e8 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e193      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d036      	beq.n	8006510 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064aa:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <HAL_RCC_OscConfig+0x27c>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fd ff1a 	bl	80042e8 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064b8:	f7fd ff16 	bl	80042e8 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e173      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ca:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <HAL_RCC_OscConfig+0x274>)
 80064cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0x234>
 80064d6:	e01b      	b.n	8006510 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d8:	4b09      	ldr	r3, [pc, #36]	@ (8006500 <HAL_RCC_OscConfig+0x27c>)
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064de:	f7fd ff03 	bl	80042e8 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e4:	e00e      	b.n	8006504 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fd feff 	bl	80042e8 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d907      	bls.n	8006504 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e15c      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
 80064f8:	40023800 	.word	0x40023800
 80064fc:	42470000 	.word	0x42470000
 8006500:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006504:	4b8a      	ldr	r3, [pc, #552]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1ea      	bne.n	80064e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8097 	beq.w	800664c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006522:	4b83      	ldr	r3, [pc, #524]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10f      	bne.n	800654e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	4b7f      	ldr	r3, [pc, #508]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006536:	4a7e      	ldr	r2, [pc, #504]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800653c:	6413      	str	r3, [r2, #64]	@ 0x40
 800653e:	4b7c      	ldr	r3, [pc, #496]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006546:	60bb      	str	r3, [r7, #8]
 8006548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800654a:	2301      	movs	r3, #1
 800654c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654e:	4b79      	ldr	r3, [pc, #484]	@ (8006734 <HAL_RCC_OscConfig+0x4b0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d118      	bne.n	800658c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800655a:	4b76      	ldr	r3, [pc, #472]	@ (8006734 <HAL_RCC_OscConfig+0x4b0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a75      	ldr	r2, [pc, #468]	@ (8006734 <HAL_RCC_OscConfig+0x4b0>)
 8006560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006566:	f7fd febf 	bl	80042e8 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656e:	f7fd febb 	bl	80042e8 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e118      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006580:	4b6c      	ldr	r3, [pc, #432]	@ (8006734 <HAL_RCC_OscConfig+0x4b0>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_OscConfig+0x31e>
 8006594:	4b66      	ldr	r3, [pc, #408]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006598:	4a65      	ldr	r2, [pc, #404]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	6713      	str	r3, [r2, #112]	@ 0x70
 80065a0:	e01c      	b.n	80065dc <HAL_RCC_OscConfig+0x358>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	d10c      	bne.n	80065c4 <HAL_RCC_OscConfig+0x340>
 80065aa:	4b61      	ldr	r3, [pc, #388]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ae:	4a60      	ldr	r2, [pc, #384]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80065b0:	f043 0304 	orr.w	r3, r3, #4
 80065b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80065b6:	4b5e      	ldr	r3, [pc, #376]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ba:	4a5d      	ldr	r2, [pc, #372]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c2:	e00b      	b.n	80065dc <HAL_RCC_OscConfig+0x358>
 80065c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c8:	4a59      	ldr	r2, [pc, #356]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d0:	4b57      	ldr	r3, [pc, #348]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d4:	4a56      	ldr	r2, [pc, #344]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80065d6:	f023 0304 	bic.w	r3, r3, #4
 80065da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d015      	beq.n	8006610 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e4:	f7fd fe80 	bl	80042e8 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ea:	e00a      	b.n	8006602 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ec:	f7fd fe7c 	bl	80042e8 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e0d7      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006602:	4b4b      	ldr	r3, [pc, #300]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0ee      	beq.n	80065ec <HAL_RCC_OscConfig+0x368>
 800660e:	e014      	b.n	800663a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006610:	f7fd fe6a 	bl	80042e8 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006616:	e00a      	b.n	800662e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006618:	f7fd fe66 	bl	80042e8 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e0c1      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800662e:	4b40      	ldr	r3, [pc, #256]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1ee      	bne.n	8006618 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d105      	bne.n	800664c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006640:	4b3b      	ldr	r3, [pc, #236]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	4a3a      	ldr	r2, [pc, #232]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800664a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80ad 	beq.w	80067b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006656:	4b36      	ldr	r3, [pc, #216]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 030c 	and.w	r3, r3, #12
 800665e:	2b08      	cmp	r3, #8
 8006660:	d060      	beq.n	8006724 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d145      	bne.n	80066f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666a:	4b33      	ldr	r3, [pc, #204]	@ (8006738 <HAL_RCC_OscConfig+0x4b4>)
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fd fe3a 	bl	80042e8 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006678:	f7fd fe36 	bl	80042e8 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e093      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800668a:	4b29      	ldr	r3, [pc, #164]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a4:	019b      	lsls	r3, r3, #6
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	3b01      	subs	r3, #1
 80066b0:	041b      	lsls	r3, r3, #16
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b8:	061b      	lsls	r3, r3, #24
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c0:	071b      	lsls	r3, r3, #28
 80066c2:	491b      	ldr	r1, [pc, #108]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006738 <HAL_RCC_OscConfig+0x4b4>)
 80066ca:	2201      	movs	r2, #1
 80066cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ce:	f7fd fe0b 	bl	80042e8 <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d6:	f7fd fe07 	bl	80042e8 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e064      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e8:	4b11      	ldr	r3, [pc, #68]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0f0      	beq.n	80066d6 <HAL_RCC_OscConfig+0x452>
 80066f4:	e05c      	b.n	80067b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f6:	4b10      	ldr	r3, [pc, #64]	@ (8006738 <HAL_RCC_OscConfig+0x4b4>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fc:	f7fd fdf4 	bl	80042e8 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006704:	f7fd fdf0 	bl	80042e8 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e04d      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006716:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <HAL_RCC_OscConfig+0x4ac>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f0      	bne.n	8006704 <HAL_RCC_OscConfig+0x480>
 8006722:	e045      	b.n	80067b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d107      	bne.n	800673c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e040      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
 8006730:	40023800 	.word	0x40023800
 8006734:	40007000 	.word	0x40007000
 8006738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800673c:	4b1f      	ldr	r3, [pc, #124]	@ (80067bc <HAL_RCC_OscConfig+0x538>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d030      	beq.n	80067ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d129      	bne.n	80067ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006762:	429a      	cmp	r2, r3
 8006764:	d122      	bne.n	80067ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800676c:	4013      	ands	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006774:	4293      	cmp	r3, r2
 8006776:	d119      	bne.n	80067ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	3b01      	subs	r3, #1
 8006786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006788:	429a      	cmp	r2, r3
 800678a:	d10f      	bne.n	80067ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006798:	429a      	cmp	r2, r3
 800679a:	d107      	bne.n	80067ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d001      	beq.n	80067b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40023800 	.word	0x40023800

080067c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e041      	b.n	8006856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f839 	bl	800685e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f000 f9c0 	bl	8006b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b01      	cmp	r3, #1
 8006886:	d001      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e04e      	b.n	800692a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a23      	ldr	r2, [pc, #140]	@ (8006938 <HAL_TIM_Base_Start_IT+0xc4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d022      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0x80>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b6:	d01d      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0x80>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1f      	ldr	r2, [pc, #124]	@ (800693c <HAL_TIM_Base_Start_IT+0xc8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d018      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0x80>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006940 <HAL_TIM_Base_Start_IT+0xcc>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d013      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0x80>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006944 <HAL_TIM_Base_Start_IT+0xd0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00e      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0x80>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a1b      	ldr	r2, [pc, #108]	@ (8006948 <HAL_TIM_Base_Start_IT+0xd4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d009      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0x80>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a19      	ldr	r2, [pc, #100]	@ (800694c <HAL_TIM_Base_Start_IT+0xd8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d004      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0x80>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a18      	ldr	r2, [pc, #96]	@ (8006950 <HAL_TIM_Base_Start_IT+0xdc>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d111      	bne.n	8006918 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b06      	cmp	r3, #6
 8006904:	d010      	beq.n	8006928 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0201 	orr.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006916:	e007      	b.n	8006928 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40010000 	.word	0x40010000
 800693c:	40000400 	.word	0x40000400
 8006940:	40000800 	.word	0x40000800
 8006944:	40000c00 	.word	0x40000c00
 8006948:	40010400 	.word	0x40010400
 800694c:	40014000 	.word	0x40014000
 8006950:	40001800 	.word	0x40001800

08006954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d020      	beq.n	80069b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01b      	beq.n	80069b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0202 	mvn.w	r2, #2
 8006988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8d2 	bl	8006b48 <HAL_TIM_IC_CaptureCallback>
 80069a4:	e005      	b.n	80069b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f8c4 	bl	8006b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f8d5 	bl	8006b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 0304 	and.w	r3, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d020      	beq.n	8006a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01b      	beq.n	8006a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0204 	mvn.w	r2, #4
 80069d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f8ac 	bl	8006b48 <HAL_TIM_IC_CaptureCallback>
 80069f0:	e005      	b.n	80069fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f89e 	bl	8006b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f8af 	bl	8006b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d020      	beq.n	8006a50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 0308 	and.w	r3, r3, #8
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01b      	beq.n	8006a50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0208 	mvn.w	r2, #8
 8006a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2204      	movs	r2, #4
 8006a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f886 	bl	8006b48 <HAL_TIM_IC_CaptureCallback>
 8006a3c:	e005      	b.n	8006a4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f878 	bl	8006b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f889 	bl	8006b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d020      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01b      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0210 	mvn.w	r2, #16
 8006a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2208      	movs	r2, #8
 8006a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f860 	bl	8006b48 <HAL_TIM_IC_CaptureCallback>
 8006a88:	e005      	b.n	8006a96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f852 	bl	8006b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f863 	bl	8006b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00c      	beq.n	8006ac0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0201 	mvn.w	r2, #1
 8006ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fd f8ee 	bl	8003c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d007      	beq.n	8006ae4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f900 	bl	8006ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00c      	beq.n	8006b08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d007      	beq.n	8006b08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f834 	bl	8006b70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00c      	beq.n	8006b2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d007      	beq.n	8006b2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0220 	mvn.w	r2, #32
 8006b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f8d2 	bl	8006cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a43      	ldr	r2, [pc, #268]	@ (8006ca4 <TIM_Base_SetConfig+0x120>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d013      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba2:	d00f      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a40      	ldr	r2, [pc, #256]	@ (8006ca8 <TIM_Base_SetConfig+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00b      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3f      	ldr	r2, [pc, #252]	@ (8006cac <TIM_Base_SetConfig+0x128>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d007      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8006cb0 <TIM_Base_SetConfig+0x12c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8006cb4 <TIM_Base_SetConfig+0x130>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d108      	bne.n	8006bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a32      	ldr	r2, [pc, #200]	@ (8006ca4 <TIM_Base_SetConfig+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d02b      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be4:	d027      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2f      	ldr	r2, [pc, #188]	@ (8006ca8 <TIM_Base_SetConfig+0x124>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d023      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8006cac <TIM_Base_SetConfig+0x128>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01f      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8006cb0 <TIM_Base_SetConfig+0x12c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01b      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2c      	ldr	r2, [pc, #176]	@ (8006cb4 <TIM_Base_SetConfig+0x130>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d017      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a2b      	ldr	r2, [pc, #172]	@ (8006cb8 <TIM_Base_SetConfig+0x134>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d013      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2a      	ldr	r2, [pc, #168]	@ (8006cbc <TIM_Base_SetConfig+0x138>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00f      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a29      	ldr	r2, [pc, #164]	@ (8006cc0 <TIM_Base_SetConfig+0x13c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00b      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a28      	ldr	r2, [pc, #160]	@ (8006cc4 <TIM_Base_SetConfig+0x140>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d007      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a27      	ldr	r2, [pc, #156]	@ (8006cc8 <TIM_Base_SetConfig+0x144>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d003      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a26      	ldr	r2, [pc, #152]	@ (8006ccc <TIM_Base_SetConfig+0x148>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d108      	bne.n	8006c48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a0e      	ldr	r2, [pc, #56]	@ (8006ca4 <TIM_Base_SetConfig+0x120>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_Base_SetConfig+0xf2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a10      	ldr	r2, [pc, #64]	@ (8006cb4 <TIM_Base_SetConfig+0x130>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d103      	bne.n	8006c7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	601a      	str	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40010400 	.word	0x40010400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800
 8006cc4:	40001800 	.word	0x40001800
 8006cc8:	40001c00 	.word	0x40001c00
 8006ccc:	40002000 	.word	0x40002000

08006cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e042      	b.n	8006d90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fd f9fe 	bl	8004120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2224      	movs	r2, #36	@ 0x24
 8006d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fd7f 	bl	8007840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08a      	sub	sp, #40	@ 0x28
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	d175      	bne.n	8006ea4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <HAL_UART_Transmit+0x2c>
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e06e      	b.n	8006ea6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2221      	movs	r2, #33	@ 0x21
 8006dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dd6:	f7fd fa87 	bl	80042e8 <HAL_GetTick>
 8006dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	88fa      	ldrh	r2, [r7, #6]
 8006de6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df0:	d108      	bne.n	8006e04 <HAL_UART_Transmit+0x6c>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d104      	bne.n	8006e04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	e003      	b.n	8006e0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e0c:	e02e      	b.n	8006e6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2200      	movs	r2, #0
 8006e16:	2180      	movs	r1, #128	@ 0x80
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fb1d 	bl	8007458 <UART_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e03a      	b.n	8006ea6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10b      	bne.n	8006e4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	3302      	adds	r3, #2
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	e007      	b.n	8006e5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1cb      	bne.n	8006e0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2140      	movs	r1, #64	@ 0x40
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fae9 	bl	8007458 <UART_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e006      	b.n	8006ea6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e000      	b.n	8006ea6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ea4:	2302      	movs	r3, #2
  }
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b0ba      	sub	sp, #232	@ 0xe8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10f      	bne.n	8006f16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <HAL_UART_IRQHandler+0x66>
 8006f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fbd7 	bl	80076c2 <UART_Receive_IT>
      return;
 8006f14:	e273      	b.n	80073fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80de 	beq.w	80070dc <HAL_UART_IRQHandler+0x22c>
 8006f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80d1 	beq.w	80070dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <HAL_UART_IRQHandler+0xae>
 8006f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f56:	f043 0201 	orr.w	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <HAL_UART_IRQHandler+0xd2>
 8006f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f7a:	f043 0202 	orr.w	r2, r3, #2
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xf6>
 8006f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9e:	f043 0204 	orr.w	r2, r3, #4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d011      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x126>
 8006fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d105      	bne.n	8006fca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fce:	f043 0208 	orr.w	r2, r3, #8
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 820a 	beq.w	80073f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <HAL_UART_IRQHandler+0x14e>
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fb62 	bl	80076c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007008:	2b40      	cmp	r3, #64	@ 0x40
 800700a:	bf0c      	ite	eq
 800700c:	2301      	moveq	r3, #1
 800700e:	2300      	movne	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701a:	f003 0308 	and.w	r3, r3, #8
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <HAL_UART_IRQHandler+0x17a>
 8007022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007026:	2b00      	cmp	r3, #0
 8007028:	d04f      	beq.n	80070ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa6d 	bl	800750a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703a:	2b40      	cmp	r3, #64	@ 0x40
 800703c:	d141      	bne.n	80070c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3314      	adds	r3, #20
 8007044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800704c:	e853 3f00 	ldrex	r3, [r3]
 8007050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800705c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3314      	adds	r3, #20
 8007066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800706a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800706e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1d9      	bne.n	800703e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d013      	beq.n	80070ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007096:	4a8a      	ldr	r2, [pc, #552]	@ (80072c0 <HAL_UART_IRQHandler+0x410>)
 8007098:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe f8c6 	bl	8005230 <HAL_DMA_Abort_IT>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d016      	beq.n	80070d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b8:	e00e      	b.n	80070d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f9b6 	bl	800742c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c0:	e00a      	b.n	80070d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f9b2 	bl	800742c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c8:	e006      	b.n	80070d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f9ae 	bl	800742c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070d6:	e18d      	b.n	80073f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d8:	bf00      	nop
    return;
 80070da:	e18b      	b.n	80073f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f040 8167 	bne.w	80073b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 8160 	beq.w	80073b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8159 	beq.w	80073b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007102:	2300      	movs	r3, #0
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007122:	2b40      	cmp	r3, #64	@ 0x40
 8007124:	f040 80ce 	bne.w	80072c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007134:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80a9 	beq.w	8007290 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007146:	429a      	cmp	r2, r3
 8007148:	f080 80a2 	bcs.w	8007290 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007152:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800715e:	f000 8088 	beq.w	8007272 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007178:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800717c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	330c      	adds	r3, #12
 800718a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800718e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007192:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800719a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1d9      	bne.n	8007162 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3314      	adds	r3, #20
 80071ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e1      	bne.n	80071ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3314      	adds	r3, #20
 80071f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3314      	adds	r3, #20
 800720a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800720e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007210:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007214:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800721c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e3      	bne.n	80071ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007242:	f023 0310 	bic.w	r3, r3, #16
 8007246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330c      	adds	r3, #12
 8007250:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007254:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007256:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800725a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e3      	bne.n	8007230 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726c:	4618      	mov	r0, r3
 800726e:	f7fd ff6f 	bl	8005150 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2202      	movs	r2, #2
 8007276:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007280:	b29b      	uxth	r3, r3
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	b29b      	uxth	r3, r3
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f8d9 	bl	8007440 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800728e:	e0b3      	b.n	80073f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007294:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007298:	429a      	cmp	r2, r3
 800729a:	f040 80ad 	bne.w	80073f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a8:	f040 80a6 	bne.w	80073f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f8c1 	bl	8007440 <HAL_UARTEx_RxEventCallback>
      return;
 80072be:	e09b      	b.n	80073f8 <HAL_UART_IRQHandler+0x548>
 80072c0:	080075d1 	.word	0x080075d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 808e 	beq.w	80073fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80072e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8089 	beq.w	80073fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	330c      	adds	r3, #12
 80072f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007300:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	330c      	adds	r3, #12
 800730a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800730e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007310:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800731c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e3      	bne.n	80072ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3314      	adds	r3, #20
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	623b      	str	r3, [r7, #32]
   return(result);
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3314      	adds	r3, #20
 8007342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007346:	633a      	str	r2, [r7, #48]	@ 0x30
 8007348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800734c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e3      	bne.n	8007322 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	330c      	adds	r3, #12
 800736e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	60fb      	str	r3, [r7, #12]
   return(result);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0310 	bic.w	r3, r3, #16
 800737e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	330c      	adds	r3, #12
 8007388:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800738c:	61fa      	str	r2, [r7, #28]
 800738e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	69b9      	ldr	r1, [r7, #24]
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	617b      	str	r3, [r7, #20]
   return(result);
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e3      	bne.n	8007368 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f847 	bl	8007440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073b2:	e023      	b.n	80073fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <HAL_UART_IRQHandler+0x524>
 80073c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f910 	bl	80075f2 <UART_Transmit_IT>
    return;
 80073d2:	e014      	b.n	80073fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00e      	beq.n	80073fe <HAL_UART_IRQHandler+0x54e>
 80073e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d008      	beq.n	80073fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f950 	bl	8007692 <UART_EndTransmit_IT>
    return;
 80073f2:	e004      	b.n	80073fe <HAL_UART_IRQHandler+0x54e>
    return;
 80073f4:	bf00      	nop
 80073f6:	e002      	b.n	80073fe <HAL_UART_IRQHandler+0x54e>
      return;
 80073f8:	bf00      	nop
 80073fa:	e000      	b.n	80073fe <HAL_UART_IRQHandler+0x54e>
      return;
 80073fc:	bf00      	nop
  }
}
 80073fe:	37e8      	adds	r7, #232	@ 0xe8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	4613      	mov	r3, r2
 8007466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007468:	e03b      	b.n	80074e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d037      	beq.n	80074e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007472:	f7fc ff39 	bl	80042e8 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	6a3a      	ldr	r2, [r7, #32]
 800747e:	429a      	cmp	r2, r3
 8007480:	d302      	bcc.n	8007488 <UART_WaitOnFlagUntilTimeout+0x30>
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e03a      	b.n	8007502 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d023      	beq.n	80074e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b80      	cmp	r3, #128	@ 0x80
 800749e:	d020      	beq.n	80074e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b40      	cmp	r3, #64	@ 0x40
 80074a4:	d01d      	beq.n	80074e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d116      	bne.n	80074e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f81d 	bl	800750a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2208      	movs	r2, #8
 80074d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e00f      	b.n	8007502 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4013      	ands	r3, r2
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	bf0c      	ite	eq
 80074f2:	2301      	moveq	r3, #1
 80074f4:	2300      	movne	r3, #0
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	461a      	mov	r2, r3
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d0b4      	beq.n	800746a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800750a:	b480      	push	{r7}
 800750c:	b095      	sub	sp, #84	@ 0x54
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	330c      	adds	r3, #12
 8007530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007532:	643a      	str	r2, [r7, #64]	@ 0x40
 8007534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e5      	bne.n	8007512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3314      	adds	r3, #20
 800754c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	61fb      	str	r3, [r7, #28]
   return(result);
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3314      	adds	r3, #20
 8007564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007568:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800756c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e5      	bne.n	8007546 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757e:	2b01      	cmp	r3, #1
 8007580:	d119      	bne.n	80075b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	60bb      	str	r3, [r7, #8]
   return(result);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f023 0310 	bic.w	r3, r3, #16
 8007598:	647b      	str	r3, [r7, #68]	@ 0x44
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075a2:	61ba      	str	r2, [r7, #24]
 80075a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6979      	ldr	r1, [r7, #20]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	613b      	str	r3, [r7, #16]
   return(result);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e5      	bne.n	8007582 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80075c4:	bf00      	nop
 80075c6:	3754      	adds	r7, #84	@ 0x54
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f7ff ff21 	bl	800742c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b21      	cmp	r3, #33	@ 0x21
 8007604:	d13e      	bne.n	8007684 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800760e:	d114      	bne.n	800763a <UART_Transmit_IT+0x48>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d110      	bne.n	800763a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800762c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	1c9a      	adds	r2, r3, #2
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	621a      	str	r2, [r3, #32]
 8007638:	e008      	b.n	800764c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	1c59      	adds	r1, r3, #1
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6211      	str	r1, [r2, #32]
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29b      	uxth	r3, r3
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4619      	mov	r1, r3
 800765a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10f      	bne.n	8007680 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800766e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800767e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	e000      	b.n	8007686 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007684:	2302      	movs	r3, #2
  }
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff fea6 	bl	8007404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b08c      	sub	sp, #48	@ 0x30
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b22      	cmp	r3, #34	@ 0x22
 80076dc:	f040 80aa 	bne.w	8007834 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e8:	d115      	bne.n	8007716 <UART_Receive_IT+0x54>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d111      	bne.n	8007716 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007704:	b29a      	uxth	r2, r3
 8007706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007708:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770e:	1c9a      	adds	r2, r3, #2
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	629a      	str	r2, [r3, #40]	@ 0x28
 8007714:	e024      	b.n	8007760 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007724:	d007      	beq.n	8007736 <UART_Receive_IT+0x74>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10a      	bne.n	8007744 <UART_Receive_IT+0x82>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	b2da      	uxtb	r2, r3
 800773e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	e008      	b.n	8007756 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007750:	b2da      	uxtb	r2, r3
 8007752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007754:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29b      	uxth	r3, r3
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	4619      	mov	r1, r3
 800776e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007770:	2b00      	cmp	r3, #0
 8007772:	d15d      	bne.n	8007830 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0220 	bic.w	r2, r2, #32
 8007782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695a      	ldr	r2, [r3, #20]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0201 	bic.w	r2, r2, #1
 80077a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d135      	bne.n	8007826 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	e853 3f00 	ldrex	r3, [r3]
 80077ce:	613b      	str	r3, [r7, #16]
   return(result);
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f023 0310 	bic.w	r3, r3, #16
 80077d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e0:	623a      	str	r2, [r7, #32]
 80077e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	69f9      	ldr	r1, [r7, #28]
 80077e6:	6a3a      	ldr	r2, [r7, #32]
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e5      	bne.n	80077c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0310 	and.w	r3, r3, #16
 80077fe:	2b10      	cmp	r3, #16
 8007800:	d10a      	bne.n	8007818 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff fe0e 	bl	8007440 <HAL_UARTEx_RxEventCallback>
 8007824:	e002      	b.n	800782c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fdf6 	bl	8007418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	e002      	b.n	8007836 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	e000      	b.n	8007836 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007834:	2302      	movs	r3, #2
  }
}
 8007836:	4618      	mov	r0, r3
 8007838:	3730      	adds	r7, #48	@ 0x30
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007844:	b0c0      	sub	sp, #256	@ 0x100
 8007846:	af00      	add	r7, sp, #0
 8007848:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800784c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785c:	68d9      	ldr	r1, [r3, #12]
 800785e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	ea40 0301 	orr.w	r3, r0, r1
 8007868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800786a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	431a      	orrs	r2, r3
 8007878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	431a      	orrs	r2, r3
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007898:	f021 010c 	bic.w	r1, r1, #12
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078a6:	430b      	orrs	r3, r1
 80078a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ba:	6999      	ldr	r1, [r3, #24]
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	ea40 0301 	orr.w	r3, r0, r1
 80078c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4b8f      	ldr	r3, [pc, #572]	@ (8007b0c <UART_SetConfig+0x2cc>)
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d005      	beq.n	80078e0 <UART_SetConfig+0xa0>
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	4b8d      	ldr	r3, [pc, #564]	@ (8007b10 <UART_SetConfig+0x2d0>)
 80078dc:	429a      	cmp	r2, r3
 80078de:	d104      	bne.n	80078ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078e0:	f7fe fa5a 	bl	8005d98 <HAL_RCC_GetPCLK2Freq>
 80078e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078e8:	e003      	b.n	80078f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078ea:	f7fe fa41 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80078ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078fc:	f040 810c 	bne.w	8007b18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007904:	2200      	movs	r2, #0
 8007906:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800790a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800790e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007912:	4622      	mov	r2, r4
 8007914:	462b      	mov	r3, r5
 8007916:	1891      	adds	r1, r2, r2
 8007918:	65b9      	str	r1, [r7, #88]	@ 0x58
 800791a:	415b      	adcs	r3, r3
 800791c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800791e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007922:	4621      	mov	r1, r4
 8007924:	eb12 0801 	adds.w	r8, r2, r1
 8007928:	4629      	mov	r1, r5
 800792a:	eb43 0901 	adc.w	r9, r3, r1
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	f04f 0300 	mov.w	r3, #0
 8007936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800793a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800793e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007942:	4690      	mov	r8, r2
 8007944:	4699      	mov	r9, r3
 8007946:	4623      	mov	r3, r4
 8007948:	eb18 0303 	adds.w	r3, r8, r3
 800794c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007950:	462b      	mov	r3, r5
 8007952:	eb49 0303 	adc.w	r3, r9, r3
 8007956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800795a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007966:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800796a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800796e:	460b      	mov	r3, r1
 8007970:	18db      	adds	r3, r3, r3
 8007972:	653b      	str	r3, [r7, #80]	@ 0x50
 8007974:	4613      	mov	r3, r2
 8007976:	eb42 0303 	adc.w	r3, r2, r3
 800797a:	657b      	str	r3, [r7, #84]	@ 0x54
 800797c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007984:	f7f9 f9a0 	bl	8000cc8 <__aeabi_uldivmod>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4b61      	ldr	r3, [pc, #388]	@ (8007b14 <UART_SetConfig+0x2d4>)
 800798e:	fba3 2302 	umull	r2, r3, r3, r2
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	011c      	lsls	r4, r3, #4
 8007996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799a:	2200      	movs	r2, #0
 800799c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079a8:	4642      	mov	r2, r8
 80079aa:	464b      	mov	r3, r9
 80079ac:	1891      	adds	r1, r2, r2
 80079ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80079b0:	415b      	adcs	r3, r3
 80079b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079b8:	4641      	mov	r1, r8
 80079ba:	eb12 0a01 	adds.w	sl, r2, r1
 80079be:	4649      	mov	r1, r9
 80079c0:	eb43 0b01 	adc.w	fp, r3, r1
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079d8:	4692      	mov	sl, r2
 80079da:	469b      	mov	fp, r3
 80079dc:	4643      	mov	r3, r8
 80079de:	eb1a 0303 	adds.w	r3, sl, r3
 80079e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079e6:	464b      	mov	r3, r9
 80079e8:	eb4b 0303 	adc.w	r3, fp, r3
 80079ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a04:	460b      	mov	r3, r1
 8007a06:	18db      	adds	r3, r3, r3
 8007a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	eb42 0303 	adc.w	r3, r2, r3
 8007a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a1a:	f7f9 f955 	bl	8000cc8 <__aeabi_uldivmod>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4611      	mov	r1, r2
 8007a24:	4b3b      	ldr	r3, [pc, #236]	@ (8007b14 <UART_SetConfig+0x2d4>)
 8007a26:	fba3 2301 	umull	r2, r3, r3, r1
 8007a2a:	095b      	lsrs	r3, r3, #5
 8007a2c:	2264      	movs	r2, #100	@ 0x64
 8007a2e:	fb02 f303 	mul.w	r3, r2, r3
 8007a32:	1acb      	subs	r3, r1, r3
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a3a:	4b36      	ldr	r3, [pc, #216]	@ (8007b14 <UART_SetConfig+0x2d4>)
 8007a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a48:	441c      	add	r4, r3
 8007a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	464b      	mov	r3, r9
 8007a60:	1891      	adds	r1, r2, r2
 8007a62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a64:	415b      	adcs	r3, r3
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a6c:	4641      	mov	r1, r8
 8007a6e:	1851      	adds	r1, r2, r1
 8007a70:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a72:	4649      	mov	r1, r9
 8007a74:	414b      	adcs	r3, r1
 8007a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a84:	4659      	mov	r1, fp
 8007a86:	00cb      	lsls	r3, r1, #3
 8007a88:	4651      	mov	r1, sl
 8007a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a8e:	4651      	mov	r1, sl
 8007a90:	00ca      	lsls	r2, r1, #3
 8007a92:	4610      	mov	r0, r2
 8007a94:	4619      	mov	r1, r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	4642      	mov	r2, r8
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	460a      	mov	r2, r1
 8007aa4:	eb42 0303 	adc.w	r3, r2, r3
 8007aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	18db      	adds	r3, r3, r3
 8007ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	eb42 0303 	adc.w	r3, r2, r3
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ad6:	f7f9 f8f7 	bl	8000cc8 <__aeabi_uldivmod>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <UART_SetConfig+0x2d4>)
 8007ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	2164      	movs	r1, #100	@ 0x64
 8007ae8:	fb01 f303 	mul.w	r3, r1, r3
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	3332      	adds	r3, #50	@ 0x32
 8007af2:	4a08      	ldr	r2, [pc, #32]	@ (8007b14 <UART_SetConfig+0x2d4>)
 8007af4:	fba2 2303 	umull	r2, r3, r2, r3
 8007af8:	095b      	lsrs	r3, r3, #5
 8007afa:	f003 0207 	and.w	r2, r3, #7
 8007afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4422      	add	r2, r4
 8007b06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b08:	e106      	b.n	8007d18 <UART_SetConfig+0x4d8>
 8007b0a:	bf00      	nop
 8007b0c:	40011000 	.word	0x40011000
 8007b10:	40011400 	.word	0x40011400
 8007b14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b2a:	4642      	mov	r2, r8
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	1891      	adds	r1, r2, r2
 8007b30:	6239      	str	r1, [r7, #32]
 8007b32:	415b      	adcs	r3, r3
 8007b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	1854      	adds	r4, r2, r1
 8007b3e:	4649      	mov	r1, r9
 8007b40:	eb43 0501 	adc.w	r5, r3, r1
 8007b44:	f04f 0200 	mov.w	r2, #0
 8007b48:	f04f 0300 	mov.w	r3, #0
 8007b4c:	00eb      	lsls	r3, r5, #3
 8007b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b52:	00e2      	lsls	r2, r4, #3
 8007b54:	4614      	mov	r4, r2
 8007b56:	461d      	mov	r5, r3
 8007b58:	4643      	mov	r3, r8
 8007b5a:	18e3      	adds	r3, r4, r3
 8007b5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b60:	464b      	mov	r3, r9
 8007b62:	eb45 0303 	adc.w	r3, r5, r3
 8007b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b86:	4629      	mov	r1, r5
 8007b88:	008b      	lsls	r3, r1, #2
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b90:	4621      	mov	r1, r4
 8007b92:	008a      	lsls	r2, r1, #2
 8007b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b98:	f7f9 f896 	bl	8000cc8 <__aeabi_uldivmod>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4b60      	ldr	r3, [pc, #384]	@ (8007d24 <UART_SetConfig+0x4e4>)
 8007ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	011c      	lsls	r4, r3, #4
 8007baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007bb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	1891      	adds	r1, r2, r2
 8007bc2:	61b9      	str	r1, [r7, #24]
 8007bc4:	415b      	adcs	r3, r3
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bcc:	4641      	mov	r1, r8
 8007bce:	1851      	adds	r1, r2, r1
 8007bd0:	6139      	str	r1, [r7, #16]
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	414b      	adcs	r3, r1
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007be4:	4659      	mov	r1, fp
 8007be6:	00cb      	lsls	r3, r1, #3
 8007be8:	4651      	mov	r1, sl
 8007bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bee:	4651      	mov	r1, sl
 8007bf0:	00ca      	lsls	r2, r1, #3
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	189b      	adds	r3, r3, r2
 8007bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c00:	464b      	mov	r3, r9
 8007c02:	460a      	mov	r2, r1
 8007c04:	eb42 0303 	adc.w	r3, r2, r3
 8007c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c18:	f04f 0200 	mov.w	r2, #0
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c24:	4649      	mov	r1, r9
 8007c26:	008b      	lsls	r3, r1, #2
 8007c28:	4641      	mov	r1, r8
 8007c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c2e:	4641      	mov	r1, r8
 8007c30:	008a      	lsls	r2, r1, #2
 8007c32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c36:	f7f9 f847 	bl	8000cc8 <__aeabi_uldivmod>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4b38      	ldr	r3, [pc, #224]	@ (8007d24 <UART_SetConfig+0x4e4>)
 8007c42:	fba3 2301 	umull	r2, r3, r3, r1
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	2264      	movs	r2, #100	@ 0x64
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
 8007c4e:	1acb      	subs	r3, r1, r3
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	3332      	adds	r3, #50	@ 0x32
 8007c54:	4a33      	ldr	r2, [pc, #204]	@ (8007d24 <UART_SetConfig+0x4e4>)
 8007c56:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c60:	441c      	add	r4, r3
 8007c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c66:	2200      	movs	r2, #0
 8007c68:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c70:	4642      	mov	r2, r8
 8007c72:	464b      	mov	r3, r9
 8007c74:	1891      	adds	r1, r2, r2
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	415b      	adcs	r3, r3
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c80:	4641      	mov	r1, r8
 8007c82:	1851      	adds	r1, r2, r1
 8007c84:	6039      	str	r1, [r7, #0]
 8007c86:	4649      	mov	r1, r9
 8007c88:	414b      	adcs	r3, r1
 8007c8a:	607b      	str	r3, [r7, #4]
 8007c8c:	f04f 0200 	mov.w	r2, #0
 8007c90:	f04f 0300 	mov.w	r3, #0
 8007c94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c98:	4659      	mov	r1, fp
 8007c9a:	00cb      	lsls	r3, r1, #3
 8007c9c:	4651      	mov	r1, sl
 8007c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ca2:	4651      	mov	r1, sl
 8007ca4:	00ca      	lsls	r2, r1, #3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	4642      	mov	r2, r8
 8007cae:	189b      	adds	r3, r3, r2
 8007cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	460a      	mov	r2, r1
 8007cb6:	eb42 0303 	adc.w	r3, r2, r3
 8007cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007cc8:	f04f 0200 	mov.w	r2, #0
 8007ccc:	f04f 0300 	mov.w	r3, #0
 8007cd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	008b      	lsls	r3, r1, #2
 8007cd8:	4641      	mov	r1, r8
 8007cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cde:	4641      	mov	r1, r8
 8007ce0:	008a      	lsls	r2, r1, #2
 8007ce2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007ce6:	f7f8 ffef 	bl	8000cc8 <__aeabi_uldivmod>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4b0d      	ldr	r3, [pc, #52]	@ (8007d24 <UART_SetConfig+0x4e4>)
 8007cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	2164      	movs	r1, #100	@ 0x64
 8007cf8:	fb01 f303 	mul.w	r3, r1, r3
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	3332      	adds	r3, #50	@ 0x32
 8007d02:	4a08      	ldr	r2, [pc, #32]	@ (8007d24 <UART_SetConfig+0x4e4>)
 8007d04:	fba2 2303 	umull	r2, r3, r2, r3
 8007d08:	095b      	lsrs	r3, r3, #5
 8007d0a:	f003 020f 	and.w	r2, r3, #15
 8007d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4422      	add	r2, r4
 8007d16:	609a      	str	r2, [r3, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d24:	51eb851f 	.word	0x51eb851f

08007d28 <__cvt>:
 8007d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	ec57 6b10 	vmov	r6, r7, d0
 8007d30:	2f00      	cmp	r7, #0
 8007d32:	460c      	mov	r4, r1
 8007d34:	4619      	mov	r1, r3
 8007d36:	463b      	mov	r3, r7
 8007d38:	bfbb      	ittet	lt
 8007d3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d3e:	461f      	movlt	r7, r3
 8007d40:	2300      	movge	r3, #0
 8007d42:	232d      	movlt	r3, #45	@ 0x2d
 8007d44:	700b      	strb	r3, [r1, #0]
 8007d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007d4c:	4691      	mov	r9, r2
 8007d4e:	f023 0820 	bic.w	r8, r3, #32
 8007d52:	bfbc      	itt	lt
 8007d54:	4632      	movlt	r2, r6
 8007d56:	4616      	movlt	r6, r2
 8007d58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d5c:	d005      	beq.n	8007d6a <__cvt+0x42>
 8007d5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d62:	d100      	bne.n	8007d66 <__cvt+0x3e>
 8007d64:	3401      	adds	r4, #1
 8007d66:	2102      	movs	r1, #2
 8007d68:	e000      	b.n	8007d6c <__cvt+0x44>
 8007d6a:	2103      	movs	r1, #3
 8007d6c:	ab03      	add	r3, sp, #12
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	ab02      	add	r3, sp, #8
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	ec47 6b10 	vmov	d0, r6, r7
 8007d78:	4653      	mov	r3, sl
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	f001 f8c0 	bl	8008f00 <_dtoa_r>
 8007d80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007d84:	4605      	mov	r5, r0
 8007d86:	d119      	bne.n	8007dbc <__cvt+0x94>
 8007d88:	f019 0f01 	tst.w	r9, #1
 8007d8c:	d00e      	beq.n	8007dac <__cvt+0x84>
 8007d8e:	eb00 0904 	add.w	r9, r0, r4
 8007d92:	2200      	movs	r2, #0
 8007d94:	2300      	movs	r3, #0
 8007d96:	4630      	mov	r0, r6
 8007d98:	4639      	mov	r1, r7
 8007d9a:	f7f8 feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8007d9e:	b108      	cbz	r0, 8007da4 <__cvt+0x7c>
 8007da0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007da4:	2230      	movs	r2, #48	@ 0x30
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	454b      	cmp	r3, r9
 8007daa:	d31e      	bcc.n	8007dea <__cvt+0xc2>
 8007dac:	9b03      	ldr	r3, [sp, #12]
 8007dae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007db0:	1b5b      	subs	r3, r3, r5
 8007db2:	4628      	mov	r0, r5
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	b004      	add	sp, #16
 8007db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007dc0:	eb00 0904 	add.w	r9, r0, r4
 8007dc4:	d1e5      	bne.n	8007d92 <__cvt+0x6a>
 8007dc6:	7803      	ldrb	r3, [r0, #0]
 8007dc8:	2b30      	cmp	r3, #48	@ 0x30
 8007dca:	d10a      	bne.n	8007de2 <__cvt+0xba>
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2300      	movs	r3, #0
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	f7f8 fe98 	bl	8000b08 <__aeabi_dcmpeq>
 8007dd8:	b918      	cbnz	r0, 8007de2 <__cvt+0xba>
 8007dda:	f1c4 0401 	rsb	r4, r4, #1
 8007dde:	f8ca 4000 	str.w	r4, [sl]
 8007de2:	f8da 3000 	ldr.w	r3, [sl]
 8007de6:	4499      	add	r9, r3
 8007de8:	e7d3      	b.n	8007d92 <__cvt+0x6a>
 8007dea:	1c59      	adds	r1, r3, #1
 8007dec:	9103      	str	r1, [sp, #12]
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	e7d9      	b.n	8007da6 <__cvt+0x7e>

08007df2 <__exponent>:
 8007df2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007df4:	2900      	cmp	r1, #0
 8007df6:	bfba      	itte	lt
 8007df8:	4249      	neglt	r1, r1
 8007dfa:	232d      	movlt	r3, #45	@ 0x2d
 8007dfc:	232b      	movge	r3, #43	@ 0x2b
 8007dfe:	2909      	cmp	r1, #9
 8007e00:	7002      	strb	r2, [r0, #0]
 8007e02:	7043      	strb	r3, [r0, #1]
 8007e04:	dd29      	ble.n	8007e5a <__exponent+0x68>
 8007e06:	f10d 0307 	add.w	r3, sp, #7
 8007e0a:	461d      	mov	r5, r3
 8007e0c:	270a      	movs	r7, #10
 8007e0e:	461a      	mov	r2, r3
 8007e10:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e14:	fb07 1416 	mls	r4, r7, r6, r1
 8007e18:	3430      	adds	r4, #48	@ 0x30
 8007e1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e1e:	460c      	mov	r4, r1
 8007e20:	2c63      	cmp	r4, #99	@ 0x63
 8007e22:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e26:	4631      	mov	r1, r6
 8007e28:	dcf1      	bgt.n	8007e0e <__exponent+0x1c>
 8007e2a:	3130      	adds	r1, #48	@ 0x30
 8007e2c:	1e94      	subs	r4, r2, #2
 8007e2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e32:	1c41      	adds	r1, r0, #1
 8007e34:	4623      	mov	r3, r4
 8007e36:	42ab      	cmp	r3, r5
 8007e38:	d30a      	bcc.n	8007e50 <__exponent+0x5e>
 8007e3a:	f10d 0309 	add.w	r3, sp, #9
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	42ac      	cmp	r4, r5
 8007e42:	bf88      	it	hi
 8007e44:	2300      	movhi	r3, #0
 8007e46:	3302      	adds	r3, #2
 8007e48:	4403      	add	r3, r0
 8007e4a:	1a18      	subs	r0, r3, r0
 8007e4c:	b003      	add	sp, #12
 8007e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e58:	e7ed      	b.n	8007e36 <__exponent+0x44>
 8007e5a:	2330      	movs	r3, #48	@ 0x30
 8007e5c:	3130      	adds	r1, #48	@ 0x30
 8007e5e:	7083      	strb	r3, [r0, #2]
 8007e60:	70c1      	strb	r1, [r0, #3]
 8007e62:	1d03      	adds	r3, r0, #4
 8007e64:	e7f1      	b.n	8007e4a <__exponent+0x58>
	...

08007e68 <_printf_float>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	b08d      	sub	sp, #52	@ 0x34
 8007e6e:	460c      	mov	r4, r1
 8007e70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e74:	4616      	mov	r6, r2
 8007e76:	461f      	mov	r7, r3
 8007e78:	4605      	mov	r5, r0
 8007e7a:	f000 ff2b 	bl	8008cd4 <_localeconv_r>
 8007e7e:	6803      	ldr	r3, [r0, #0]
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7f8 fa14 	bl	80002b0 <strlen>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e90:	9005      	str	r0, [sp, #20]
 8007e92:	3307      	adds	r3, #7
 8007e94:	f023 0307 	bic.w	r3, r3, #7
 8007e98:	f103 0208 	add.w	r2, r3, #8
 8007e9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ea0:	f8d4 b000 	ldr.w	fp, [r4]
 8007ea4:	f8c8 2000 	str.w	r2, [r8]
 8007ea8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007eb0:	9307      	str	r3, [sp, #28]
 8007eb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007eb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007eba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ebe:	4b9c      	ldr	r3, [pc, #624]	@ (8008130 <_printf_float+0x2c8>)
 8007ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec4:	f7f8 fe52 	bl	8000b6c <__aeabi_dcmpun>
 8007ec8:	bb70      	cbnz	r0, 8007f28 <_printf_float+0xc0>
 8007eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ece:	4b98      	ldr	r3, [pc, #608]	@ (8008130 <_printf_float+0x2c8>)
 8007ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed4:	f7f8 fe2c 	bl	8000b30 <__aeabi_dcmple>
 8007ed8:	bb30      	cbnz	r0, 8007f28 <_printf_float+0xc0>
 8007eda:	2200      	movs	r2, #0
 8007edc:	2300      	movs	r3, #0
 8007ede:	4640      	mov	r0, r8
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	f7f8 fe1b 	bl	8000b1c <__aeabi_dcmplt>
 8007ee6:	b110      	cbz	r0, 8007eee <_printf_float+0x86>
 8007ee8:	232d      	movs	r3, #45	@ 0x2d
 8007eea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eee:	4a91      	ldr	r2, [pc, #580]	@ (8008134 <_printf_float+0x2cc>)
 8007ef0:	4b91      	ldr	r3, [pc, #580]	@ (8008138 <_printf_float+0x2d0>)
 8007ef2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ef6:	bf8c      	ite	hi
 8007ef8:	4690      	movhi	r8, r2
 8007efa:	4698      	movls	r8, r3
 8007efc:	2303      	movs	r3, #3
 8007efe:	6123      	str	r3, [r4, #16]
 8007f00:	f02b 0304 	bic.w	r3, fp, #4
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	f04f 0900 	mov.w	r9, #0
 8007f0a:	9700      	str	r7, [sp, #0]
 8007f0c:	4633      	mov	r3, r6
 8007f0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f10:	4621      	mov	r1, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	f000 f9d2 	bl	80082bc <_printf_common>
 8007f18:	3001      	adds	r0, #1
 8007f1a:	f040 808d 	bne.w	8008038 <_printf_float+0x1d0>
 8007f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f22:	b00d      	add	sp, #52	@ 0x34
 8007f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f28:	4642      	mov	r2, r8
 8007f2a:	464b      	mov	r3, r9
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	f7f8 fe1c 	bl	8000b6c <__aeabi_dcmpun>
 8007f34:	b140      	cbz	r0, 8007f48 <_printf_float+0xe0>
 8007f36:	464b      	mov	r3, r9
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	bfbc      	itt	lt
 8007f3c:	232d      	movlt	r3, #45	@ 0x2d
 8007f3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f42:	4a7e      	ldr	r2, [pc, #504]	@ (800813c <_printf_float+0x2d4>)
 8007f44:	4b7e      	ldr	r3, [pc, #504]	@ (8008140 <_printf_float+0x2d8>)
 8007f46:	e7d4      	b.n	8007ef2 <_printf_float+0x8a>
 8007f48:	6863      	ldr	r3, [r4, #4]
 8007f4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007f4e:	9206      	str	r2, [sp, #24]
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	d13b      	bne.n	8007fcc <_printf_float+0x164>
 8007f54:	2306      	movs	r3, #6
 8007f56:	6063      	str	r3, [r4, #4]
 8007f58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6022      	str	r2, [r4, #0]
 8007f60:	9303      	str	r3, [sp, #12]
 8007f62:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007f68:	ab09      	add	r3, sp, #36	@ 0x24
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	6861      	ldr	r1, [r4, #4]
 8007f6e:	ec49 8b10 	vmov	d0, r8, r9
 8007f72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007f76:	4628      	mov	r0, r5
 8007f78:	f7ff fed6 	bl	8007d28 <__cvt>
 8007f7c:	9b06      	ldr	r3, [sp, #24]
 8007f7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f80:	2b47      	cmp	r3, #71	@ 0x47
 8007f82:	4680      	mov	r8, r0
 8007f84:	d129      	bne.n	8007fda <_printf_float+0x172>
 8007f86:	1cc8      	adds	r0, r1, #3
 8007f88:	db02      	blt.n	8007f90 <_printf_float+0x128>
 8007f8a:	6863      	ldr	r3, [r4, #4]
 8007f8c:	4299      	cmp	r1, r3
 8007f8e:	dd41      	ble.n	8008014 <_printf_float+0x1ac>
 8007f90:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f94:	fa5f fa8a 	uxtb.w	sl, sl
 8007f98:	3901      	subs	r1, #1
 8007f9a:	4652      	mov	r2, sl
 8007f9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007fa0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fa2:	f7ff ff26 	bl	8007df2 <__exponent>
 8007fa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fa8:	1813      	adds	r3, r2, r0
 8007faa:	2a01      	cmp	r2, #1
 8007fac:	4681      	mov	r9, r0
 8007fae:	6123      	str	r3, [r4, #16]
 8007fb0:	dc02      	bgt.n	8007fb8 <_printf_float+0x150>
 8007fb2:	6822      	ldr	r2, [r4, #0]
 8007fb4:	07d2      	lsls	r2, r2, #31
 8007fb6:	d501      	bpl.n	8007fbc <_printf_float+0x154>
 8007fb8:	3301      	adds	r3, #1
 8007fba:	6123      	str	r3, [r4, #16]
 8007fbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0a2      	beq.n	8007f0a <_printf_float+0xa2>
 8007fc4:	232d      	movs	r3, #45	@ 0x2d
 8007fc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fca:	e79e      	b.n	8007f0a <_printf_float+0xa2>
 8007fcc:	9a06      	ldr	r2, [sp, #24]
 8007fce:	2a47      	cmp	r2, #71	@ 0x47
 8007fd0:	d1c2      	bne.n	8007f58 <_printf_float+0xf0>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1c0      	bne.n	8007f58 <_printf_float+0xf0>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e7bd      	b.n	8007f56 <_printf_float+0xee>
 8007fda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007fde:	d9db      	bls.n	8007f98 <_printf_float+0x130>
 8007fe0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007fe4:	d118      	bne.n	8008018 <_printf_float+0x1b0>
 8007fe6:	2900      	cmp	r1, #0
 8007fe8:	6863      	ldr	r3, [r4, #4]
 8007fea:	dd0b      	ble.n	8008004 <_printf_float+0x19c>
 8007fec:	6121      	str	r1, [r4, #16]
 8007fee:	b913      	cbnz	r3, 8007ff6 <_printf_float+0x18e>
 8007ff0:	6822      	ldr	r2, [r4, #0]
 8007ff2:	07d0      	lsls	r0, r2, #31
 8007ff4:	d502      	bpl.n	8007ffc <_printf_float+0x194>
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	440b      	add	r3, r1
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ffe:	f04f 0900 	mov.w	r9, #0
 8008002:	e7db      	b.n	8007fbc <_printf_float+0x154>
 8008004:	b913      	cbnz	r3, 800800c <_printf_float+0x1a4>
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	07d2      	lsls	r2, r2, #31
 800800a:	d501      	bpl.n	8008010 <_printf_float+0x1a8>
 800800c:	3302      	adds	r3, #2
 800800e:	e7f4      	b.n	8007ffa <_printf_float+0x192>
 8008010:	2301      	movs	r3, #1
 8008012:	e7f2      	b.n	8007ffa <_printf_float+0x192>
 8008014:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800801a:	4299      	cmp	r1, r3
 800801c:	db05      	blt.n	800802a <_printf_float+0x1c2>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	6121      	str	r1, [r4, #16]
 8008022:	07d8      	lsls	r0, r3, #31
 8008024:	d5ea      	bpl.n	8007ffc <_printf_float+0x194>
 8008026:	1c4b      	adds	r3, r1, #1
 8008028:	e7e7      	b.n	8007ffa <_printf_float+0x192>
 800802a:	2900      	cmp	r1, #0
 800802c:	bfd4      	ite	le
 800802e:	f1c1 0202 	rsble	r2, r1, #2
 8008032:	2201      	movgt	r2, #1
 8008034:	4413      	add	r3, r2
 8008036:	e7e0      	b.n	8007ffa <_printf_float+0x192>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	055a      	lsls	r2, r3, #21
 800803c:	d407      	bmi.n	800804e <_printf_float+0x1e6>
 800803e:	6923      	ldr	r3, [r4, #16]
 8008040:	4642      	mov	r2, r8
 8008042:	4631      	mov	r1, r6
 8008044:	4628      	mov	r0, r5
 8008046:	47b8      	blx	r7
 8008048:	3001      	adds	r0, #1
 800804a:	d12b      	bne.n	80080a4 <_printf_float+0x23c>
 800804c:	e767      	b.n	8007f1e <_printf_float+0xb6>
 800804e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008052:	f240 80dd 	bls.w	8008210 <_printf_float+0x3a8>
 8008056:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800805a:	2200      	movs	r2, #0
 800805c:	2300      	movs	r3, #0
 800805e:	f7f8 fd53 	bl	8000b08 <__aeabi_dcmpeq>
 8008062:	2800      	cmp	r0, #0
 8008064:	d033      	beq.n	80080ce <_printf_float+0x266>
 8008066:	4a37      	ldr	r2, [pc, #220]	@ (8008144 <_printf_float+0x2dc>)
 8008068:	2301      	movs	r3, #1
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	f43f af54 	beq.w	8007f1e <_printf_float+0xb6>
 8008076:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800807a:	4543      	cmp	r3, r8
 800807c:	db02      	blt.n	8008084 <_printf_float+0x21c>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	07d8      	lsls	r0, r3, #31
 8008082:	d50f      	bpl.n	80080a4 <_printf_float+0x23c>
 8008084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	47b8      	blx	r7
 800808e:	3001      	adds	r0, #1
 8008090:	f43f af45 	beq.w	8007f1e <_printf_float+0xb6>
 8008094:	f04f 0900 	mov.w	r9, #0
 8008098:	f108 38ff 	add.w	r8, r8, #4294967295
 800809c:	f104 0a1a 	add.w	sl, r4, #26
 80080a0:	45c8      	cmp	r8, r9
 80080a2:	dc09      	bgt.n	80080b8 <_printf_float+0x250>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	079b      	lsls	r3, r3, #30
 80080a8:	f100 8103 	bmi.w	80082b2 <_printf_float+0x44a>
 80080ac:	68e0      	ldr	r0, [r4, #12]
 80080ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080b0:	4298      	cmp	r0, r3
 80080b2:	bfb8      	it	lt
 80080b4:	4618      	movlt	r0, r3
 80080b6:	e734      	b.n	8007f22 <_printf_float+0xba>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4652      	mov	r2, sl
 80080bc:	4631      	mov	r1, r6
 80080be:	4628      	mov	r0, r5
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f af2b 	beq.w	8007f1e <_printf_float+0xb6>
 80080c8:	f109 0901 	add.w	r9, r9, #1
 80080cc:	e7e8      	b.n	80080a0 <_printf_float+0x238>
 80080ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dc39      	bgt.n	8008148 <_printf_float+0x2e0>
 80080d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008144 <_printf_float+0x2dc>)
 80080d6:	2301      	movs	r3, #1
 80080d8:	4631      	mov	r1, r6
 80080da:	4628      	mov	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	3001      	adds	r0, #1
 80080e0:	f43f af1d 	beq.w	8007f1e <_printf_float+0xb6>
 80080e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80080e8:	ea59 0303 	orrs.w	r3, r9, r3
 80080ec:	d102      	bne.n	80080f4 <_printf_float+0x28c>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	07d9      	lsls	r1, r3, #31
 80080f2:	d5d7      	bpl.n	80080a4 <_printf_float+0x23c>
 80080f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080f8:	4631      	mov	r1, r6
 80080fa:	4628      	mov	r0, r5
 80080fc:	47b8      	blx	r7
 80080fe:	3001      	adds	r0, #1
 8008100:	f43f af0d 	beq.w	8007f1e <_printf_float+0xb6>
 8008104:	f04f 0a00 	mov.w	sl, #0
 8008108:	f104 0b1a 	add.w	fp, r4, #26
 800810c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800810e:	425b      	negs	r3, r3
 8008110:	4553      	cmp	r3, sl
 8008112:	dc01      	bgt.n	8008118 <_printf_float+0x2b0>
 8008114:	464b      	mov	r3, r9
 8008116:	e793      	b.n	8008040 <_printf_float+0x1d8>
 8008118:	2301      	movs	r3, #1
 800811a:	465a      	mov	r2, fp
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	f43f aefb 	beq.w	8007f1e <_printf_float+0xb6>
 8008128:	f10a 0a01 	add.w	sl, sl, #1
 800812c:	e7ee      	b.n	800810c <_printf_float+0x2a4>
 800812e:	bf00      	nop
 8008130:	7fefffff 	.word	0x7fefffff
 8008134:	0800d598 	.word	0x0800d598
 8008138:	0800d594 	.word	0x0800d594
 800813c:	0800d5a0 	.word	0x0800d5a0
 8008140:	0800d59c 	.word	0x0800d59c
 8008144:	0800d5a4 	.word	0x0800d5a4
 8008148:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800814a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800814e:	4553      	cmp	r3, sl
 8008150:	bfa8      	it	ge
 8008152:	4653      	movge	r3, sl
 8008154:	2b00      	cmp	r3, #0
 8008156:	4699      	mov	r9, r3
 8008158:	dc36      	bgt.n	80081c8 <_printf_float+0x360>
 800815a:	f04f 0b00 	mov.w	fp, #0
 800815e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008162:	f104 021a 	add.w	r2, r4, #26
 8008166:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008168:	9306      	str	r3, [sp, #24]
 800816a:	eba3 0309 	sub.w	r3, r3, r9
 800816e:	455b      	cmp	r3, fp
 8008170:	dc31      	bgt.n	80081d6 <_printf_float+0x36e>
 8008172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008174:	459a      	cmp	sl, r3
 8008176:	dc3a      	bgt.n	80081ee <_printf_float+0x386>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	07da      	lsls	r2, r3, #31
 800817c:	d437      	bmi.n	80081ee <_printf_float+0x386>
 800817e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008180:	ebaa 0903 	sub.w	r9, sl, r3
 8008184:	9b06      	ldr	r3, [sp, #24]
 8008186:	ebaa 0303 	sub.w	r3, sl, r3
 800818a:	4599      	cmp	r9, r3
 800818c:	bfa8      	it	ge
 800818e:	4699      	movge	r9, r3
 8008190:	f1b9 0f00 	cmp.w	r9, #0
 8008194:	dc33      	bgt.n	80081fe <_printf_float+0x396>
 8008196:	f04f 0800 	mov.w	r8, #0
 800819a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800819e:	f104 0b1a 	add.w	fp, r4, #26
 80081a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a4:	ebaa 0303 	sub.w	r3, sl, r3
 80081a8:	eba3 0309 	sub.w	r3, r3, r9
 80081ac:	4543      	cmp	r3, r8
 80081ae:	f77f af79 	ble.w	80080a4 <_printf_float+0x23c>
 80081b2:	2301      	movs	r3, #1
 80081b4:	465a      	mov	r2, fp
 80081b6:	4631      	mov	r1, r6
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b8      	blx	r7
 80081bc:	3001      	adds	r0, #1
 80081be:	f43f aeae 	beq.w	8007f1e <_printf_float+0xb6>
 80081c2:	f108 0801 	add.w	r8, r8, #1
 80081c6:	e7ec      	b.n	80081a2 <_printf_float+0x33a>
 80081c8:	4642      	mov	r2, r8
 80081ca:	4631      	mov	r1, r6
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b8      	blx	r7
 80081d0:	3001      	adds	r0, #1
 80081d2:	d1c2      	bne.n	800815a <_printf_float+0x2f2>
 80081d4:	e6a3      	b.n	8007f1e <_printf_float+0xb6>
 80081d6:	2301      	movs	r3, #1
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	9206      	str	r2, [sp, #24]
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	f43f ae9c 	beq.w	8007f1e <_printf_float+0xb6>
 80081e6:	9a06      	ldr	r2, [sp, #24]
 80081e8:	f10b 0b01 	add.w	fp, fp, #1
 80081ec:	e7bb      	b.n	8008166 <_printf_float+0x2fe>
 80081ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f2:	4631      	mov	r1, r6
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	d1c0      	bne.n	800817e <_printf_float+0x316>
 80081fc:	e68f      	b.n	8007f1e <_printf_float+0xb6>
 80081fe:	9a06      	ldr	r2, [sp, #24]
 8008200:	464b      	mov	r3, r9
 8008202:	4442      	add	r2, r8
 8008204:	4631      	mov	r1, r6
 8008206:	4628      	mov	r0, r5
 8008208:	47b8      	blx	r7
 800820a:	3001      	adds	r0, #1
 800820c:	d1c3      	bne.n	8008196 <_printf_float+0x32e>
 800820e:	e686      	b.n	8007f1e <_printf_float+0xb6>
 8008210:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008214:	f1ba 0f01 	cmp.w	sl, #1
 8008218:	dc01      	bgt.n	800821e <_printf_float+0x3b6>
 800821a:	07db      	lsls	r3, r3, #31
 800821c:	d536      	bpl.n	800828c <_printf_float+0x424>
 800821e:	2301      	movs	r3, #1
 8008220:	4642      	mov	r2, r8
 8008222:	4631      	mov	r1, r6
 8008224:	4628      	mov	r0, r5
 8008226:	47b8      	blx	r7
 8008228:	3001      	adds	r0, #1
 800822a:	f43f ae78 	beq.w	8007f1e <_printf_float+0xb6>
 800822e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	f43f ae70 	beq.w	8007f1e <_printf_float+0xb6>
 800823e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008242:	2200      	movs	r2, #0
 8008244:	2300      	movs	r3, #0
 8008246:	f10a 3aff 	add.w	sl, sl, #4294967295
 800824a:	f7f8 fc5d 	bl	8000b08 <__aeabi_dcmpeq>
 800824e:	b9c0      	cbnz	r0, 8008282 <_printf_float+0x41a>
 8008250:	4653      	mov	r3, sl
 8008252:	f108 0201 	add.w	r2, r8, #1
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	47b8      	blx	r7
 800825c:	3001      	adds	r0, #1
 800825e:	d10c      	bne.n	800827a <_printf_float+0x412>
 8008260:	e65d      	b.n	8007f1e <_printf_float+0xb6>
 8008262:	2301      	movs	r3, #1
 8008264:	465a      	mov	r2, fp
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	47b8      	blx	r7
 800826c:	3001      	adds	r0, #1
 800826e:	f43f ae56 	beq.w	8007f1e <_printf_float+0xb6>
 8008272:	f108 0801 	add.w	r8, r8, #1
 8008276:	45d0      	cmp	r8, sl
 8008278:	dbf3      	blt.n	8008262 <_printf_float+0x3fa>
 800827a:	464b      	mov	r3, r9
 800827c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008280:	e6df      	b.n	8008042 <_printf_float+0x1da>
 8008282:	f04f 0800 	mov.w	r8, #0
 8008286:	f104 0b1a 	add.w	fp, r4, #26
 800828a:	e7f4      	b.n	8008276 <_printf_float+0x40e>
 800828c:	2301      	movs	r3, #1
 800828e:	4642      	mov	r2, r8
 8008290:	e7e1      	b.n	8008256 <_printf_float+0x3ee>
 8008292:	2301      	movs	r3, #1
 8008294:	464a      	mov	r2, r9
 8008296:	4631      	mov	r1, r6
 8008298:	4628      	mov	r0, r5
 800829a:	47b8      	blx	r7
 800829c:	3001      	adds	r0, #1
 800829e:	f43f ae3e 	beq.w	8007f1e <_printf_float+0xb6>
 80082a2:	f108 0801 	add.w	r8, r8, #1
 80082a6:	68e3      	ldr	r3, [r4, #12]
 80082a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082aa:	1a5b      	subs	r3, r3, r1
 80082ac:	4543      	cmp	r3, r8
 80082ae:	dcf0      	bgt.n	8008292 <_printf_float+0x42a>
 80082b0:	e6fc      	b.n	80080ac <_printf_float+0x244>
 80082b2:	f04f 0800 	mov.w	r8, #0
 80082b6:	f104 0919 	add.w	r9, r4, #25
 80082ba:	e7f4      	b.n	80082a6 <_printf_float+0x43e>

080082bc <_printf_common>:
 80082bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	4616      	mov	r6, r2
 80082c2:	4698      	mov	r8, r3
 80082c4:	688a      	ldr	r2, [r1, #8]
 80082c6:	690b      	ldr	r3, [r1, #16]
 80082c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082cc:	4293      	cmp	r3, r2
 80082ce:	bfb8      	it	lt
 80082d0:	4613      	movlt	r3, r2
 80082d2:	6033      	str	r3, [r6, #0]
 80082d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082d8:	4607      	mov	r7, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	b10a      	cbz	r2, 80082e2 <_printf_common+0x26>
 80082de:	3301      	adds	r3, #1
 80082e0:	6033      	str	r3, [r6, #0]
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	0699      	lsls	r1, r3, #26
 80082e6:	bf42      	ittt	mi
 80082e8:	6833      	ldrmi	r3, [r6, #0]
 80082ea:	3302      	addmi	r3, #2
 80082ec:	6033      	strmi	r3, [r6, #0]
 80082ee:	6825      	ldr	r5, [r4, #0]
 80082f0:	f015 0506 	ands.w	r5, r5, #6
 80082f4:	d106      	bne.n	8008304 <_printf_common+0x48>
 80082f6:	f104 0a19 	add.w	sl, r4, #25
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	6832      	ldr	r2, [r6, #0]
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	42ab      	cmp	r3, r5
 8008302:	dc26      	bgt.n	8008352 <_printf_common+0x96>
 8008304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	3b00      	subs	r3, #0
 800830c:	bf18      	it	ne
 800830e:	2301      	movne	r3, #1
 8008310:	0692      	lsls	r2, r2, #26
 8008312:	d42b      	bmi.n	800836c <_printf_common+0xb0>
 8008314:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008318:	4641      	mov	r1, r8
 800831a:	4638      	mov	r0, r7
 800831c:	47c8      	blx	r9
 800831e:	3001      	adds	r0, #1
 8008320:	d01e      	beq.n	8008360 <_printf_common+0xa4>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	6922      	ldr	r2, [r4, #16]
 8008326:	f003 0306 	and.w	r3, r3, #6
 800832a:	2b04      	cmp	r3, #4
 800832c:	bf02      	ittt	eq
 800832e:	68e5      	ldreq	r5, [r4, #12]
 8008330:	6833      	ldreq	r3, [r6, #0]
 8008332:	1aed      	subeq	r5, r5, r3
 8008334:	68a3      	ldr	r3, [r4, #8]
 8008336:	bf0c      	ite	eq
 8008338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800833c:	2500      	movne	r5, #0
 800833e:	4293      	cmp	r3, r2
 8008340:	bfc4      	itt	gt
 8008342:	1a9b      	subgt	r3, r3, r2
 8008344:	18ed      	addgt	r5, r5, r3
 8008346:	2600      	movs	r6, #0
 8008348:	341a      	adds	r4, #26
 800834a:	42b5      	cmp	r5, r6
 800834c:	d11a      	bne.n	8008384 <_printf_common+0xc8>
 800834e:	2000      	movs	r0, #0
 8008350:	e008      	b.n	8008364 <_printf_common+0xa8>
 8008352:	2301      	movs	r3, #1
 8008354:	4652      	mov	r2, sl
 8008356:	4641      	mov	r1, r8
 8008358:	4638      	mov	r0, r7
 800835a:	47c8      	blx	r9
 800835c:	3001      	adds	r0, #1
 800835e:	d103      	bne.n	8008368 <_printf_common+0xac>
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008368:	3501      	adds	r5, #1
 800836a:	e7c6      	b.n	80082fa <_printf_common+0x3e>
 800836c:	18e1      	adds	r1, r4, r3
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	2030      	movs	r0, #48	@ 0x30
 8008372:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008376:	4422      	add	r2, r4
 8008378:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800837c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008380:	3302      	adds	r3, #2
 8008382:	e7c7      	b.n	8008314 <_printf_common+0x58>
 8008384:	2301      	movs	r3, #1
 8008386:	4622      	mov	r2, r4
 8008388:	4641      	mov	r1, r8
 800838a:	4638      	mov	r0, r7
 800838c:	47c8      	blx	r9
 800838e:	3001      	adds	r0, #1
 8008390:	d0e6      	beq.n	8008360 <_printf_common+0xa4>
 8008392:	3601      	adds	r6, #1
 8008394:	e7d9      	b.n	800834a <_printf_common+0x8e>
	...

08008398 <_printf_i>:
 8008398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800839c:	7e0f      	ldrb	r7, [r1, #24]
 800839e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083a0:	2f78      	cmp	r7, #120	@ 0x78
 80083a2:	4691      	mov	r9, r2
 80083a4:	4680      	mov	r8, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	469a      	mov	sl, r3
 80083aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083ae:	d807      	bhi.n	80083c0 <_printf_i+0x28>
 80083b0:	2f62      	cmp	r7, #98	@ 0x62
 80083b2:	d80a      	bhi.n	80083ca <_printf_i+0x32>
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	f000 80d1 	beq.w	800855c <_printf_i+0x1c4>
 80083ba:	2f58      	cmp	r7, #88	@ 0x58
 80083bc:	f000 80b8 	beq.w	8008530 <_printf_i+0x198>
 80083c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083c8:	e03a      	b.n	8008440 <_printf_i+0xa8>
 80083ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083ce:	2b15      	cmp	r3, #21
 80083d0:	d8f6      	bhi.n	80083c0 <_printf_i+0x28>
 80083d2:	a101      	add	r1, pc, #4	@ (adr r1, 80083d8 <_printf_i+0x40>)
 80083d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008445 	.word	0x08008445
 80083e0:	080083c1 	.word	0x080083c1
 80083e4:	080083c1 	.word	0x080083c1
 80083e8:	080083c1 	.word	0x080083c1
 80083ec:	080083c1 	.word	0x080083c1
 80083f0:	08008445 	.word	0x08008445
 80083f4:	080083c1 	.word	0x080083c1
 80083f8:	080083c1 	.word	0x080083c1
 80083fc:	080083c1 	.word	0x080083c1
 8008400:	080083c1 	.word	0x080083c1
 8008404:	08008543 	.word	0x08008543
 8008408:	0800846f 	.word	0x0800846f
 800840c:	080084fd 	.word	0x080084fd
 8008410:	080083c1 	.word	0x080083c1
 8008414:	080083c1 	.word	0x080083c1
 8008418:	08008565 	.word	0x08008565
 800841c:	080083c1 	.word	0x080083c1
 8008420:	0800846f 	.word	0x0800846f
 8008424:	080083c1 	.word	0x080083c1
 8008428:	080083c1 	.word	0x080083c1
 800842c:	08008505 	.word	0x08008505
 8008430:	6833      	ldr	r3, [r6, #0]
 8008432:	1d1a      	adds	r2, r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6032      	str	r2, [r6, #0]
 8008438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800843c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008440:	2301      	movs	r3, #1
 8008442:	e09c      	b.n	800857e <_printf_i+0x1e6>
 8008444:	6833      	ldr	r3, [r6, #0]
 8008446:	6820      	ldr	r0, [r4, #0]
 8008448:	1d19      	adds	r1, r3, #4
 800844a:	6031      	str	r1, [r6, #0]
 800844c:	0606      	lsls	r6, r0, #24
 800844e:	d501      	bpl.n	8008454 <_printf_i+0xbc>
 8008450:	681d      	ldr	r5, [r3, #0]
 8008452:	e003      	b.n	800845c <_printf_i+0xc4>
 8008454:	0645      	lsls	r5, r0, #25
 8008456:	d5fb      	bpl.n	8008450 <_printf_i+0xb8>
 8008458:	f9b3 5000 	ldrsh.w	r5, [r3]
 800845c:	2d00      	cmp	r5, #0
 800845e:	da03      	bge.n	8008468 <_printf_i+0xd0>
 8008460:	232d      	movs	r3, #45	@ 0x2d
 8008462:	426d      	negs	r5, r5
 8008464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008468:	4858      	ldr	r0, [pc, #352]	@ (80085cc <_printf_i+0x234>)
 800846a:	230a      	movs	r3, #10
 800846c:	e011      	b.n	8008492 <_printf_i+0xfa>
 800846e:	6821      	ldr	r1, [r4, #0]
 8008470:	6833      	ldr	r3, [r6, #0]
 8008472:	0608      	lsls	r0, r1, #24
 8008474:	f853 5b04 	ldr.w	r5, [r3], #4
 8008478:	d402      	bmi.n	8008480 <_printf_i+0xe8>
 800847a:	0649      	lsls	r1, r1, #25
 800847c:	bf48      	it	mi
 800847e:	b2ad      	uxthmi	r5, r5
 8008480:	2f6f      	cmp	r7, #111	@ 0x6f
 8008482:	4852      	ldr	r0, [pc, #328]	@ (80085cc <_printf_i+0x234>)
 8008484:	6033      	str	r3, [r6, #0]
 8008486:	bf14      	ite	ne
 8008488:	230a      	movne	r3, #10
 800848a:	2308      	moveq	r3, #8
 800848c:	2100      	movs	r1, #0
 800848e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008492:	6866      	ldr	r6, [r4, #4]
 8008494:	60a6      	str	r6, [r4, #8]
 8008496:	2e00      	cmp	r6, #0
 8008498:	db05      	blt.n	80084a6 <_printf_i+0x10e>
 800849a:	6821      	ldr	r1, [r4, #0]
 800849c:	432e      	orrs	r6, r5
 800849e:	f021 0104 	bic.w	r1, r1, #4
 80084a2:	6021      	str	r1, [r4, #0]
 80084a4:	d04b      	beq.n	800853e <_printf_i+0x1a6>
 80084a6:	4616      	mov	r6, r2
 80084a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80084ac:	fb03 5711 	mls	r7, r3, r1, r5
 80084b0:	5dc7      	ldrb	r7, [r0, r7]
 80084b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084b6:	462f      	mov	r7, r5
 80084b8:	42bb      	cmp	r3, r7
 80084ba:	460d      	mov	r5, r1
 80084bc:	d9f4      	bls.n	80084a8 <_printf_i+0x110>
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d10b      	bne.n	80084da <_printf_i+0x142>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	07df      	lsls	r7, r3, #31
 80084c6:	d508      	bpl.n	80084da <_printf_i+0x142>
 80084c8:	6923      	ldr	r3, [r4, #16]
 80084ca:	6861      	ldr	r1, [r4, #4]
 80084cc:	4299      	cmp	r1, r3
 80084ce:	bfde      	ittt	le
 80084d0:	2330      	movle	r3, #48	@ 0x30
 80084d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084da:	1b92      	subs	r2, r2, r6
 80084dc:	6122      	str	r2, [r4, #16]
 80084de:	f8cd a000 	str.w	sl, [sp]
 80084e2:	464b      	mov	r3, r9
 80084e4:	aa03      	add	r2, sp, #12
 80084e6:	4621      	mov	r1, r4
 80084e8:	4640      	mov	r0, r8
 80084ea:	f7ff fee7 	bl	80082bc <_printf_common>
 80084ee:	3001      	adds	r0, #1
 80084f0:	d14a      	bne.n	8008588 <_printf_i+0x1f0>
 80084f2:	f04f 30ff 	mov.w	r0, #4294967295
 80084f6:	b004      	add	sp, #16
 80084f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	f043 0320 	orr.w	r3, r3, #32
 8008502:	6023      	str	r3, [r4, #0]
 8008504:	4832      	ldr	r0, [pc, #200]	@ (80085d0 <_printf_i+0x238>)
 8008506:	2778      	movs	r7, #120	@ 0x78
 8008508:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	6831      	ldr	r1, [r6, #0]
 8008510:	061f      	lsls	r7, r3, #24
 8008512:	f851 5b04 	ldr.w	r5, [r1], #4
 8008516:	d402      	bmi.n	800851e <_printf_i+0x186>
 8008518:	065f      	lsls	r7, r3, #25
 800851a:	bf48      	it	mi
 800851c:	b2ad      	uxthmi	r5, r5
 800851e:	6031      	str	r1, [r6, #0]
 8008520:	07d9      	lsls	r1, r3, #31
 8008522:	bf44      	itt	mi
 8008524:	f043 0320 	orrmi.w	r3, r3, #32
 8008528:	6023      	strmi	r3, [r4, #0]
 800852a:	b11d      	cbz	r5, 8008534 <_printf_i+0x19c>
 800852c:	2310      	movs	r3, #16
 800852e:	e7ad      	b.n	800848c <_printf_i+0xf4>
 8008530:	4826      	ldr	r0, [pc, #152]	@ (80085cc <_printf_i+0x234>)
 8008532:	e7e9      	b.n	8008508 <_printf_i+0x170>
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	f023 0320 	bic.w	r3, r3, #32
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	e7f6      	b.n	800852c <_printf_i+0x194>
 800853e:	4616      	mov	r6, r2
 8008540:	e7bd      	b.n	80084be <_printf_i+0x126>
 8008542:	6833      	ldr	r3, [r6, #0]
 8008544:	6825      	ldr	r5, [r4, #0]
 8008546:	6961      	ldr	r1, [r4, #20]
 8008548:	1d18      	adds	r0, r3, #4
 800854a:	6030      	str	r0, [r6, #0]
 800854c:	062e      	lsls	r6, r5, #24
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	d501      	bpl.n	8008556 <_printf_i+0x1be>
 8008552:	6019      	str	r1, [r3, #0]
 8008554:	e002      	b.n	800855c <_printf_i+0x1c4>
 8008556:	0668      	lsls	r0, r5, #25
 8008558:	d5fb      	bpl.n	8008552 <_printf_i+0x1ba>
 800855a:	8019      	strh	r1, [r3, #0]
 800855c:	2300      	movs	r3, #0
 800855e:	6123      	str	r3, [r4, #16]
 8008560:	4616      	mov	r6, r2
 8008562:	e7bc      	b.n	80084de <_printf_i+0x146>
 8008564:	6833      	ldr	r3, [r6, #0]
 8008566:	1d1a      	adds	r2, r3, #4
 8008568:	6032      	str	r2, [r6, #0]
 800856a:	681e      	ldr	r6, [r3, #0]
 800856c:	6862      	ldr	r2, [r4, #4]
 800856e:	2100      	movs	r1, #0
 8008570:	4630      	mov	r0, r6
 8008572:	f7f7 fe4d 	bl	8000210 <memchr>
 8008576:	b108      	cbz	r0, 800857c <_printf_i+0x1e4>
 8008578:	1b80      	subs	r0, r0, r6
 800857a:	6060      	str	r0, [r4, #4]
 800857c:	6863      	ldr	r3, [r4, #4]
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	2300      	movs	r3, #0
 8008582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008586:	e7aa      	b.n	80084de <_printf_i+0x146>
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	4632      	mov	r2, r6
 800858c:	4649      	mov	r1, r9
 800858e:	4640      	mov	r0, r8
 8008590:	47d0      	blx	sl
 8008592:	3001      	adds	r0, #1
 8008594:	d0ad      	beq.n	80084f2 <_printf_i+0x15a>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	079b      	lsls	r3, r3, #30
 800859a:	d413      	bmi.n	80085c4 <_printf_i+0x22c>
 800859c:	68e0      	ldr	r0, [r4, #12]
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	4298      	cmp	r0, r3
 80085a2:	bfb8      	it	lt
 80085a4:	4618      	movlt	r0, r3
 80085a6:	e7a6      	b.n	80084f6 <_printf_i+0x15e>
 80085a8:	2301      	movs	r3, #1
 80085aa:	4632      	mov	r2, r6
 80085ac:	4649      	mov	r1, r9
 80085ae:	4640      	mov	r0, r8
 80085b0:	47d0      	blx	sl
 80085b2:	3001      	adds	r0, #1
 80085b4:	d09d      	beq.n	80084f2 <_printf_i+0x15a>
 80085b6:	3501      	adds	r5, #1
 80085b8:	68e3      	ldr	r3, [r4, #12]
 80085ba:	9903      	ldr	r1, [sp, #12]
 80085bc:	1a5b      	subs	r3, r3, r1
 80085be:	42ab      	cmp	r3, r5
 80085c0:	dcf2      	bgt.n	80085a8 <_printf_i+0x210>
 80085c2:	e7eb      	b.n	800859c <_printf_i+0x204>
 80085c4:	2500      	movs	r5, #0
 80085c6:	f104 0619 	add.w	r6, r4, #25
 80085ca:	e7f5      	b.n	80085b8 <_printf_i+0x220>
 80085cc:	0800d5a6 	.word	0x0800d5a6
 80085d0:	0800d5b7 	.word	0x0800d5b7

080085d4 <_scanf_float>:
 80085d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	b087      	sub	sp, #28
 80085da:	4691      	mov	r9, r2
 80085dc:	9303      	str	r3, [sp, #12]
 80085de:	688b      	ldr	r3, [r1, #8]
 80085e0:	1e5a      	subs	r2, r3, #1
 80085e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80085e6:	bf81      	itttt	hi
 80085e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80085ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80085f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80085f4:	608b      	strhi	r3, [r1, #8]
 80085f6:	680b      	ldr	r3, [r1, #0]
 80085f8:	460a      	mov	r2, r1
 80085fa:	f04f 0500 	mov.w	r5, #0
 80085fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008602:	f842 3b1c 	str.w	r3, [r2], #28
 8008606:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800860a:	4680      	mov	r8, r0
 800860c:	460c      	mov	r4, r1
 800860e:	bf98      	it	ls
 8008610:	f04f 0b00 	movls.w	fp, #0
 8008614:	9201      	str	r2, [sp, #4]
 8008616:	4616      	mov	r6, r2
 8008618:	46aa      	mov	sl, r5
 800861a:	462f      	mov	r7, r5
 800861c:	9502      	str	r5, [sp, #8]
 800861e:	68a2      	ldr	r2, [r4, #8]
 8008620:	b15a      	cbz	r2, 800863a <_scanf_float+0x66>
 8008622:	f8d9 3000 	ldr.w	r3, [r9]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b4e      	cmp	r3, #78	@ 0x4e
 800862a:	d863      	bhi.n	80086f4 <_scanf_float+0x120>
 800862c:	2b40      	cmp	r3, #64	@ 0x40
 800862e:	d83b      	bhi.n	80086a8 <_scanf_float+0xd4>
 8008630:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008634:	b2c8      	uxtb	r0, r1
 8008636:	280e      	cmp	r0, #14
 8008638:	d939      	bls.n	80086ae <_scanf_float+0xda>
 800863a:	b11f      	cbz	r7, 8008644 <_scanf_float+0x70>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008648:	f1ba 0f01 	cmp.w	sl, #1
 800864c:	f200 8114 	bhi.w	8008878 <_scanf_float+0x2a4>
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	429e      	cmp	r6, r3
 8008654:	f200 8105 	bhi.w	8008862 <_scanf_float+0x28e>
 8008658:	2001      	movs	r0, #1
 800865a:	b007      	add	sp, #28
 800865c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008660:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008664:	2a0d      	cmp	r2, #13
 8008666:	d8e8      	bhi.n	800863a <_scanf_float+0x66>
 8008668:	a101      	add	r1, pc, #4	@ (adr r1, 8008670 <_scanf_float+0x9c>)
 800866a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800866e:	bf00      	nop
 8008670:	080087b9 	.word	0x080087b9
 8008674:	0800863b 	.word	0x0800863b
 8008678:	0800863b 	.word	0x0800863b
 800867c:	0800863b 	.word	0x0800863b
 8008680:	08008815 	.word	0x08008815
 8008684:	080087ef 	.word	0x080087ef
 8008688:	0800863b 	.word	0x0800863b
 800868c:	0800863b 	.word	0x0800863b
 8008690:	080087c7 	.word	0x080087c7
 8008694:	0800863b 	.word	0x0800863b
 8008698:	0800863b 	.word	0x0800863b
 800869c:	0800863b 	.word	0x0800863b
 80086a0:	0800863b 	.word	0x0800863b
 80086a4:	08008783 	.word	0x08008783
 80086a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80086ac:	e7da      	b.n	8008664 <_scanf_float+0x90>
 80086ae:	290e      	cmp	r1, #14
 80086b0:	d8c3      	bhi.n	800863a <_scanf_float+0x66>
 80086b2:	a001      	add	r0, pc, #4	@ (adr r0, 80086b8 <_scanf_float+0xe4>)
 80086b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086b8:	08008773 	.word	0x08008773
 80086bc:	0800863b 	.word	0x0800863b
 80086c0:	08008773 	.word	0x08008773
 80086c4:	08008803 	.word	0x08008803
 80086c8:	0800863b 	.word	0x0800863b
 80086cc:	08008715 	.word	0x08008715
 80086d0:	08008759 	.word	0x08008759
 80086d4:	08008759 	.word	0x08008759
 80086d8:	08008759 	.word	0x08008759
 80086dc:	08008759 	.word	0x08008759
 80086e0:	08008759 	.word	0x08008759
 80086e4:	08008759 	.word	0x08008759
 80086e8:	08008759 	.word	0x08008759
 80086ec:	08008759 	.word	0x08008759
 80086f0:	08008759 	.word	0x08008759
 80086f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80086f6:	d809      	bhi.n	800870c <_scanf_float+0x138>
 80086f8:	2b60      	cmp	r3, #96	@ 0x60
 80086fa:	d8b1      	bhi.n	8008660 <_scanf_float+0x8c>
 80086fc:	2b54      	cmp	r3, #84	@ 0x54
 80086fe:	d07b      	beq.n	80087f8 <_scanf_float+0x224>
 8008700:	2b59      	cmp	r3, #89	@ 0x59
 8008702:	d19a      	bne.n	800863a <_scanf_float+0x66>
 8008704:	2d07      	cmp	r5, #7
 8008706:	d198      	bne.n	800863a <_scanf_float+0x66>
 8008708:	2508      	movs	r5, #8
 800870a:	e02f      	b.n	800876c <_scanf_float+0x198>
 800870c:	2b74      	cmp	r3, #116	@ 0x74
 800870e:	d073      	beq.n	80087f8 <_scanf_float+0x224>
 8008710:	2b79      	cmp	r3, #121	@ 0x79
 8008712:	e7f6      	b.n	8008702 <_scanf_float+0x12e>
 8008714:	6821      	ldr	r1, [r4, #0]
 8008716:	05c8      	lsls	r0, r1, #23
 8008718:	d51e      	bpl.n	8008758 <_scanf_float+0x184>
 800871a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800871e:	6021      	str	r1, [r4, #0]
 8008720:	3701      	adds	r7, #1
 8008722:	f1bb 0f00 	cmp.w	fp, #0
 8008726:	d003      	beq.n	8008730 <_scanf_float+0x15c>
 8008728:	3201      	adds	r2, #1
 800872a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800872e:	60a2      	str	r2, [r4, #8]
 8008730:	68a3      	ldr	r3, [r4, #8]
 8008732:	3b01      	subs	r3, #1
 8008734:	60a3      	str	r3, [r4, #8]
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008740:	3b01      	subs	r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	f8c9 3004 	str.w	r3, [r9, #4]
 8008748:	f340 8082 	ble.w	8008850 <_scanf_float+0x27c>
 800874c:	f8d9 3000 	ldr.w	r3, [r9]
 8008750:	3301      	adds	r3, #1
 8008752:	f8c9 3000 	str.w	r3, [r9]
 8008756:	e762      	b.n	800861e <_scanf_float+0x4a>
 8008758:	eb1a 0105 	adds.w	r1, sl, r5
 800875c:	f47f af6d 	bne.w	800863a <_scanf_float+0x66>
 8008760:	6822      	ldr	r2, [r4, #0]
 8008762:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008766:	6022      	str	r2, [r4, #0]
 8008768:	460d      	mov	r5, r1
 800876a:	468a      	mov	sl, r1
 800876c:	f806 3b01 	strb.w	r3, [r6], #1
 8008770:	e7de      	b.n	8008730 <_scanf_float+0x15c>
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	0610      	lsls	r0, r2, #24
 8008776:	f57f af60 	bpl.w	800863a <_scanf_float+0x66>
 800877a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800877e:	6022      	str	r2, [r4, #0]
 8008780:	e7f4      	b.n	800876c <_scanf_float+0x198>
 8008782:	f1ba 0f00 	cmp.w	sl, #0
 8008786:	d10c      	bne.n	80087a2 <_scanf_float+0x1ce>
 8008788:	b977      	cbnz	r7, 80087a8 <_scanf_float+0x1d4>
 800878a:	6822      	ldr	r2, [r4, #0]
 800878c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008790:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008794:	d108      	bne.n	80087a8 <_scanf_float+0x1d4>
 8008796:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800879a:	6022      	str	r2, [r4, #0]
 800879c:	f04f 0a01 	mov.w	sl, #1
 80087a0:	e7e4      	b.n	800876c <_scanf_float+0x198>
 80087a2:	f1ba 0f02 	cmp.w	sl, #2
 80087a6:	d050      	beq.n	800884a <_scanf_float+0x276>
 80087a8:	2d01      	cmp	r5, #1
 80087aa:	d002      	beq.n	80087b2 <_scanf_float+0x1de>
 80087ac:	2d04      	cmp	r5, #4
 80087ae:	f47f af44 	bne.w	800863a <_scanf_float+0x66>
 80087b2:	3501      	adds	r5, #1
 80087b4:	b2ed      	uxtb	r5, r5
 80087b6:	e7d9      	b.n	800876c <_scanf_float+0x198>
 80087b8:	f1ba 0f01 	cmp.w	sl, #1
 80087bc:	f47f af3d 	bne.w	800863a <_scanf_float+0x66>
 80087c0:	f04f 0a02 	mov.w	sl, #2
 80087c4:	e7d2      	b.n	800876c <_scanf_float+0x198>
 80087c6:	b975      	cbnz	r5, 80087e6 <_scanf_float+0x212>
 80087c8:	2f00      	cmp	r7, #0
 80087ca:	f47f af37 	bne.w	800863c <_scanf_float+0x68>
 80087ce:	6822      	ldr	r2, [r4, #0]
 80087d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087d8:	f040 8103 	bne.w	80089e2 <_scanf_float+0x40e>
 80087dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087e0:	6022      	str	r2, [r4, #0]
 80087e2:	2501      	movs	r5, #1
 80087e4:	e7c2      	b.n	800876c <_scanf_float+0x198>
 80087e6:	2d03      	cmp	r5, #3
 80087e8:	d0e3      	beq.n	80087b2 <_scanf_float+0x1de>
 80087ea:	2d05      	cmp	r5, #5
 80087ec:	e7df      	b.n	80087ae <_scanf_float+0x1da>
 80087ee:	2d02      	cmp	r5, #2
 80087f0:	f47f af23 	bne.w	800863a <_scanf_float+0x66>
 80087f4:	2503      	movs	r5, #3
 80087f6:	e7b9      	b.n	800876c <_scanf_float+0x198>
 80087f8:	2d06      	cmp	r5, #6
 80087fa:	f47f af1e 	bne.w	800863a <_scanf_float+0x66>
 80087fe:	2507      	movs	r5, #7
 8008800:	e7b4      	b.n	800876c <_scanf_float+0x198>
 8008802:	6822      	ldr	r2, [r4, #0]
 8008804:	0591      	lsls	r1, r2, #22
 8008806:	f57f af18 	bpl.w	800863a <_scanf_float+0x66>
 800880a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800880e:	6022      	str	r2, [r4, #0]
 8008810:	9702      	str	r7, [sp, #8]
 8008812:	e7ab      	b.n	800876c <_scanf_float+0x198>
 8008814:	6822      	ldr	r2, [r4, #0]
 8008816:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800881a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800881e:	d005      	beq.n	800882c <_scanf_float+0x258>
 8008820:	0550      	lsls	r0, r2, #21
 8008822:	f57f af0a 	bpl.w	800863a <_scanf_float+0x66>
 8008826:	2f00      	cmp	r7, #0
 8008828:	f000 80db 	beq.w	80089e2 <_scanf_float+0x40e>
 800882c:	0591      	lsls	r1, r2, #22
 800882e:	bf58      	it	pl
 8008830:	9902      	ldrpl	r1, [sp, #8]
 8008832:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008836:	bf58      	it	pl
 8008838:	1a79      	subpl	r1, r7, r1
 800883a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800883e:	bf58      	it	pl
 8008840:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008844:	6022      	str	r2, [r4, #0]
 8008846:	2700      	movs	r7, #0
 8008848:	e790      	b.n	800876c <_scanf_float+0x198>
 800884a:	f04f 0a03 	mov.w	sl, #3
 800884e:	e78d      	b.n	800876c <_scanf_float+0x198>
 8008850:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008854:	4649      	mov	r1, r9
 8008856:	4640      	mov	r0, r8
 8008858:	4798      	blx	r3
 800885a:	2800      	cmp	r0, #0
 800885c:	f43f aedf 	beq.w	800861e <_scanf_float+0x4a>
 8008860:	e6eb      	b.n	800863a <_scanf_float+0x66>
 8008862:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008866:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800886a:	464a      	mov	r2, r9
 800886c:	4640      	mov	r0, r8
 800886e:	4798      	blx	r3
 8008870:	6923      	ldr	r3, [r4, #16]
 8008872:	3b01      	subs	r3, #1
 8008874:	6123      	str	r3, [r4, #16]
 8008876:	e6eb      	b.n	8008650 <_scanf_float+0x7c>
 8008878:	1e6b      	subs	r3, r5, #1
 800887a:	2b06      	cmp	r3, #6
 800887c:	d824      	bhi.n	80088c8 <_scanf_float+0x2f4>
 800887e:	2d02      	cmp	r5, #2
 8008880:	d836      	bhi.n	80088f0 <_scanf_float+0x31c>
 8008882:	9b01      	ldr	r3, [sp, #4]
 8008884:	429e      	cmp	r6, r3
 8008886:	f67f aee7 	bls.w	8008658 <_scanf_float+0x84>
 800888a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800888e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008892:	464a      	mov	r2, r9
 8008894:	4640      	mov	r0, r8
 8008896:	4798      	blx	r3
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	3b01      	subs	r3, #1
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	e7f0      	b.n	8008882 <_scanf_float+0x2ae>
 80088a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80088a8:	464a      	mov	r2, r9
 80088aa:	4640      	mov	r0, r8
 80088ac:	4798      	blx	r3
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	6123      	str	r3, [r4, #16]
 80088b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088b8:	fa5f fa8a 	uxtb.w	sl, sl
 80088bc:	f1ba 0f02 	cmp.w	sl, #2
 80088c0:	d1ee      	bne.n	80088a0 <_scanf_float+0x2cc>
 80088c2:	3d03      	subs	r5, #3
 80088c4:	b2ed      	uxtb	r5, r5
 80088c6:	1b76      	subs	r6, r6, r5
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	05da      	lsls	r2, r3, #23
 80088cc:	d530      	bpl.n	8008930 <_scanf_float+0x35c>
 80088ce:	055b      	lsls	r3, r3, #21
 80088d0:	d511      	bpl.n	80088f6 <_scanf_float+0x322>
 80088d2:	9b01      	ldr	r3, [sp, #4]
 80088d4:	429e      	cmp	r6, r3
 80088d6:	f67f aebf 	bls.w	8008658 <_scanf_float+0x84>
 80088da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088e2:	464a      	mov	r2, r9
 80088e4:	4640      	mov	r0, r8
 80088e6:	4798      	blx	r3
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	6123      	str	r3, [r4, #16]
 80088ee:	e7f0      	b.n	80088d2 <_scanf_float+0x2fe>
 80088f0:	46aa      	mov	sl, r5
 80088f2:	46b3      	mov	fp, r6
 80088f4:	e7de      	b.n	80088b4 <_scanf_float+0x2e0>
 80088f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80088fa:	6923      	ldr	r3, [r4, #16]
 80088fc:	2965      	cmp	r1, #101	@ 0x65
 80088fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008902:	f106 35ff 	add.w	r5, r6, #4294967295
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	d00c      	beq.n	8008924 <_scanf_float+0x350>
 800890a:	2945      	cmp	r1, #69	@ 0x45
 800890c:	d00a      	beq.n	8008924 <_scanf_float+0x350>
 800890e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008912:	464a      	mov	r2, r9
 8008914:	4640      	mov	r0, r8
 8008916:	4798      	blx	r3
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800891e:	3b01      	subs	r3, #1
 8008920:	1eb5      	subs	r5, r6, #2
 8008922:	6123      	str	r3, [r4, #16]
 8008924:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008928:	464a      	mov	r2, r9
 800892a:	4640      	mov	r0, r8
 800892c:	4798      	blx	r3
 800892e:	462e      	mov	r6, r5
 8008930:	6822      	ldr	r2, [r4, #0]
 8008932:	f012 0210 	ands.w	r2, r2, #16
 8008936:	d001      	beq.n	800893c <_scanf_float+0x368>
 8008938:	2000      	movs	r0, #0
 800893a:	e68e      	b.n	800865a <_scanf_float+0x86>
 800893c:	7032      	strb	r2, [r6, #0]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008948:	d125      	bne.n	8008996 <_scanf_float+0x3c2>
 800894a:	9b02      	ldr	r3, [sp, #8]
 800894c:	429f      	cmp	r7, r3
 800894e:	d00a      	beq.n	8008966 <_scanf_float+0x392>
 8008950:	1bda      	subs	r2, r3, r7
 8008952:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008956:	429e      	cmp	r6, r3
 8008958:	bf28      	it	cs
 800895a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800895e:	4922      	ldr	r1, [pc, #136]	@ (80089e8 <_scanf_float+0x414>)
 8008960:	4630      	mov	r0, r6
 8008962:	f000 f93d 	bl	8008be0 <siprintf>
 8008966:	9901      	ldr	r1, [sp, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	4640      	mov	r0, r8
 800896c:	f002 fc44 	bl	800b1f8 <_strtod_r>
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	6821      	ldr	r1, [r4, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f011 0f02 	tst.w	r1, #2
 800897a:	ec57 6b10 	vmov	r6, r7, d0
 800897e:	f103 0204 	add.w	r2, r3, #4
 8008982:	d015      	beq.n	80089b0 <_scanf_float+0x3dc>
 8008984:	9903      	ldr	r1, [sp, #12]
 8008986:	600a      	str	r2, [r1, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	e9c3 6700 	strd	r6, r7, [r3]
 800898e:	68e3      	ldr	r3, [r4, #12]
 8008990:	3301      	adds	r3, #1
 8008992:	60e3      	str	r3, [r4, #12]
 8008994:	e7d0      	b.n	8008938 <_scanf_float+0x364>
 8008996:	9b04      	ldr	r3, [sp, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0e4      	beq.n	8008966 <_scanf_float+0x392>
 800899c:	9905      	ldr	r1, [sp, #20]
 800899e:	230a      	movs	r3, #10
 80089a0:	3101      	adds	r1, #1
 80089a2:	4640      	mov	r0, r8
 80089a4:	f002 fca8 	bl	800b2f8 <_strtol_r>
 80089a8:	9b04      	ldr	r3, [sp, #16]
 80089aa:	9e05      	ldr	r6, [sp, #20]
 80089ac:	1ac2      	subs	r2, r0, r3
 80089ae:	e7d0      	b.n	8008952 <_scanf_float+0x37e>
 80089b0:	f011 0f04 	tst.w	r1, #4
 80089b4:	9903      	ldr	r1, [sp, #12]
 80089b6:	600a      	str	r2, [r1, #0]
 80089b8:	d1e6      	bne.n	8008988 <_scanf_float+0x3b4>
 80089ba:	681d      	ldr	r5, [r3, #0]
 80089bc:	4632      	mov	r2, r6
 80089be:	463b      	mov	r3, r7
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f8 f8d2 	bl	8000b6c <__aeabi_dcmpun>
 80089c8:	b128      	cbz	r0, 80089d6 <_scanf_float+0x402>
 80089ca:	4808      	ldr	r0, [pc, #32]	@ (80089ec <_scanf_float+0x418>)
 80089cc:	f000 fa08 	bl	8008de0 <nanf>
 80089d0:	ed85 0a00 	vstr	s0, [r5]
 80089d4:	e7db      	b.n	800898e <_scanf_float+0x3ba>
 80089d6:	4630      	mov	r0, r6
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f8 f925 	bl	8000c28 <__aeabi_d2f>
 80089de:	6028      	str	r0, [r5, #0]
 80089e0:	e7d5      	b.n	800898e <_scanf_float+0x3ba>
 80089e2:	2700      	movs	r7, #0
 80089e4:	e62e      	b.n	8008644 <_scanf_float+0x70>
 80089e6:	bf00      	nop
 80089e8:	0800d5c8 	.word	0x0800d5c8
 80089ec:	0800d709 	.word	0x0800d709

080089f0 <std>:
 80089f0:	2300      	movs	r3, #0
 80089f2:	b510      	push	{r4, lr}
 80089f4:	4604      	mov	r4, r0
 80089f6:	e9c0 3300 	strd	r3, r3, [r0]
 80089fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089fe:	6083      	str	r3, [r0, #8]
 8008a00:	8181      	strh	r1, [r0, #12]
 8008a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a04:	81c2      	strh	r2, [r0, #14]
 8008a06:	6183      	str	r3, [r0, #24]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	2208      	movs	r2, #8
 8008a0c:	305c      	adds	r0, #92	@ 0x5c
 8008a0e:	f000 f94c 	bl	8008caa <memset>
 8008a12:	4b0d      	ldr	r3, [pc, #52]	@ (8008a48 <std+0x58>)
 8008a14:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a16:	4b0d      	ldr	r3, [pc, #52]	@ (8008a4c <std+0x5c>)
 8008a18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a50 <std+0x60>)
 8008a1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a54 <std+0x64>)
 8008a20:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a22:	4b0d      	ldr	r3, [pc, #52]	@ (8008a58 <std+0x68>)
 8008a24:	6224      	str	r4, [r4, #32]
 8008a26:	429c      	cmp	r4, r3
 8008a28:	d006      	beq.n	8008a38 <std+0x48>
 8008a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a2e:	4294      	cmp	r4, r2
 8008a30:	d002      	beq.n	8008a38 <std+0x48>
 8008a32:	33d0      	adds	r3, #208	@ 0xd0
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d105      	bne.n	8008a44 <std+0x54>
 8008a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a40:	f000 b9bc 	b.w	8008dbc <__retarget_lock_init_recursive>
 8008a44:	bd10      	pop	{r4, pc}
 8008a46:	bf00      	nop
 8008a48:	08008c25 	.word	0x08008c25
 8008a4c:	08008c47 	.word	0x08008c47
 8008a50:	08008c7f 	.word	0x08008c7f
 8008a54:	08008ca3 	.word	0x08008ca3
 8008a58:	200035a4 	.word	0x200035a4

08008a5c <stdio_exit_handler>:
 8008a5c:	4a02      	ldr	r2, [pc, #8]	@ (8008a68 <stdio_exit_handler+0xc>)
 8008a5e:	4903      	ldr	r1, [pc, #12]	@ (8008a6c <stdio_exit_handler+0x10>)
 8008a60:	4803      	ldr	r0, [pc, #12]	@ (8008a70 <stdio_exit_handler+0x14>)
 8008a62:	f000 b869 	b.w	8008b38 <_fwalk_sglue>
 8008a66:	bf00      	nop
 8008a68:	20000010 	.word	0x20000010
 8008a6c:	0800b6b5 	.word	0x0800b6b5
 8008a70:	20000020 	.word	0x20000020

08008a74 <cleanup_stdio>:
 8008a74:	6841      	ldr	r1, [r0, #4]
 8008a76:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa8 <cleanup_stdio+0x34>)
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	d001      	beq.n	8008a84 <cleanup_stdio+0x10>
 8008a80:	f002 fe18 	bl	800b6b4 <_fflush_r>
 8008a84:	68a1      	ldr	r1, [r4, #8]
 8008a86:	4b09      	ldr	r3, [pc, #36]	@ (8008aac <cleanup_stdio+0x38>)
 8008a88:	4299      	cmp	r1, r3
 8008a8a:	d002      	beq.n	8008a92 <cleanup_stdio+0x1e>
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f002 fe11 	bl	800b6b4 <_fflush_r>
 8008a92:	68e1      	ldr	r1, [r4, #12]
 8008a94:	4b06      	ldr	r3, [pc, #24]	@ (8008ab0 <cleanup_stdio+0x3c>)
 8008a96:	4299      	cmp	r1, r3
 8008a98:	d004      	beq.n	8008aa4 <cleanup_stdio+0x30>
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa0:	f002 be08 	b.w	800b6b4 <_fflush_r>
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200035a4 	.word	0x200035a4
 8008aac:	2000360c 	.word	0x2000360c
 8008ab0:	20003674 	.word	0x20003674

08008ab4 <global_stdio_init.part.0>:
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae4 <global_stdio_init.part.0+0x30>)
 8008ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8008ae8 <global_stdio_init.part.0+0x34>)
 8008aba:	4a0c      	ldr	r2, [pc, #48]	@ (8008aec <global_stdio_init.part.0+0x38>)
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2104      	movs	r1, #4
 8008ac4:	f7ff ff94 	bl	80089f0 <std>
 8008ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008acc:	2201      	movs	r2, #1
 8008ace:	2109      	movs	r1, #9
 8008ad0:	f7ff ff8e 	bl	80089f0 <std>
 8008ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ad8:	2202      	movs	r2, #2
 8008ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ade:	2112      	movs	r1, #18
 8008ae0:	f7ff bf86 	b.w	80089f0 <std>
 8008ae4:	200036dc 	.word	0x200036dc
 8008ae8:	200035a4 	.word	0x200035a4
 8008aec:	08008a5d 	.word	0x08008a5d

08008af0 <__sfp_lock_acquire>:
 8008af0:	4801      	ldr	r0, [pc, #4]	@ (8008af8 <__sfp_lock_acquire+0x8>)
 8008af2:	f000 b964 	b.w	8008dbe <__retarget_lock_acquire_recursive>
 8008af6:	bf00      	nop
 8008af8:	200036e5 	.word	0x200036e5

08008afc <__sfp_lock_release>:
 8008afc:	4801      	ldr	r0, [pc, #4]	@ (8008b04 <__sfp_lock_release+0x8>)
 8008afe:	f000 b95f 	b.w	8008dc0 <__retarget_lock_release_recursive>
 8008b02:	bf00      	nop
 8008b04:	200036e5 	.word	0x200036e5

08008b08 <__sinit>:
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	f7ff fff0 	bl	8008af0 <__sfp_lock_acquire>
 8008b10:	6a23      	ldr	r3, [r4, #32]
 8008b12:	b11b      	cbz	r3, 8008b1c <__sinit+0x14>
 8008b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b18:	f7ff bff0 	b.w	8008afc <__sfp_lock_release>
 8008b1c:	4b04      	ldr	r3, [pc, #16]	@ (8008b30 <__sinit+0x28>)
 8008b1e:	6223      	str	r3, [r4, #32]
 8008b20:	4b04      	ldr	r3, [pc, #16]	@ (8008b34 <__sinit+0x2c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1f5      	bne.n	8008b14 <__sinit+0xc>
 8008b28:	f7ff ffc4 	bl	8008ab4 <global_stdio_init.part.0>
 8008b2c:	e7f2      	b.n	8008b14 <__sinit+0xc>
 8008b2e:	bf00      	nop
 8008b30:	08008a75 	.word	0x08008a75
 8008b34:	200036dc 	.word	0x200036dc

08008b38 <_fwalk_sglue>:
 8008b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	4688      	mov	r8, r1
 8008b40:	4614      	mov	r4, r2
 8008b42:	2600      	movs	r6, #0
 8008b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b48:	f1b9 0901 	subs.w	r9, r9, #1
 8008b4c:	d505      	bpl.n	8008b5a <_fwalk_sglue+0x22>
 8008b4e:	6824      	ldr	r4, [r4, #0]
 8008b50:	2c00      	cmp	r4, #0
 8008b52:	d1f7      	bne.n	8008b44 <_fwalk_sglue+0xc>
 8008b54:	4630      	mov	r0, r6
 8008b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b5a:	89ab      	ldrh	r3, [r5, #12]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d907      	bls.n	8008b70 <_fwalk_sglue+0x38>
 8008b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b64:	3301      	adds	r3, #1
 8008b66:	d003      	beq.n	8008b70 <_fwalk_sglue+0x38>
 8008b68:	4629      	mov	r1, r5
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	47c0      	blx	r8
 8008b6e:	4306      	orrs	r6, r0
 8008b70:	3568      	adds	r5, #104	@ 0x68
 8008b72:	e7e9      	b.n	8008b48 <_fwalk_sglue+0x10>

08008b74 <sniprintf>:
 8008b74:	b40c      	push	{r2, r3}
 8008b76:	b530      	push	{r4, r5, lr}
 8008b78:	4b18      	ldr	r3, [pc, #96]	@ (8008bdc <sniprintf+0x68>)
 8008b7a:	1e0c      	subs	r4, r1, #0
 8008b7c:	681d      	ldr	r5, [r3, #0]
 8008b7e:	b09d      	sub	sp, #116	@ 0x74
 8008b80:	da08      	bge.n	8008b94 <sniprintf+0x20>
 8008b82:	238b      	movs	r3, #139	@ 0x8b
 8008b84:	602b      	str	r3, [r5, #0]
 8008b86:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8a:	b01d      	add	sp, #116	@ 0x74
 8008b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b90:	b002      	add	sp, #8
 8008b92:	4770      	bx	lr
 8008b94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008b98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b9c:	f04f 0300 	mov.w	r3, #0
 8008ba0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008ba2:	bf14      	ite	ne
 8008ba4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ba8:	4623      	moveq	r3, r4
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	9307      	str	r3, [sp, #28]
 8008bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008bb2:	9002      	str	r0, [sp, #8]
 8008bb4:	9006      	str	r0, [sp, #24]
 8008bb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008bba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008bbc:	ab21      	add	r3, sp, #132	@ 0x84
 8008bbe:	a902      	add	r1, sp, #8
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	f002 fbf6 	bl	800b3b4 <_svfiprintf_r>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	bfbc      	itt	lt
 8008bcc:	238b      	movlt	r3, #139	@ 0x8b
 8008bce:	602b      	strlt	r3, [r5, #0]
 8008bd0:	2c00      	cmp	r4, #0
 8008bd2:	d0da      	beq.n	8008b8a <sniprintf+0x16>
 8008bd4:	9b02      	ldr	r3, [sp, #8]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	e7d6      	b.n	8008b8a <sniprintf+0x16>
 8008bdc:	2000001c 	.word	0x2000001c

08008be0 <siprintf>:
 8008be0:	b40e      	push	{r1, r2, r3}
 8008be2:	b510      	push	{r4, lr}
 8008be4:	b09d      	sub	sp, #116	@ 0x74
 8008be6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008be8:	9002      	str	r0, [sp, #8]
 8008bea:	9006      	str	r0, [sp, #24]
 8008bec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008bf0:	480a      	ldr	r0, [pc, #40]	@ (8008c1c <siprintf+0x3c>)
 8008bf2:	9107      	str	r1, [sp, #28]
 8008bf4:	9104      	str	r1, [sp, #16]
 8008bf6:	490a      	ldr	r1, [pc, #40]	@ (8008c20 <siprintf+0x40>)
 8008bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfc:	9105      	str	r1, [sp, #20]
 8008bfe:	2400      	movs	r4, #0
 8008c00:	a902      	add	r1, sp, #8
 8008c02:	6800      	ldr	r0, [r0, #0]
 8008c04:	9301      	str	r3, [sp, #4]
 8008c06:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008c08:	f002 fbd4 	bl	800b3b4 <_svfiprintf_r>
 8008c0c:	9b02      	ldr	r3, [sp, #8]
 8008c0e:	701c      	strb	r4, [r3, #0]
 8008c10:	b01d      	add	sp, #116	@ 0x74
 8008c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c16:	b003      	add	sp, #12
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	2000001c 	.word	0x2000001c
 8008c20:	ffff0208 	.word	0xffff0208

08008c24 <__sread>:
 8008c24:	b510      	push	{r4, lr}
 8008c26:	460c      	mov	r4, r1
 8008c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2c:	f000 f878 	bl	8008d20 <_read_r>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	bfab      	itete	ge
 8008c34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c36:	89a3      	ldrhlt	r3, [r4, #12]
 8008c38:	181b      	addge	r3, r3, r0
 8008c3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c3e:	bfac      	ite	ge
 8008c40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c42:	81a3      	strhlt	r3, [r4, #12]
 8008c44:	bd10      	pop	{r4, pc}

08008c46 <__swrite>:
 8008c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4a:	461f      	mov	r7, r3
 8008c4c:	898b      	ldrh	r3, [r1, #12]
 8008c4e:	05db      	lsls	r3, r3, #23
 8008c50:	4605      	mov	r5, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	4616      	mov	r6, r2
 8008c56:	d505      	bpl.n	8008c64 <__swrite+0x1e>
 8008c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f000 f84c 	bl	8008cfc <_lseek_r>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	4632      	mov	r2, r6
 8008c72:	463b      	mov	r3, r7
 8008c74:	4628      	mov	r0, r5
 8008c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7a:	f000 b863 	b.w	8008d44 <_write_r>

08008c7e <__sseek>:
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	460c      	mov	r4, r1
 8008c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c86:	f000 f839 	bl	8008cfc <_lseek_r>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	bf15      	itete	ne
 8008c90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008c92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008c96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008c9a:	81a3      	strheq	r3, [r4, #12]
 8008c9c:	bf18      	it	ne
 8008c9e:	81a3      	strhne	r3, [r4, #12]
 8008ca0:	bd10      	pop	{r4, pc}

08008ca2 <__sclose>:
 8008ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca6:	f000 b819 	b.w	8008cdc <_close_r>

08008caa <memset>:
 8008caa:	4402      	add	r2, r0
 8008cac:	4603      	mov	r3, r0
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d100      	bne.n	8008cb4 <memset+0xa>
 8008cb2:	4770      	bx	lr
 8008cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8008cb8:	e7f9      	b.n	8008cae <memset+0x4>

08008cba <strnlen>:
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	4401      	add	r1, r0
 8008cc0:	428a      	cmp	r2, r1
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	d003      	beq.n	8008cce <strnlen+0x14>
 8008cc6:	781c      	ldrb	r4, [r3, #0]
 8008cc8:	3201      	adds	r2, #1
 8008cca:	2c00      	cmp	r4, #0
 8008ccc:	d1f8      	bne.n	8008cc0 <strnlen+0x6>
 8008cce:	1a18      	subs	r0, r3, r0
 8008cd0:	bd10      	pop	{r4, pc}
	...

08008cd4 <_localeconv_r>:
 8008cd4:	4800      	ldr	r0, [pc, #0]	@ (8008cd8 <_localeconv_r+0x4>)
 8008cd6:	4770      	bx	lr
 8008cd8:	2000015c 	.word	0x2000015c

08008cdc <_close_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d06      	ldr	r5, [pc, #24]	@ (8008cf8 <_close_r+0x1c>)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	f7fb f94a 	bl	8003f80 <_close>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d102      	bne.n	8008cf6 <_close_r+0x1a>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b103      	cbz	r3, 8008cf6 <_close_r+0x1a>
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	200036e0 	.word	0x200036e0

08008cfc <_lseek_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d07      	ldr	r5, [pc, #28]	@ (8008d1c <_lseek_r+0x20>)
 8008d00:	4604      	mov	r4, r0
 8008d02:	4608      	mov	r0, r1
 8008d04:	4611      	mov	r1, r2
 8008d06:	2200      	movs	r2, #0
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f7fb f95f 	bl	8003fce <_lseek>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_lseek_r+0x1e>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_lseek_r+0x1e>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	200036e0 	.word	0x200036e0

08008d20 <_read_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	@ (8008d40 <_read_r+0x20>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7fb f8ed 	bl	8003f0e <_read>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_read_r+0x1e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_read_r+0x1e>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	200036e0 	.word	0x200036e0

08008d44 <_write_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d07      	ldr	r5, [pc, #28]	@ (8008d64 <_write_r+0x20>)
 8008d48:	4604      	mov	r4, r0
 8008d4a:	4608      	mov	r0, r1
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	602a      	str	r2, [r5, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f7fb f8f8 	bl	8003f48 <_write>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_write_r+0x1e>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_write_r+0x1e>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	200036e0 	.word	0x200036e0

08008d68 <__errno>:
 8008d68:	4b01      	ldr	r3, [pc, #4]	@ (8008d70 <__errno+0x8>)
 8008d6a:	6818      	ldr	r0, [r3, #0]
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	2000001c 	.word	0x2000001c

08008d74 <__libc_init_array>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	4d0d      	ldr	r5, [pc, #52]	@ (8008dac <__libc_init_array+0x38>)
 8008d78:	4c0d      	ldr	r4, [pc, #52]	@ (8008db0 <__libc_init_array+0x3c>)
 8008d7a:	1b64      	subs	r4, r4, r5
 8008d7c:	10a4      	asrs	r4, r4, #2
 8008d7e:	2600      	movs	r6, #0
 8008d80:	42a6      	cmp	r6, r4
 8008d82:	d109      	bne.n	8008d98 <__libc_init_array+0x24>
 8008d84:	4d0b      	ldr	r5, [pc, #44]	@ (8008db4 <__libc_init_array+0x40>)
 8008d86:	4c0c      	ldr	r4, [pc, #48]	@ (8008db8 <__libc_init_array+0x44>)
 8008d88:	f004 fb9e 	bl	800d4c8 <_init>
 8008d8c:	1b64      	subs	r4, r4, r5
 8008d8e:	10a4      	asrs	r4, r4, #2
 8008d90:	2600      	movs	r6, #0
 8008d92:	42a6      	cmp	r6, r4
 8008d94:	d105      	bne.n	8008da2 <__libc_init_array+0x2e>
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d9c:	4798      	blx	r3
 8008d9e:	3601      	adds	r6, #1
 8008da0:	e7ee      	b.n	8008d80 <__libc_init_array+0xc>
 8008da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da6:	4798      	blx	r3
 8008da8:	3601      	adds	r6, #1
 8008daa:	e7f2      	b.n	8008d92 <__libc_init_array+0x1e>
 8008dac:	0800dba0 	.word	0x0800dba0
 8008db0:	0800dba0 	.word	0x0800dba0
 8008db4:	0800dba0 	.word	0x0800dba0
 8008db8:	0800dba4 	.word	0x0800dba4

08008dbc <__retarget_lock_init_recursive>:
 8008dbc:	4770      	bx	lr

08008dbe <__retarget_lock_acquire_recursive>:
 8008dbe:	4770      	bx	lr

08008dc0 <__retarget_lock_release_recursive>:
 8008dc0:	4770      	bx	lr

08008dc2 <memcpy>:
 8008dc2:	440a      	add	r2, r1
 8008dc4:	4291      	cmp	r1, r2
 8008dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dca:	d100      	bne.n	8008dce <memcpy+0xc>
 8008dcc:	4770      	bx	lr
 8008dce:	b510      	push	{r4, lr}
 8008dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dd8:	4291      	cmp	r1, r2
 8008dda:	d1f9      	bne.n	8008dd0 <memcpy+0xe>
 8008ddc:	bd10      	pop	{r4, pc}
	...

08008de0 <nanf>:
 8008de0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008de8 <nanf+0x8>
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	7fc00000 	.word	0x7fc00000

08008dec <quorem>:
 8008dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	6903      	ldr	r3, [r0, #16]
 8008df2:	690c      	ldr	r4, [r1, #16]
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	4607      	mov	r7, r0
 8008df8:	db7e      	blt.n	8008ef8 <quorem+0x10c>
 8008dfa:	3c01      	subs	r4, #1
 8008dfc:	f101 0814 	add.w	r8, r1, #20
 8008e00:	00a3      	lsls	r3, r4, #2
 8008e02:	f100 0514 	add.w	r5, r0, #20
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e16:	3301      	adds	r3, #1
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e22:	d32e      	bcc.n	8008e82 <quorem+0x96>
 8008e24:	f04f 0a00 	mov.w	sl, #0
 8008e28:	46c4      	mov	ip, r8
 8008e2a:	46ae      	mov	lr, r5
 8008e2c:	46d3      	mov	fp, sl
 8008e2e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e32:	b298      	uxth	r0, r3
 8008e34:	fb06 a000 	mla	r0, r6, r0, sl
 8008e38:	0c02      	lsrs	r2, r0, #16
 8008e3a:	0c1b      	lsrs	r3, r3, #16
 8008e3c:	fb06 2303 	mla	r3, r6, r3, r2
 8008e40:	f8de 2000 	ldr.w	r2, [lr]
 8008e44:	b280      	uxth	r0, r0
 8008e46:	b292      	uxth	r2, r2
 8008e48:	1a12      	subs	r2, r2, r0
 8008e4a:	445a      	add	r2, fp
 8008e4c:	f8de 0000 	ldr.w	r0, [lr]
 8008e50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e5a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e5e:	b292      	uxth	r2, r2
 8008e60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e64:	45e1      	cmp	r9, ip
 8008e66:	f84e 2b04 	str.w	r2, [lr], #4
 8008e6a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e6e:	d2de      	bcs.n	8008e2e <quorem+0x42>
 8008e70:	9b00      	ldr	r3, [sp, #0]
 8008e72:	58eb      	ldr	r3, [r5, r3]
 8008e74:	b92b      	cbnz	r3, 8008e82 <quorem+0x96>
 8008e76:	9b01      	ldr	r3, [sp, #4]
 8008e78:	3b04      	subs	r3, #4
 8008e7a:	429d      	cmp	r5, r3
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	d32f      	bcc.n	8008ee0 <quorem+0xf4>
 8008e80:	613c      	str	r4, [r7, #16]
 8008e82:	4638      	mov	r0, r7
 8008e84:	f001 f9c8 	bl	800a218 <__mcmp>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	db25      	blt.n	8008ed8 <quorem+0xec>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e94:	f8d1 c000 	ldr.w	ip, [r1]
 8008e98:	fa1f fe82 	uxth.w	lr, r2
 8008e9c:	fa1f f38c 	uxth.w	r3, ip
 8008ea0:	eba3 030e 	sub.w	r3, r3, lr
 8008ea4:	4403      	add	r3, r0
 8008ea6:	0c12      	lsrs	r2, r2, #16
 8008ea8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008eac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eb6:	45c1      	cmp	r9, r8
 8008eb8:	f841 3b04 	str.w	r3, [r1], #4
 8008ebc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ec0:	d2e6      	bcs.n	8008e90 <quorem+0xa4>
 8008ec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eca:	b922      	cbnz	r2, 8008ed6 <quorem+0xea>
 8008ecc:	3b04      	subs	r3, #4
 8008ece:	429d      	cmp	r5, r3
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	d30b      	bcc.n	8008eec <quorem+0x100>
 8008ed4:	613c      	str	r4, [r7, #16]
 8008ed6:	3601      	adds	r6, #1
 8008ed8:	4630      	mov	r0, r6
 8008eda:	b003      	add	sp, #12
 8008edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee0:	6812      	ldr	r2, [r2, #0]
 8008ee2:	3b04      	subs	r3, #4
 8008ee4:	2a00      	cmp	r2, #0
 8008ee6:	d1cb      	bne.n	8008e80 <quorem+0x94>
 8008ee8:	3c01      	subs	r4, #1
 8008eea:	e7c6      	b.n	8008e7a <quorem+0x8e>
 8008eec:	6812      	ldr	r2, [r2, #0]
 8008eee:	3b04      	subs	r3, #4
 8008ef0:	2a00      	cmp	r2, #0
 8008ef2:	d1ef      	bne.n	8008ed4 <quorem+0xe8>
 8008ef4:	3c01      	subs	r4, #1
 8008ef6:	e7ea      	b.n	8008ece <quorem+0xe2>
 8008ef8:	2000      	movs	r0, #0
 8008efa:	e7ee      	b.n	8008eda <quorem+0xee>
 8008efc:	0000      	movs	r0, r0
	...

08008f00 <_dtoa_r>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	69c7      	ldr	r7, [r0, #28]
 8008f06:	b097      	sub	sp, #92	@ 0x5c
 8008f08:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008f0c:	ec55 4b10 	vmov	r4, r5, d0
 8008f10:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008f12:	9107      	str	r1, [sp, #28]
 8008f14:	4681      	mov	r9, r0
 8008f16:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f18:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f1a:	b97f      	cbnz	r7, 8008f3c <_dtoa_r+0x3c>
 8008f1c:	2010      	movs	r0, #16
 8008f1e:	f000 fe09 	bl	8009b34 <malloc>
 8008f22:	4602      	mov	r2, r0
 8008f24:	f8c9 001c 	str.w	r0, [r9, #28]
 8008f28:	b920      	cbnz	r0, 8008f34 <_dtoa_r+0x34>
 8008f2a:	4ba9      	ldr	r3, [pc, #676]	@ (80091d0 <_dtoa_r+0x2d0>)
 8008f2c:	21ef      	movs	r1, #239	@ 0xef
 8008f2e:	48a9      	ldr	r0, [pc, #676]	@ (80091d4 <_dtoa_r+0x2d4>)
 8008f30:	f002 fc2e 	bl	800b790 <__assert_func>
 8008f34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f38:	6007      	str	r7, [r0, #0]
 8008f3a:	60c7      	str	r7, [r0, #12]
 8008f3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f40:	6819      	ldr	r1, [r3, #0]
 8008f42:	b159      	cbz	r1, 8008f5c <_dtoa_r+0x5c>
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	604a      	str	r2, [r1, #4]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4093      	lsls	r3, r2
 8008f4c:	608b      	str	r3, [r1, #8]
 8008f4e:	4648      	mov	r0, r9
 8008f50:	f000 fee6 	bl	8009d20 <_Bfree>
 8008f54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	1e2b      	subs	r3, r5, #0
 8008f5e:	bfb9      	ittee	lt
 8008f60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f64:	9305      	strlt	r3, [sp, #20]
 8008f66:	2300      	movge	r3, #0
 8008f68:	6033      	strge	r3, [r6, #0]
 8008f6a:	9f05      	ldr	r7, [sp, #20]
 8008f6c:	4b9a      	ldr	r3, [pc, #616]	@ (80091d8 <_dtoa_r+0x2d8>)
 8008f6e:	bfbc      	itt	lt
 8008f70:	2201      	movlt	r2, #1
 8008f72:	6032      	strlt	r2, [r6, #0]
 8008f74:	43bb      	bics	r3, r7
 8008f76:	d112      	bne.n	8008f9e <_dtoa_r+0x9e>
 8008f78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008f7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f84:	4323      	orrs	r3, r4
 8008f86:	f000 855a 	beq.w	8009a3e <_dtoa_r+0xb3e>
 8008f8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f8c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80091ec <_dtoa_r+0x2ec>
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 855c 	beq.w	8009a4e <_dtoa_r+0xb4e>
 8008f96:	f10a 0303 	add.w	r3, sl, #3
 8008f9a:	f000 bd56 	b.w	8009a4a <_dtoa_r+0xb4a>
 8008f9e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	ec51 0b17 	vmov	r0, r1, d7
 8008fa8:	2300      	movs	r3, #0
 8008faa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008fae:	f7f7 fdab 	bl	8000b08 <__aeabi_dcmpeq>
 8008fb2:	4680      	mov	r8, r0
 8008fb4:	b158      	cbz	r0, 8008fce <_dtoa_r+0xce>
 8008fb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008fb8:	2301      	movs	r3, #1
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fbe:	b113      	cbz	r3, 8008fc6 <_dtoa_r+0xc6>
 8008fc0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008fc2:	4b86      	ldr	r3, [pc, #536]	@ (80091dc <_dtoa_r+0x2dc>)
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80091f0 <_dtoa_r+0x2f0>
 8008fca:	f000 bd40 	b.w	8009a4e <_dtoa_r+0xb4e>
 8008fce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008fd2:	aa14      	add	r2, sp, #80	@ 0x50
 8008fd4:	a915      	add	r1, sp, #84	@ 0x54
 8008fd6:	4648      	mov	r0, r9
 8008fd8:	f001 fa3e 	bl	800a458 <__d2b>
 8008fdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008fe0:	9002      	str	r0, [sp, #8]
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	d078      	beq.n	80090d8 <_dtoa_r+0x1d8>
 8008fe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fe8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ff4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ff8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ffc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009000:	4619      	mov	r1, r3
 8009002:	2200      	movs	r2, #0
 8009004:	4b76      	ldr	r3, [pc, #472]	@ (80091e0 <_dtoa_r+0x2e0>)
 8009006:	f7f7 f95f 	bl	80002c8 <__aeabi_dsub>
 800900a:	a36b      	add	r3, pc, #428	@ (adr r3, 80091b8 <_dtoa_r+0x2b8>)
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	f7f7 fb12 	bl	8000638 <__aeabi_dmul>
 8009014:	a36a      	add	r3, pc, #424	@ (adr r3, 80091c0 <_dtoa_r+0x2c0>)
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	f7f7 f957 	bl	80002cc <__adddf3>
 800901e:	4604      	mov	r4, r0
 8009020:	4630      	mov	r0, r6
 8009022:	460d      	mov	r5, r1
 8009024:	f7f7 fa9e 	bl	8000564 <__aeabi_i2d>
 8009028:	a367      	add	r3, pc, #412	@ (adr r3, 80091c8 <_dtoa_r+0x2c8>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 fb03 	bl	8000638 <__aeabi_dmul>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4620      	mov	r0, r4
 8009038:	4629      	mov	r1, r5
 800903a:	f7f7 f947 	bl	80002cc <__adddf3>
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	f7f7 fda9 	bl	8000b98 <__aeabi_d2iz>
 8009046:	2200      	movs	r2, #0
 8009048:	4607      	mov	r7, r0
 800904a:	2300      	movs	r3, #0
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 fd64 	bl	8000b1c <__aeabi_dcmplt>
 8009054:	b140      	cbz	r0, 8009068 <_dtoa_r+0x168>
 8009056:	4638      	mov	r0, r7
 8009058:	f7f7 fa84 	bl	8000564 <__aeabi_i2d>
 800905c:	4622      	mov	r2, r4
 800905e:	462b      	mov	r3, r5
 8009060:	f7f7 fd52 	bl	8000b08 <__aeabi_dcmpeq>
 8009064:	b900      	cbnz	r0, 8009068 <_dtoa_r+0x168>
 8009066:	3f01      	subs	r7, #1
 8009068:	2f16      	cmp	r7, #22
 800906a:	d852      	bhi.n	8009112 <_dtoa_r+0x212>
 800906c:	4b5d      	ldr	r3, [pc, #372]	@ (80091e4 <_dtoa_r+0x2e4>)
 800906e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800907a:	f7f7 fd4f 	bl	8000b1c <__aeabi_dcmplt>
 800907e:	2800      	cmp	r0, #0
 8009080:	d049      	beq.n	8009116 <_dtoa_r+0x216>
 8009082:	3f01      	subs	r7, #1
 8009084:	2300      	movs	r3, #0
 8009086:	9310      	str	r3, [sp, #64]	@ 0x40
 8009088:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800908a:	1b9b      	subs	r3, r3, r6
 800908c:	1e5a      	subs	r2, r3, #1
 800908e:	bf45      	ittet	mi
 8009090:	f1c3 0301 	rsbmi	r3, r3, #1
 8009094:	9300      	strmi	r3, [sp, #0]
 8009096:	2300      	movpl	r3, #0
 8009098:	2300      	movmi	r3, #0
 800909a:	9206      	str	r2, [sp, #24]
 800909c:	bf54      	ite	pl
 800909e:	9300      	strpl	r3, [sp, #0]
 80090a0:	9306      	strmi	r3, [sp, #24]
 80090a2:	2f00      	cmp	r7, #0
 80090a4:	db39      	blt.n	800911a <_dtoa_r+0x21a>
 80090a6:	9b06      	ldr	r3, [sp, #24]
 80090a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80090aa:	443b      	add	r3, r7
 80090ac:	9306      	str	r3, [sp, #24]
 80090ae:	2300      	movs	r3, #0
 80090b0:	9308      	str	r3, [sp, #32]
 80090b2:	9b07      	ldr	r3, [sp, #28]
 80090b4:	2b09      	cmp	r3, #9
 80090b6:	d863      	bhi.n	8009180 <_dtoa_r+0x280>
 80090b8:	2b05      	cmp	r3, #5
 80090ba:	bfc4      	itt	gt
 80090bc:	3b04      	subgt	r3, #4
 80090be:	9307      	strgt	r3, [sp, #28]
 80090c0:	9b07      	ldr	r3, [sp, #28]
 80090c2:	f1a3 0302 	sub.w	r3, r3, #2
 80090c6:	bfcc      	ite	gt
 80090c8:	2400      	movgt	r4, #0
 80090ca:	2401      	movle	r4, #1
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d863      	bhi.n	8009198 <_dtoa_r+0x298>
 80090d0:	e8df f003 	tbb	[pc, r3]
 80090d4:	2b375452 	.word	0x2b375452
 80090d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80090dc:	441e      	add	r6, r3
 80090de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	bfc1      	itttt	gt
 80090e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80090ea:	409f      	lslgt	r7, r3
 80090ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80090f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80090f4:	bfd6      	itet	le
 80090f6:	f1c3 0320 	rsble	r3, r3, #32
 80090fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80090fe:	fa04 f003 	lslle.w	r0, r4, r3
 8009102:	f7f7 fa1f 	bl	8000544 <__aeabi_ui2d>
 8009106:	2201      	movs	r2, #1
 8009108:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800910c:	3e01      	subs	r6, #1
 800910e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009110:	e776      	b.n	8009000 <_dtoa_r+0x100>
 8009112:	2301      	movs	r3, #1
 8009114:	e7b7      	b.n	8009086 <_dtoa_r+0x186>
 8009116:	9010      	str	r0, [sp, #64]	@ 0x40
 8009118:	e7b6      	b.n	8009088 <_dtoa_r+0x188>
 800911a:	9b00      	ldr	r3, [sp, #0]
 800911c:	1bdb      	subs	r3, r3, r7
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	427b      	negs	r3, r7
 8009122:	9308      	str	r3, [sp, #32]
 8009124:	2300      	movs	r3, #0
 8009126:	930d      	str	r3, [sp, #52]	@ 0x34
 8009128:	e7c3      	b.n	80090b2 <_dtoa_r+0x1b2>
 800912a:	2301      	movs	r3, #1
 800912c:	9309      	str	r3, [sp, #36]	@ 0x24
 800912e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009130:	eb07 0b03 	add.w	fp, r7, r3
 8009134:	f10b 0301 	add.w	r3, fp, #1
 8009138:	2b01      	cmp	r3, #1
 800913a:	9303      	str	r3, [sp, #12]
 800913c:	bfb8      	it	lt
 800913e:	2301      	movlt	r3, #1
 8009140:	e006      	b.n	8009150 <_dtoa_r+0x250>
 8009142:	2301      	movs	r3, #1
 8009144:	9309      	str	r3, [sp, #36]	@ 0x24
 8009146:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009148:	2b00      	cmp	r3, #0
 800914a:	dd28      	ble.n	800919e <_dtoa_r+0x29e>
 800914c:	469b      	mov	fp, r3
 800914e:	9303      	str	r3, [sp, #12]
 8009150:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009154:	2100      	movs	r1, #0
 8009156:	2204      	movs	r2, #4
 8009158:	f102 0514 	add.w	r5, r2, #20
 800915c:	429d      	cmp	r5, r3
 800915e:	d926      	bls.n	80091ae <_dtoa_r+0x2ae>
 8009160:	6041      	str	r1, [r0, #4]
 8009162:	4648      	mov	r0, r9
 8009164:	f000 fd9c 	bl	8009ca0 <_Balloc>
 8009168:	4682      	mov	sl, r0
 800916a:	2800      	cmp	r0, #0
 800916c:	d142      	bne.n	80091f4 <_dtoa_r+0x2f4>
 800916e:	4b1e      	ldr	r3, [pc, #120]	@ (80091e8 <_dtoa_r+0x2e8>)
 8009170:	4602      	mov	r2, r0
 8009172:	f240 11af 	movw	r1, #431	@ 0x1af
 8009176:	e6da      	b.n	8008f2e <_dtoa_r+0x2e>
 8009178:	2300      	movs	r3, #0
 800917a:	e7e3      	b.n	8009144 <_dtoa_r+0x244>
 800917c:	2300      	movs	r3, #0
 800917e:	e7d5      	b.n	800912c <_dtoa_r+0x22c>
 8009180:	2401      	movs	r4, #1
 8009182:	2300      	movs	r3, #0
 8009184:	9307      	str	r3, [sp, #28]
 8009186:	9409      	str	r4, [sp, #36]	@ 0x24
 8009188:	f04f 3bff 	mov.w	fp, #4294967295
 800918c:	2200      	movs	r2, #0
 800918e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009192:	2312      	movs	r3, #18
 8009194:	920c      	str	r2, [sp, #48]	@ 0x30
 8009196:	e7db      	b.n	8009150 <_dtoa_r+0x250>
 8009198:	2301      	movs	r3, #1
 800919a:	9309      	str	r3, [sp, #36]	@ 0x24
 800919c:	e7f4      	b.n	8009188 <_dtoa_r+0x288>
 800919e:	f04f 0b01 	mov.w	fp, #1
 80091a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80091a6:	465b      	mov	r3, fp
 80091a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80091ac:	e7d0      	b.n	8009150 <_dtoa_r+0x250>
 80091ae:	3101      	adds	r1, #1
 80091b0:	0052      	lsls	r2, r2, #1
 80091b2:	e7d1      	b.n	8009158 <_dtoa_r+0x258>
 80091b4:	f3af 8000 	nop.w
 80091b8:	636f4361 	.word	0x636f4361
 80091bc:	3fd287a7 	.word	0x3fd287a7
 80091c0:	8b60c8b3 	.word	0x8b60c8b3
 80091c4:	3fc68a28 	.word	0x3fc68a28
 80091c8:	509f79fb 	.word	0x509f79fb
 80091cc:	3fd34413 	.word	0x3fd34413
 80091d0:	0800d5da 	.word	0x0800d5da
 80091d4:	0800d5f1 	.word	0x0800d5f1
 80091d8:	7ff00000 	.word	0x7ff00000
 80091dc:	0800d5a5 	.word	0x0800d5a5
 80091e0:	3ff80000 	.word	0x3ff80000
 80091e4:	0800d7a0 	.word	0x0800d7a0
 80091e8:	0800d649 	.word	0x0800d649
 80091ec:	0800d5d6 	.word	0x0800d5d6
 80091f0:	0800d5a4 	.word	0x0800d5a4
 80091f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80091f8:	6018      	str	r0, [r3, #0]
 80091fa:	9b03      	ldr	r3, [sp, #12]
 80091fc:	2b0e      	cmp	r3, #14
 80091fe:	f200 80a1 	bhi.w	8009344 <_dtoa_r+0x444>
 8009202:	2c00      	cmp	r4, #0
 8009204:	f000 809e 	beq.w	8009344 <_dtoa_r+0x444>
 8009208:	2f00      	cmp	r7, #0
 800920a:	dd33      	ble.n	8009274 <_dtoa_r+0x374>
 800920c:	4b9c      	ldr	r3, [pc, #624]	@ (8009480 <_dtoa_r+0x580>)
 800920e:	f007 020f 	and.w	r2, r7, #15
 8009212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009216:	ed93 7b00 	vldr	d7, [r3]
 800921a:	05f8      	lsls	r0, r7, #23
 800921c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009220:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009224:	d516      	bpl.n	8009254 <_dtoa_r+0x354>
 8009226:	4b97      	ldr	r3, [pc, #604]	@ (8009484 <_dtoa_r+0x584>)
 8009228:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800922c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009230:	f7f7 fb2c 	bl	800088c <__aeabi_ddiv>
 8009234:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009238:	f004 040f 	and.w	r4, r4, #15
 800923c:	2603      	movs	r6, #3
 800923e:	4d91      	ldr	r5, [pc, #580]	@ (8009484 <_dtoa_r+0x584>)
 8009240:	b954      	cbnz	r4, 8009258 <_dtoa_r+0x358>
 8009242:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800924a:	f7f7 fb1f 	bl	800088c <__aeabi_ddiv>
 800924e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009252:	e028      	b.n	80092a6 <_dtoa_r+0x3a6>
 8009254:	2602      	movs	r6, #2
 8009256:	e7f2      	b.n	800923e <_dtoa_r+0x33e>
 8009258:	07e1      	lsls	r1, r4, #31
 800925a:	d508      	bpl.n	800926e <_dtoa_r+0x36e>
 800925c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009260:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009264:	f7f7 f9e8 	bl	8000638 <__aeabi_dmul>
 8009268:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800926c:	3601      	adds	r6, #1
 800926e:	1064      	asrs	r4, r4, #1
 8009270:	3508      	adds	r5, #8
 8009272:	e7e5      	b.n	8009240 <_dtoa_r+0x340>
 8009274:	f000 80af 	beq.w	80093d6 <_dtoa_r+0x4d6>
 8009278:	427c      	negs	r4, r7
 800927a:	4b81      	ldr	r3, [pc, #516]	@ (8009480 <_dtoa_r+0x580>)
 800927c:	4d81      	ldr	r5, [pc, #516]	@ (8009484 <_dtoa_r+0x584>)
 800927e:	f004 020f 	and.w	r2, r4, #15
 8009282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800928e:	f7f7 f9d3 	bl	8000638 <__aeabi_dmul>
 8009292:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009296:	1124      	asrs	r4, r4, #4
 8009298:	2300      	movs	r3, #0
 800929a:	2602      	movs	r6, #2
 800929c:	2c00      	cmp	r4, #0
 800929e:	f040 808f 	bne.w	80093c0 <_dtoa_r+0x4c0>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1d3      	bne.n	800924e <_dtoa_r+0x34e>
 80092a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 8094 	beq.w	80093da <_dtoa_r+0x4da>
 80092b2:	4b75      	ldr	r3, [pc, #468]	@ (8009488 <_dtoa_r+0x588>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	4620      	mov	r0, r4
 80092b8:	4629      	mov	r1, r5
 80092ba:	f7f7 fc2f 	bl	8000b1c <__aeabi_dcmplt>
 80092be:	2800      	cmp	r0, #0
 80092c0:	f000 808b 	beq.w	80093da <_dtoa_r+0x4da>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 8087 	beq.w	80093da <_dtoa_r+0x4da>
 80092cc:	f1bb 0f00 	cmp.w	fp, #0
 80092d0:	dd34      	ble.n	800933c <_dtoa_r+0x43c>
 80092d2:	4620      	mov	r0, r4
 80092d4:	4b6d      	ldr	r3, [pc, #436]	@ (800948c <_dtoa_r+0x58c>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	4629      	mov	r1, r5
 80092da:	f7f7 f9ad 	bl	8000638 <__aeabi_dmul>
 80092de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80092e6:	3601      	adds	r6, #1
 80092e8:	465c      	mov	r4, fp
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7f7 f93a 	bl	8000564 <__aeabi_i2d>
 80092f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092f4:	f7f7 f9a0 	bl	8000638 <__aeabi_dmul>
 80092f8:	4b65      	ldr	r3, [pc, #404]	@ (8009490 <_dtoa_r+0x590>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	f7f6 ffe6 	bl	80002cc <__adddf3>
 8009300:	4605      	mov	r5, r0
 8009302:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009306:	2c00      	cmp	r4, #0
 8009308:	d16a      	bne.n	80093e0 <_dtoa_r+0x4e0>
 800930a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800930e:	4b61      	ldr	r3, [pc, #388]	@ (8009494 <_dtoa_r+0x594>)
 8009310:	2200      	movs	r2, #0
 8009312:	f7f6 ffd9 	bl	80002c8 <__aeabi_dsub>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800931e:	462a      	mov	r2, r5
 8009320:	4633      	mov	r3, r6
 8009322:	f7f7 fc19 	bl	8000b58 <__aeabi_dcmpgt>
 8009326:	2800      	cmp	r0, #0
 8009328:	f040 8298 	bne.w	800985c <_dtoa_r+0x95c>
 800932c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009330:	462a      	mov	r2, r5
 8009332:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009336:	f7f7 fbf1 	bl	8000b1c <__aeabi_dcmplt>
 800933a:	bb38      	cbnz	r0, 800938c <_dtoa_r+0x48c>
 800933c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009340:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009344:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009346:	2b00      	cmp	r3, #0
 8009348:	f2c0 8157 	blt.w	80095fa <_dtoa_r+0x6fa>
 800934c:	2f0e      	cmp	r7, #14
 800934e:	f300 8154 	bgt.w	80095fa <_dtoa_r+0x6fa>
 8009352:	4b4b      	ldr	r3, [pc, #300]	@ (8009480 <_dtoa_r+0x580>)
 8009354:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009358:	ed93 7b00 	vldr	d7, [r3]
 800935c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800935e:	2b00      	cmp	r3, #0
 8009360:	ed8d 7b00 	vstr	d7, [sp]
 8009364:	f280 80e5 	bge.w	8009532 <_dtoa_r+0x632>
 8009368:	9b03      	ldr	r3, [sp, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	f300 80e1 	bgt.w	8009532 <_dtoa_r+0x632>
 8009370:	d10c      	bne.n	800938c <_dtoa_r+0x48c>
 8009372:	4b48      	ldr	r3, [pc, #288]	@ (8009494 <_dtoa_r+0x594>)
 8009374:	2200      	movs	r2, #0
 8009376:	ec51 0b17 	vmov	r0, r1, d7
 800937a:	f7f7 f95d 	bl	8000638 <__aeabi_dmul>
 800937e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009382:	f7f7 fbdf 	bl	8000b44 <__aeabi_dcmpge>
 8009386:	2800      	cmp	r0, #0
 8009388:	f000 8266 	beq.w	8009858 <_dtoa_r+0x958>
 800938c:	2400      	movs	r4, #0
 800938e:	4625      	mov	r5, r4
 8009390:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009392:	4656      	mov	r6, sl
 8009394:	ea6f 0803 	mvn.w	r8, r3
 8009398:	2700      	movs	r7, #0
 800939a:	4621      	mov	r1, r4
 800939c:	4648      	mov	r0, r9
 800939e:	f000 fcbf 	bl	8009d20 <_Bfree>
 80093a2:	2d00      	cmp	r5, #0
 80093a4:	f000 80bd 	beq.w	8009522 <_dtoa_r+0x622>
 80093a8:	b12f      	cbz	r7, 80093b6 <_dtoa_r+0x4b6>
 80093aa:	42af      	cmp	r7, r5
 80093ac:	d003      	beq.n	80093b6 <_dtoa_r+0x4b6>
 80093ae:	4639      	mov	r1, r7
 80093b0:	4648      	mov	r0, r9
 80093b2:	f000 fcb5 	bl	8009d20 <_Bfree>
 80093b6:	4629      	mov	r1, r5
 80093b8:	4648      	mov	r0, r9
 80093ba:	f000 fcb1 	bl	8009d20 <_Bfree>
 80093be:	e0b0      	b.n	8009522 <_dtoa_r+0x622>
 80093c0:	07e2      	lsls	r2, r4, #31
 80093c2:	d505      	bpl.n	80093d0 <_dtoa_r+0x4d0>
 80093c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093c8:	f7f7 f936 	bl	8000638 <__aeabi_dmul>
 80093cc:	3601      	adds	r6, #1
 80093ce:	2301      	movs	r3, #1
 80093d0:	1064      	asrs	r4, r4, #1
 80093d2:	3508      	adds	r5, #8
 80093d4:	e762      	b.n	800929c <_dtoa_r+0x39c>
 80093d6:	2602      	movs	r6, #2
 80093d8:	e765      	b.n	80092a6 <_dtoa_r+0x3a6>
 80093da:	9c03      	ldr	r4, [sp, #12]
 80093dc:	46b8      	mov	r8, r7
 80093de:	e784      	b.n	80092ea <_dtoa_r+0x3ea>
 80093e0:	4b27      	ldr	r3, [pc, #156]	@ (8009480 <_dtoa_r+0x580>)
 80093e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093ec:	4454      	add	r4, sl
 80093ee:	2900      	cmp	r1, #0
 80093f0:	d054      	beq.n	800949c <_dtoa_r+0x59c>
 80093f2:	4929      	ldr	r1, [pc, #164]	@ (8009498 <_dtoa_r+0x598>)
 80093f4:	2000      	movs	r0, #0
 80093f6:	f7f7 fa49 	bl	800088c <__aeabi_ddiv>
 80093fa:	4633      	mov	r3, r6
 80093fc:	462a      	mov	r2, r5
 80093fe:	f7f6 ff63 	bl	80002c8 <__aeabi_dsub>
 8009402:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009406:	4656      	mov	r6, sl
 8009408:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800940c:	f7f7 fbc4 	bl	8000b98 <__aeabi_d2iz>
 8009410:	4605      	mov	r5, r0
 8009412:	f7f7 f8a7 	bl	8000564 <__aeabi_i2d>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800941e:	f7f6 ff53 	bl	80002c8 <__aeabi_dsub>
 8009422:	3530      	adds	r5, #48	@ 0x30
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800942c:	f806 5b01 	strb.w	r5, [r6], #1
 8009430:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009434:	f7f7 fb72 	bl	8000b1c <__aeabi_dcmplt>
 8009438:	2800      	cmp	r0, #0
 800943a:	d172      	bne.n	8009522 <_dtoa_r+0x622>
 800943c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009440:	4911      	ldr	r1, [pc, #68]	@ (8009488 <_dtoa_r+0x588>)
 8009442:	2000      	movs	r0, #0
 8009444:	f7f6 ff40 	bl	80002c8 <__aeabi_dsub>
 8009448:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800944c:	f7f7 fb66 	bl	8000b1c <__aeabi_dcmplt>
 8009450:	2800      	cmp	r0, #0
 8009452:	f040 80b4 	bne.w	80095be <_dtoa_r+0x6be>
 8009456:	42a6      	cmp	r6, r4
 8009458:	f43f af70 	beq.w	800933c <_dtoa_r+0x43c>
 800945c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009460:	4b0a      	ldr	r3, [pc, #40]	@ (800948c <_dtoa_r+0x58c>)
 8009462:	2200      	movs	r2, #0
 8009464:	f7f7 f8e8 	bl	8000638 <__aeabi_dmul>
 8009468:	4b08      	ldr	r3, [pc, #32]	@ (800948c <_dtoa_r+0x58c>)
 800946a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800946e:	2200      	movs	r2, #0
 8009470:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009474:	f7f7 f8e0 	bl	8000638 <__aeabi_dmul>
 8009478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800947c:	e7c4      	b.n	8009408 <_dtoa_r+0x508>
 800947e:	bf00      	nop
 8009480:	0800d7a0 	.word	0x0800d7a0
 8009484:	0800d778 	.word	0x0800d778
 8009488:	3ff00000 	.word	0x3ff00000
 800948c:	40240000 	.word	0x40240000
 8009490:	401c0000 	.word	0x401c0000
 8009494:	40140000 	.word	0x40140000
 8009498:	3fe00000 	.word	0x3fe00000
 800949c:	4631      	mov	r1, r6
 800949e:	4628      	mov	r0, r5
 80094a0:	f7f7 f8ca 	bl	8000638 <__aeabi_dmul>
 80094a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80094aa:	4656      	mov	r6, sl
 80094ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094b0:	f7f7 fb72 	bl	8000b98 <__aeabi_d2iz>
 80094b4:	4605      	mov	r5, r0
 80094b6:	f7f7 f855 	bl	8000564 <__aeabi_i2d>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094c2:	f7f6 ff01 	bl	80002c8 <__aeabi_dsub>
 80094c6:	3530      	adds	r5, #48	@ 0x30
 80094c8:	f806 5b01 	strb.w	r5, [r6], #1
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	42a6      	cmp	r6, r4
 80094d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094d6:	f04f 0200 	mov.w	r2, #0
 80094da:	d124      	bne.n	8009526 <_dtoa_r+0x626>
 80094dc:	4baf      	ldr	r3, [pc, #700]	@ (800979c <_dtoa_r+0x89c>)
 80094de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80094e2:	f7f6 fef3 	bl	80002cc <__adddf3>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094ee:	f7f7 fb33 	bl	8000b58 <__aeabi_dcmpgt>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d163      	bne.n	80095be <_dtoa_r+0x6be>
 80094f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094fa:	49a8      	ldr	r1, [pc, #672]	@ (800979c <_dtoa_r+0x89c>)
 80094fc:	2000      	movs	r0, #0
 80094fe:	f7f6 fee3 	bl	80002c8 <__aeabi_dsub>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800950a:	f7f7 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800950e:	2800      	cmp	r0, #0
 8009510:	f43f af14 	beq.w	800933c <_dtoa_r+0x43c>
 8009514:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009516:	1e73      	subs	r3, r6, #1
 8009518:	9313      	str	r3, [sp, #76]	@ 0x4c
 800951a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800951e:	2b30      	cmp	r3, #48	@ 0x30
 8009520:	d0f8      	beq.n	8009514 <_dtoa_r+0x614>
 8009522:	4647      	mov	r7, r8
 8009524:	e03b      	b.n	800959e <_dtoa_r+0x69e>
 8009526:	4b9e      	ldr	r3, [pc, #632]	@ (80097a0 <_dtoa_r+0x8a0>)
 8009528:	f7f7 f886 	bl	8000638 <__aeabi_dmul>
 800952c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009530:	e7bc      	b.n	80094ac <_dtoa_r+0x5ac>
 8009532:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009536:	4656      	mov	r6, sl
 8009538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800953c:	4620      	mov	r0, r4
 800953e:	4629      	mov	r1, r5
 8009540:	f7f7 f9a4 	bl	800088c <__aeabi_ddiv>
 8009544:	f7f7 fb28 	bl	8000b98 <__aeabi_d2iz>
 8009548:	4680      	mov	r8, r0
 800954a:	f7f7 f80b 	bl	8000564 <__aeabi_i2d>
 800954e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009552:	f7f7 f871 	bl	8000638 <__aeabi_dmul>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4620      	mov	r0, r4
 800955c:	4629      	mov	r1, r5
 800955e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009562:	f7f6 feb1 	bl	80002c8 <__aeabi_dsub>
 8009566:	f806 4b01 	strb.w	r4, [r6], #1
 800956a:	9d03      	ldr	r5, [sp, #12]
 800956c:	eba6 040a 	sub.w	r4, r6, sl
 8009570:	42a5      	cmp	r5, r4
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	d133      	bne.n	80095e0 <_dtoa_r+0x6e0>
 8009578:	f7f6 fea8 	bl	80002cc <__adddf3>
 800957c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009580:	4604      	mov	r4, r0
 8009582:	460d      	mov	r5, r1
 8009584:	f7f7 fae8 	bl	8000b58 <__aeabi_dcmpgt>
 8009588:	b9c0      	cbnz	r0, 80095bc <_dtoa_r+0x6bc>
 800958a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800958e:	4620      	mov	r0, r4
 8009590:	4629      	mov	r1, r5
 8009592:	f7f7 fab9 	bl	8000b08 <__aeabi_dcmpeq>
 8009596:	b110      	cbz	r0, 800959e <_dtoa_r+0x69e>
 8009598:	f018 0f01 	tst.w	r8, #1
 800959c:	d10e      	bne.n	80095bc <_dtoa_r+0x6bc>
 800959e:	9902      	ldr	r1, [sp, #8]
 80095a0:	4648      	mov	r0, r9
 80095a2:	f000 fbbd 	bl	8009d20 <_Bfree>
 80095a6:	2300      	movs	r3, #0
 80095a8:	7033      	strb	r3, [r6, #0]
 80095aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095ac:	3701      	adds	r7, #1
 80095ae:	601f      	str	r7, [r3, #0]
 80095b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 824b 	beq.w	8009a4e <_dtoa_r+0xb4e>
 80095b8:	601e      	str	r6, [r3, #0]
 80095ba:	e248      	b.n	8009a4e <_dtoa_r+0xb4e>
 80095bc:	46b8      	mov	r8, r7
 80095be:	4633      	mov	r3, r6
 80095c0:	461e      	mov	r6, r3
 80095c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095c6:	2a39      	cmp	r2, #57	@ 0x39
 80095c8:	d106      	bne.n	80095d8 <_dtoa_r+0x6d8>
 80095ca:	459a      	cmp	sl, r3
 80095cc:	d1f8      	bne.n	80095c0 <_dtoa_r+0x6c0>
 80095ce:	2230      	movs	r2, #48	@ 0x30
 80095d0:	f108 0801 	add.w	r8, r8, #1
 80095d4:	f88a 2000 	strb.w	r2, [sl]
 80095d8:	781a      	ldrb	r2, [r3, #0]
 80095da:	3201      	adds	r2, #1
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	e7a0      	b.n	8009522 <_dtoa_r+0x622>
 80095e0:	4b6f      	ldr	r3, [pc, #444]	@ (80097a0 <_dtoa_r+0x8a0>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	f7f7 f828 	bl	8000638 <__aeabi_dmul>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	4604      	mov	r4, r0
 80095ee:	460d      	mov	r5, r1
 80095f0:	f7f7 fa8a 	bl	8000b08 <__aeabi_dcmpeq>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d09f      	beq.n	8009538 <_dtoa_r+0x638>
 80095f8:	e7d1      	b.n	800959e <_dtoa_r+0x69e>
 80095fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f000 80ea 	beq.w	80097d6 <_dtoa_r+0x8d6>
 8009602:	9a07      	ldr	r2, [sp, #28]
 8009604:	2a01      	cmp	r2, #1
 8009606:	f300 80cd 	bgt.w	80097a4 <_dtoa_r+0x8a4>
 800960a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800960c:	2a00      	cmp	r2, #0
 800960e:	f000 80c1 	beq.w	8009794 <_dtoa_r+0x894>
 8009612:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009616:	9c08      	ldr	r4, [sp, #32]
 8009618:	9e00      	ldr	r6, [sp, #0]
 800961a:	9a00      	ldr	r2, [sp, #0]
 800961c:	441a      	add	r2, r3
 800961e:	9200      	str	r2, [sp, #0]
 8009620:	9a06      	ldr	r2, [sp, #24]
 8009622:	2101      	movs	r1, #1
 8009624:	441a      	add	r2, r3
 8009626:	4648      	mov	r0, r9
 8009628:	9206      	str	r2, [sp, #24]
 800962a:	f000 fc77 	bl	8009f1c <__i2b>
 800962e:	4605      	mov	r5, r0
 8009630:	b166      	cbz	r6, 800964c <_dtoa_r+0x74c>
 8009632:	9b06      	ldr	r3, [sp, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	dd09      	ble.n	800964c <_dtoa_r+0x74c>
 8009638:	42b3      	cmp	r3, r6
 800963a:	9a00      	ldr	r2, [sp, #0]
 800963c:	bfa8      	it	ge
 800963e:	4633      	movge	r3, r6
 8009640:	1ad2      	subs	r2, r2, r3
 8009642:	9200      	str	r2, [sp, #0]
 8009644:	9a06      	ldr	r2, [sp, #24]
 8009646:	1af6      	subs	r6, r6, r3
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	9306      	str	r3, [sp, #24]
 800964c:	9b08      	ldr	r3, [sp, #32]
 800964e:	b30b      	cbz	r3, 8009694 <_dtoa_r+0x794>
 8009650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 80c6 	beq.w	80097e4 <_dtoa_r+0x8e4>
 8009658:	2c00      	cmp	r4, #0
 800965a:	f000 80c0 	beq.w	80097de <_dtoa_r+0x8de>
 800965e:	4629      	mov	r1, r5
 8009660:	4622      	mov	r2, r4
 8009662:	4648      	mov	r0, r9
 8009664:	f000 fd12 	bl	800a08c <__pow5mult>
 8009668:	9a02      	ldr	r2, [sp, #8]
 800966a:	4601      	mov	r1, r0
 800966c:	4605      	mov	r5, r0
 800966e:	4648      	mov	r0, r9
 8009670:	f000 fc6a 	bl	8009f48 <__multiply>
 8009674:	9902      	ldr	r1, [sp, #8]
 8009676:	4680      	mov	r8, r0
 8009678:	4648      	mov	r0, r9
 800967a:	f000 fb51 	bl	8009d20 <_Bfree>
 800967e:	9b08      	ldr	r3, [sp, #32]
 8009680:	1b1b      	subs	r3, r3, r4
 8009682:	9308      	str	r3, [sp, #32]
 8009684:	f000 80b1 	beq.w	80097ea <_dtoa_r+0x8ea>
 8009688:	9a08      	ldr	r2, [sp, #32]
 800968a:	4641      	mov	r1, r8
 800968c:	4648      	mov	r0, r9
 800968e:	f000 fcfd 	bl	800a08c <__pow5mult>
 8009692:	9002      	str	r0, [sp, #8]
 8009694:	2101      	movs	r1, #1
 8009696:	4648      	mov	r0, r9
 8009698:	f000 fc40 	bl	8009f1c <__i2b>
 800969c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800969e:	4604      	mov	r4, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 81d8 	beq.w	8009a56 <_dtoa_r+0xb56>
 80096a6:	461a      	mov	r2, r3
 80096a8:	4601      	mov	r1, r0
 80096aa:	4648      	mov	r0, r9
 80096ac:	f000 fcee 	bl	800a08c <__pow5mult>
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	4604      	mov	r4, r0
 80096b6:	f300 809f 	bgt.w	80097f8 <_dtoa_r+0x8f8>
 80096ba:	9b04      	ldr	r3, [sp, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f040 8097 	bne.w	80097f0 <_dtoa_r+0x8f0>
 80096c2:	9b05      	ldr	r3, [sp, #20]
 80096c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f040 8093 	bne.w	80097f4 <_dtoa_r+0x8f4>
 80096ce:	9b05      	ldr	r3, [sp, #20]
 80096d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096d4:	0d1b      	lsrs	r3, r3, #20
 80096d6:	051b      	lsls	r3, r3, #20
 80096d8:	b133      	cbz	r3, 80096e8 <_dtoa_r+0x7e8>
 80096da:	9b00      	ldr	r3, [sp, #0]
 80096dc:	3301      	adds	r3, #1
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	9b06      	ldr	r3, [sp, #24]
 80096e2:	3301      	adds	r3, #1
 80096e4:	9306      	str	r3, [sp, #24]
 80096e6:	2301      	movs	r3, #1
 80096e8:	9308      	str	r3, [sp, #32]
 80096ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 81b8 	beq.w	8009a62 <_dtoa_r+0xb62>
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096f8:	6918      	ldr	r0, [r3, #16]
 80096fa:	f000 fbc3 	bl	8009e84 <__hi0bits>
 80096fe:	f1c0 0020 	rsb	r0, r0, #32
 8009702:	9b06      	ldr	r3, [sp, #24]
 8009704:	4418      	add	r0, r3
 8009706:	f010 001f 	ands.w	r0, r0, #31
 800970a:	f000 8082 	beq.w	8009812 <_dtoa_r+0x912>
 800970e:	f1c0 0320 	rsb	r3, r0, #32
 8009712:	2b04      	cmp	r3, #4
 8009714:	dd73      	ble.n	80097fe <_dtoa_r+0x8fe>
 8009716:	9b00      	ldr	r3, [sp, #0]
 8009718:	f1c0 001c 	rsb	r0, r0, #28
 800971c:	4403      	add	r3, r0
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	9b06      	ldr	r3, [sp, #24]
 8009722:	4403      	add	r3, r0
 8009724:	4406      	add	r6, r0
 8009726:	9306      	str	r3, [sp, #24]
 8009728:	9b00      	ldr	r3, [sp, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	dd05      	ble.n	800973a <_dtoa_r+0x83a>
 800972e:	9902      	ldr	r1, [sp, #8]
 8009730:	461a      	mov	r2, r3
 8009732:	4648      	mov	r0, r9
 8009734:	f000 fd04 	bl	800a140 <__lshift>
 8009738:	9002      	str	r0, [sp, #8]
 800973a:	9b06      	ldr	r3, [sp, #24]
 800973c:	2b00      	cmp	r3, #0
 800973e:	dd05      	ble.n	800974c <_dtoa_r+0x84c>
 8009740:	4621      	mov	r1, r4
 8009742:	461a      	mov	r2, r3
 8009744:	4648      	mov	r0, r9
 8009746:	f000 fcfb 	bl	800a140 <__lshift>
 800974a:	4604      	mov	r4, r0
 800974c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	d061      	beq.n	8009816 <_dtoa_r+0x916>
 8009752:	9802      	ldr	r0, [sp, #8]
 8009754:	4621      	mov	r1, r4
 8009756:	f000 fd5f 	bl	800a218 <__mcmp>
 800975a:	2800      	cmp	r0, #0
 800975c:	da5b      	bge.n	8009816 <_dtoa_r+0x916>
 800975e:	2300      	movs	r3, #0
 8009760:	9902      	ldr	r1, [sp, #8]
 8009762:	220a      	movs	r2, #10
 8009764:	4648      	mov	r0, r9
 8009766:	f000 fafd 	bl	8009d64 <__multadd>
 800976a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976c:	9002      	str	r0, [sp, #8]
 800976e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8177 	beq.w	8009a66 <_dtoa_r+0xb66>
 8009778:	4629      	mov	r1, r5
 800977a:	2300      	movs	r3, #0
 800977c:	220a      	movs	r2, #10
 800977e:	4648      	mov	r0, r9
 8009780:	f000 faf0 	bl	8009d64 <__multadd>
 8009784:	f1bb 0f00 	cmp.w	fp, #0
 8009788:	4605      	mov	r5, r0
 800978a:	dc6f      	bgt.n	800986c <_dtoa_r+0x96c>
 800978c:	9b07      	ldr	r3, [sp, #28]
 800978e:	2b02      	cmp	r3, #2
 8009790:	dc49      	bgt.n	8009826 <_dtoa_r+0x926>
 8009792:	e06b      	b.n	800986c <_dtoa_r+0x96c>
 8009794:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009796:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800979a:	e73c      	b.n	8009616 <_dtoa_r+0x716>
 800979c:	3fe00000 	.word	0x3fe00000
 80097a0:	40240000 	.word	0x40240000
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	1e5c      	subs	r4, r3, #1
 80097a8:	9b08      	ldr	r3, [sp, #32]
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	db09      	blt.n	80097c2 <_dtoa_r+0x8c2>
 80097ae:	1b1c      	subs	r4, r3, r4
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f6bf af30 	bge.w	8009618 <_dtoa_r+0x718>
 80097b8:	9b00      	ldr	r3, [sp, #0]
 80097ba:	9a03      	ldr	r2, [sp, #12]
 80097bc:	1a9e      	subs	r6, r3, r2
 80097be:	2300      	movs	r3, #0
 80097c0:	e72b      	b.n	800961a <_dtoa_r+0x71a>
 80097c2:	9b08      	ldr	r3, [sp, #32]
 80097c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097c6:	9408      	str	r4, [sp, #32]
 80097c8:	1ae3      	subs	r3, r4, r3
 80097ca:	441a      	add	r2, r3
 80097cc:	9e00      	ldr	r6, [sp, #0]
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80097d2:	2400      	movs	r4, #0
 80097d4:	e721      	b.n	800961a <_dtoa_r+0x71a>
 80097d6:	9c08      	ldr	r4, [sp, #32]
 80097d8:	9e00      	ldr	r6, [sp, #0]
 80097da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80097dc:	e728      	b.n	8009630 <_dtoa_r+0x730>
 80097de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80097e2:	e751      	b.n	8009688 <_dtoa_r+0x788>
 80097e4:	9a08      	ldr	r2, [sp, #32]
 80097e6:	9902      	ldr	r1, [sp, #8]
 80097e8:	e750      	b.n	800968c <_dtoa_r+0x78c>
 80097ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80097ee:	e751      	b.n	8009694 <_dtoa_r+0x794>
 80097f0:	2300      	movs	r3, #0
 80097f2:	e779      	b.n	80096e8 <_dtoa_r+0x7e8>
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	e777      	b.n	80096e8 <_dtoa_r+0x7e8>
 80097f8:	2300      	movs	r3, #0
 80097fa:	9308      	str	r3, [sp, #32]
 80097fc:	e779      	b.n	80096f2 <_dtoa_r+0x7f2>
 80097fe:	d093      	beq.n	8009728 <_dtoa_r+0x828>
 8009800:	9a00      	ldr	r2, [sp, #0]
 8009802:	331c      	adds	r3, #28
 8009804:	441a      	add	r2, r3
 8009806:	9200      	str	r2, [sp, #0]
 8009808:	9a06      	ldr	r2, [sp, #24]
 800980a:	441a      	add	r2, r3
 800980c:	441e      	add	r6, r3
 800980e:	9206      	str	r2, [sp, #24]
 8009810:	e78a      	b.n	8009728 <_dtoa_r+0x828>
 8009812:	4603      	mov	r3, r0
 8009814:	e7f4      	b.n	8009800 <_dtoa_r+0x900>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	46b8      	mov	r8, r7
 800981c:	dc20      	bgt.n	8009860 <_dtoa_r+0x960>
 800981e:	469b      	mov	fp, r3
 8009820:	9b07      	ldr	r3, [sp, #28]
 8009822:	2b02      	cmp	r3, #2
 8009824:	dd1e      	ble.n	8009864 <_dtoa_r+0x964>
 8009826:	f1bb 0f00 	cmp.w	fp, #0
 800982a:	f47f adb1 	bne.w	8009390 <_dtoa_r+0x490>
 800982e:	4621      	mov	r1, r4
 8009830:	465b      	mov	r3, fp
 8009832:	2205      	movs	r2, #5
 8009834:	4648      	mov	r0, r9
 8009836:	f000 fa95 	bl	8009d64 <__multadd>
 800983a:	4601      	mov	r1, r0
 800983c:	4604      	mov	r4, r0
 800983e:	9802      	ldr	r0, [sp, #8]
 8009840:	f000 fcea 	bl	800a218 <__mcmp>
 8009844:	2800      	cmp	r0, #0
 8009846:	f77f ada3 	ble.w	8009390 <_dtoa_r+0x490>
 800984a:	4656      	mov	r6, sl
 800984c:	2331      	movs	r3, #49	@ 0x31
 800984e:	f806 3b01 	strb.w	r3, [r6], #1
 8009852:	f108 0801 	add.w	r8, r8, #1
 8009856:	e59f      	b.n	8009398 <_dtoa_r+0x498>
 8009858:	9c03      	ldr	r4, [sp, #12]
 800985a:	46b8      	mov	r8, r7
 800985c:	4625      	mov	r5, r4
 800985e:	e7f4      	b.n	800984a <_dtoa_r+0x94a>
 8009860:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 8101 	beq.w	8009a6e <_dtoa_r+0xb6e>
 800986c:	2e00      	cmp	r6, #0
 800986e:	dd05      	ble.n	800987c <_dtoa_r+0x97c>
 8009870:	4629      	mov	r1, r5
 8009872:	4632      	mov	r2, r6
 8009874:	4648      	mov	r0, r9
 8009876:	f000 fc63 	bl	800a140 <__lshift>
 800987a:	4605      	mov	r5, r0
 800987c:	9b08      	ldr	r3, [sp, #32]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d05c      	beq.n	800993c <_dtoa_r+0xa3c>
 8009882:	6869      	ldr	r1, [r5, #4]
 8009884:	4648      	mov	r0, r9
 8009886:	f000 fa0b 	bl	8009ca0 <_Balloc>
 800988a:	4606      	mov	r6, r0
 800988c:	b928      	cbnz	r0, 800989a <_dtoa_r+0x99a>
 800988e:	4b82      	ldr	r3, [pc, #520]	@ (8009a98 <_dtoa_r+0xb98>)
 8009890:	4602      	mov	r2, r0
 8009892:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009896:	f7ff bb4a 	b.w	8008f2e <_dtoa_r+0x2e>
 800989a:	692a      	ldr	r2, [r5, #16]
 800989c:	3202      	adds	r2, #2
 800989e:	0092      	lsls	r2, r2, #2
 80098a0:	f105 010c 	add.w	r1, r5, #12
 80098a4:	300c      	adds	r0, #12
 80098a6:	f7ff fa8c 	bl	8008dc2 <memcpy>
 80098aa:	2201      	movs	r2, #1
 80098ac:	4631      	mov	r1, r6
 80098ae:	4648      	mov	r0, r9
 80098b0:	f000 fc46 	bl	800a140 <__lshift>
 80098b4:	f10a 0301 	add.w	r3, sl, #1
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	eb0a 030b 	add.w	r3, sl, fp
 80098be:	9308      	str	r3, [sp, #32]
 80098c0:	9b04      	ldr	r3, [sp, #16]
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	462f      	mov	r7, r5
 80098c8:	9306      	str	r3, [sp, #24]
 80098ca:	4605      	mov	r5, r0
 80098cc:	9b00      	ldr	r3, [sp, #0]
 80098ce:	9802      	ldr	r0, [sp, #8]
 80098d0:	4621      	mov	r1, r4
 80098d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80098d6:	f7ff fa89 	bl	8008dec <quorem>
 80098da:	4603      	mov	r3, r0
 80098dc:	3330      	adds	r3, #48	@ 0x30
 80098de:	9003      	str	r0, [sp, #12]
 80098e0:	4639      	mov	r1, r7
 80098e2:	9802      	ldr	r0, [sp, #8]
 80098e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098e6:	f000 fc97 	bl	800a218 <__mcmp>
 80098ea:	462a      	mov	r2, r5
 80098ec:	9004      	str	r0, [sp, #16]
 80098ee:	4621      	mov	r1, r4
 80098f0:	4648      	mov	r0, r9
 80098f2:	f000 fcad 	bl	800a250 <__mdiff>
 80098f6:	68c2      	ldr	r2, [r0, #12]
 80098f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098fa:	4606      	mov	r6, r0
 80098fc:	bb02      	cbnz	r2, 8009940 <_dtoa_r+0xa40>
 80098fe:	4601      	mov	r1, r0
 8009900:	9802      	ldr	r0, [sp, #8]
 8009902:	f000 fc89 	bl	800a218 <__mcmp>
 8009906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009908:	4602      	mov	r2, r0
 800990a:	4631      	mov	r1, r6
 800990c:	4648      	mov	r0, r9
 800990e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009910:	9309      	str	r3, [sp, #36]	@ 0x24
 8009912:	f000 fa05 	bl	8009d20 <_Bfree>
 8009916:	9b07      	ldr	r3, [sp, #28]
 8009918:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800991a:	9e00      	ldr	r6, [sp, #0]
 800991c:	ea42 0103 	orr.w	r1, r2, r3
 8009920:	9b06      	ldr	r3, [sp, #24]
 8009922:	4319      	orrs	r1, r3
 8009924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009926:	d10d      	bne.n	8009944 <_dtoa_r+0xa44>
 8009928:	2b39      	cmp	r3, #57	@ 0x39
 800992a:	d027      	beq.n	800997c <_dtoa_r+0xa7c>
 800992c:	9a04      	ldr	r2, [sp, #16]
 800992e:	2a00      	cmp	r2, #0
 8009930:	dd01      	ble.n	8009936 <_dtoa_r+0xa36>
 8009932:	9b03      	ldr	r3, [sp, #12]
 8009934:	3331      	adds	r3, #49	@ 0x31
 8009936:	f88b 3000 	strb.w	r3, [fp]
 800993a:	e52e      	b.n	800939a <_dtoa_r+0x49a>
 800993c:	4628      	mov	r0, r5
 800993e:	e7b9      	b.n	80098b4 <_dtoa_r+0x9b4>
 8009940:	2201      	movs	r2, #1
 8009942:	e7e2      	b.n	800990a <_dtoa_r+0xa0a>
 8009944:	9904      	ldr	r1, [sp, #16]
 8009946:	2900      	cmp	r1, #0
 8009948:	db04      	blt.n	8009954 <_dtoa_r+0xa54>
 800994a:	9807      	ldr	r0, [sp, #28]
 800994c:	4301      	orrs	r1, r0
 800994e:	9806      	ldr	r0, [sp, #24]
 8009950:	4301      	orrs	r1, r0
 8009952:	d120      	bne.n	8009996 <_dtoa_r+0xa96>
 8009954:	2a00      	cmp	r2, #0
 8009956:	ddee      	ble.n	8009936 <_dtoa_r+0xa36>
 8009958:	9902      	ldr	r1, [sp, #8]
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	2201      	movs	r2, #1
 800995e:	4648      	mov	r0, r9
 8009960:	f000 fbee 	bl	800a140 <__lshift>
 8009964:	4621      	mov	r1, r4
 8009966:	9002      	str	r0, [sp, #8]
 8009968:	f000 fc56 	bl	800a218 <__mcmp>
 800996c:	2800      	cmp	r0, #0
 800996e:	9b00      	ldr	r3, [sp, #0]
 8009970:	dc02      	bgt.n	8009978 <_dtoa_r+0xa78>
 8009972:	d1e0      	bne.n	8009936 <_dtoa_r+0xa36>
 8009974:	07da      	lsls	r2, r3, #31
 8009976:	d5de      	bpl.n	8009936 <_dtoa_r+0xa36>
 8009978:	2b39      	cmp	r3, #57	@ 0x39
 800997a:	d1da      	bne.n	8009932 <_dtoa_r+0xa32>
 800997c:	2339      	movs	r3, #57	@ 0x39
 800997e:	f88b 3000 	strb.w	r3, [fp]
 8009982:	4633      	mov	r3, r6
 8009984:	461e      	mov	r6, r3
 8009986:	3b01      	subs	r3, #1
 8009988:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800998c:	2a39      	cmp	r2, #57	@ 0x39
 800998e:	d04e      	beq.n	8009a2e <_dtoa_r+0xb2e>
 8009990:	3201      	adds	r2, #1
 8009992:	701a      	strb	r2, [r3, #0]
 8009994:	e501      	b.n	800939a <_dtoa_r+0x49a>
 8009996:	2a00      	cmp	r2, #0
 8009998:	dd03      	ble.n	80099a2 <_dtoa_r+0xaa2>
 800999a:	2b39      	cmp	r3, #57	@ 0x39
 800999c:	d0ee      	beq.n	800997c <_dtoa_r+0xa7c>
 800999e:	3301      	adds	r3, #1
 80099a0:	e7c9      	b.n	8009936 <_dtoa_r+0xa36>
 80099a2:	9a00      	ldr	r2, [sp, #0]
 80099a4:	9908      	ldr	r1, [sp, #32]
 80099a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80099aa:	428a      	cmp	r2, r1
 80099ac:	d028      	beq.n	8009a00 <_dtoa_r+0xb00>
 80099ae:	9902      	ldr	r1, [sp, #8]
 80099b0:	2300      	movs	r3, #0
 80099b2:	220a      	movs	r2, #10
 80099b4:	4648      	mov	r0, r9
 80099b6:	f000 f9d5 	bl	8009d64 <__multadd>
 80099ba:	42af      	cmp	r7, r5
 80099bc:	9002      	str	r0, [sp, #8]
 80099be:	f04f 0300 	mov.w	r3, #0
 80099c2:	f04f 020a 	mov.w	r2, #10
 80099c6:	4639      	mov	r1, r7
 80099c8:	4648      	mov	r0, r9
 80099ca:	d107      	bne.n	80099dc <_dtoa_r+0xadc>
 80099cc:	f000 f9ca 	bl	8009d64 <__multadd>
 80099d0:	4607      	mov	r7, r0
 80099d2:	4605      	mov	r5, r0
 80099d4:	9b00      	ldr	r3, [sp, #0]
 80099d6:	3301      	adds	r3, #1
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	e777      	b.n	80098cc <_dtoa_r+0x9cc>
 80099dc:	f000 f9c2 	bl	8009d64 <__multadd>
 80099e0:	4629      	mov	r1, r5
 80099e2:	4607      	mov	r7, r0
 80099e4:	2300      	movs	r3, #0
 80099e6:	220a      	movs	r2, #10
 80099e8:	4648      	mov	r0, r9
 80099ea:	f000 f9bb 	bl	8009d64 <__multadd>
 80099ee:	4605      	mov	r5, r0
 80099f0:	e7f0      	b.n	80099d4 <_dtoa_r+0xad4>
 80099f2:	f1bb 0f00 	cmp.w	fp, #0
 80099f6:	bfcc      	ite	gt
 80099f8:	465e      	movgt	r6, fp
 80099fa:	2601      	movle	r6, #1
 80099fc:	4456      	add	r6, sl
 80099fe:	2700      	movs	r7, #0
 8009a00:	9902      	ldr	r1, [sp, #8]
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2201      	movs	r2, #1
 8009a06:	4648      	mov	r0, r9
 8009a08:	f000 fb9a 	bl	800a140 <__lshift>
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	9002      	str	r0, [sp, #8]
 8009a10:	f000 fc02 	bl	800a218 <__mcmp>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	dcb4      	bgt.n	8009982 <_dtoa_r+0xa82>
 8009a18:	d102      	bne.n	8009a20 <_dtoa_r+0xb20>
 8009a1a:	9b00      	ldr	r3, [sp, #0]
 8009a1c:	07db      	lsls	r3, r3, #31
 8009a1e:	d4b0      	bmi.n	8009982 <_dtoa_r+0xa82>
 8009a20:	4633      	mov	r3, r6
 8009a22:	461e      	mov	r6, r3
 8009a24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a28:	2a30      	cmp	r2, #48	@ 0x30
 8009a2a:	d0fa      	beq.n	8009a22 <_dtoa_r+0xb22>
 8009a2c:	e4b5      	b.n	800939a <_dtoa_r+0x49a>
 8009a2e:	459a      	cmp	sl, r3
 8009a30:	d1a8      	bne.n	8009984 <_dtoa_r+0xa84>
 8009a32:	2331      	movs	r3, #49	@ 0x31
 8009a34:	f108 0801 	add.w	r8, r8, #1
 8009a38:	f88a 3000 	strb.w	r3, [sl]
 8009a3c:	e4ad      	b.n	800939a <_dtoa_r+0x49a>
 8009a3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009a9c <_dtoa_r+0xb9c>
 8009a44:	b11b      	cbz	r3, 8009a4e <_dtoa_r+0xb4e>
 8009a46:	f10a 0308 	add.w	r3, sl, #8
 8009a4a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009a4c:	6013      	str	r3, [r2, #0]
 8009a4e:	4650      	mov	r0, sl
 8009a50:	b017      	add	sp, #92	@ 0x5c
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a56:	9b07      	ldr	r3, [sp, #28]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	f77f ae2e 	ble.w	80096ba <_dtoa_r+0x7ba>
 8009a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a60:	9308      	str	r3, [sp, #32]
 8009a62:	2001      	movs	r0, #1
 8009a64:	e64d      	b.n	8009702 <_dtoa_r+0x802>
 8009a66:	f1bb 0f00 	cmp.w	fp, #0
 8009a6a:	f77f aed9 	ble.w	8009820 <_dtoa_r+0x920>
 8009a6e:	4656      	mov	r6, sl
 8009a70:	9802      	ldr	r0, [sp, #8]
 8009a72:	4621      	mov	r1, r4
 8009a74:	f7ff f9ba 	bl	8008dec <quorem>
 8009a78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009a7c:	f806 3b01 	strb.w	r3, [r6], #1
 8009a80:	eba6 020a 	sub.w	r2, r6, sl
 8009a84:	4593      	cmp	fp, r2
 8009a86:	ddb4      	ble.n	80099f2 <_dtoa_r+0xaf2>
 8009a88:	9902      	ldr	r1, [sp, #8]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	4648      	mov	r0, r9
 8009a90:	f000 f968 	bl	8009d64 <__multadd>
 8009a94:	9002      	str	r0, [sp, #8]
 8009a96:	e7eb      	b.n	8009a70 <_dtoa_r+0xb70>
 8009a98:	0800d649 	.word	0x0800d649
 8009a9c:	0800d5cd 	.word	0x0800d5cd

08009aa0 <_free_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	d041      	beq.n	8009b2c <_free_r+0x8c>
 8009aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aac:	1f0c      	subs	r4, r1, #4
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfb8      	it	lt
 8009ab2:	18e4      	addlt	r4, r4, r3
 8009ab4:	f000 f8e8 	bl	8009c88 <__malloc_lock>
 8009ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b30 <_free_r+0x90>)
 8009aba:	6813      	ldr	r3, [r2, #0]
 8009abc:	b933      	cbnz	r3, 8009acc <_free_r+0x2c>
 8009abe:	6063      	str	r3, [r4, #4]
 8009ac0:	6014      	str	r4, [r2, #0]
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac8:	f000 b8e4 	b.w	8009c94 <__malloc_unlock>
 8009acc:	42a3      	cmp	r3, r4
 8009ace:	d908      	bls.n	8009ae2 <_free_r+0x42>
 8009ad0:	6820      	ldr	r0, [r4, #0]
 8009ad2:	1821      	adds	r1, r4, r0
 8009ad4:	428b      	cmp	r3, r1
 8009ad6:	bf01      	itttt	eq
 8009ad8:	6819      	ldreq	r1, [r3, #0]
 8009ada:	685b      	ldreq	r3, [r3, #4]
 8009adc:	1809      	addeq	r1, r1, r0
 8009ade:	6021      	streq	r1, [r4, #0]
 8009ae0:	e7ed      	b.n	8009abe <_free_r+0x1e>
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	b10b      	cbz	r3, 8009aec <_free_r+0x4c>
 8009ae8:	42a3      	cmp	r3, r4
 8009aea:	d9fa      	bls.n	8009ae2 <_free_r+0x42>
 8009aec:	6811      	ldr	r1, [r2, #0]
 8009aee:	1850      	adds	r0, r2, r1
 8009af0:	42a0      	cmp	r0, r4
 8009af2:	d10b      	bne.n	8009b0c <_free_r+0x6c>
 8009af4:	6820      	ldr	r0, [r4, #0]
 8009af6:	4401      	add	r1, r0
 8009af8:	1850      	adds	r0, r2, r1
 8009afa:	4283      	cmp	r3, r0
 8009afc:	6011      	str	r1, [r2, #0]
 8009afe:	d1e0      	bne.n	8009ac2 <_free_r+0x22>
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	6053      	str	r3, [r2, #4]
 8009b06:	4408      	add	r0, r1
 8009b08:	6010      	str	r0, [r2, #0]
 8009b0a:	e7da      	b.n	8009ac2 <_free_r+0x22>
 8009b0c:	d902      	bls.n	8009b14 <_free_r+0x74>
 8009b0e:	230c      	movs	r3, #12
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	e7d6      	b.n	8009ac2 <_free_r+0x22>
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	1821      	adds	r1, r4, r0
 8009b18:	428b      	cmp	r3, r1
 8009b1a:	bf04      	itt	eq
 8009b1c:	6819      	ldreq	r1, [r3, #0]
 8009b1e:	685b      	ldreq	r3, [r3, #4]
 8009b20:	6063      	str	r3, [r4, #4]
 8009b22:	bf04      	itt	eq
 8009b24:	1809      	addeq	r1, r1, r0
 8009b26:	6021      	streq	r1, [r4, #0]
 8009b28:	6054      	str	r4, [r2, #4]
 8009b2a:	e7ca      	b.n	8009ac2 <_free_r+0x22>
 8009b2c:	bd38      	pop	{r3, r4, r5, pc}
 8009b2e:	bf00      	nop
 8009b30:	200036ec 	.word	0x200036ec

08009b34 <malloc>:
 8009b34:	4b02      	ldr	r3, [pc, #8]	@ (8009b40 <malloc+0xc>)
 8009b36:	4601      	mov	r1, r0
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	f000 b825 	b.w	8009b88 <_malloc_r>
 8009b3e:	bf00      	nop
 8009b40:	2000001c 	.word	0x2000001c

08009b44 <sbrk_aligned>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	4e0f      	ldr	r6, [pc, #60]	@ (8009b84 <sbrk_aligned+0x40>)
 8009b48:	460c      	mov	r4, r1
 8009b4a:	6831      	ldr	r1, [r6, #0]
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	b911      	cbnz	r1, 8009b56 <sbrk_aligned+0x12>
 8009b50:	f001 fe04 	bl	800b75c <_sbrk_r>
 8009b54:	6030      	str	r0, [r6, #0]
 8009b56:	4621      	mov	r1, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f001 fdff 	bl	800b75c <_sbrk_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d103      	bne.n	8009b6a <sbrk_aligned+0x26>
 8009b62:	f04f 34ff 	mov.w	r4, #4294967295
 8009b66:	4620      	mov	r0, r4
 8009b68:	bd70      	pop	{r4, r5, r6, pc}
 8009b6a:	1cc4      	adds	r4, r0, #3
 8009b6c:	f024 0403 	bic.w	r4, r4, #3
 8009b70:	42a0      	cmp	r0, r4
 8009b72:	d0f8      	beq.n	8009b66 <sbrk_aligned+0x22>
 8009b74:	1a21      	subs	r1, r4, r0
 8009b76:	4628      	mov	r0, r5
 8009b78:	f001 fdf0 	bl	800b75c <_sbrk_r>
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d1f2      	bne.n	8009b66 <sbrk_aligned+0x22>
 8009b80:	e7ef      	b.n	8009b62 <sbrk_aligned+0x1e>
 8009b82:	bf00      	nop
 8009b84:	200036e8 	.word	0x200036e8

08009b88 <_malloc_r>:
 8009b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	1ccd      	adds	r5, r1, #3
 8009b8e:	f025 0503 	bic.w	r5, r5, #3
 8009b92:	3508      	adds	r5, #8
 8009b94:	2d0c      	cmp	r5, #12
 8009b96:	bf38      	it	cc
 8009b98:	250c      	movcc	r5, #12
 8009b9a:	2d00      	cmp	r5, #0
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	db01      	blt.n	8009ba4 <_malloc_r+0x1c>
 8009ba0:	42a9      	cmp	r1, r5
 8009ba2:	d904      	bls.n	8009bae <_malloc_r+0x26>
 8009ba4:	230c      	movs	r3, #12
 8009ba6:	6033      	str	r3, [r6, #0]
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c84 <_malloc_r+0xfc>
 8009bb2:	f000 f869 	bl	8009c88 <__malloc_lock>
 8009bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8009bba:	461c      	mov	r4, r3
 8009bbc:	bb44      	cbnz	r4, 8009c10 <_malloc_r+0x88>
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7ff ffbf 	bl	8009b44 <sbrk_aligned>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	4604      	mov	r4, r0
 8009bca:	d158      	bne.n	8009c7e <_malloc_r+0xf6>
 8009bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8009bd0:	4627      	mov	r7, r4
 8009bd2:	2f00      	cmp	r7, #0
 8009bd4:	d143      	bne.n	8009c5e <_malloc_r+0xd6>
 8009bd6:	2c00      	cmp	r4, #0
 8009bd8:	d04b      	beq.n	8009c72 <_malloc_r+0xea>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	4639      	mov	r1, r7
 8009bde:	4630      	mov	r0, r6
 8009be0:	eb04 0903 	add.w	r9, r4, r3
 8009be4:	f001 fdba 	bl	800b75c <_sbrk_r>
 8009be8:	4581      	cmp	r9, r0
 8009bea:	d142      	bne.n	8009c72 <_malloc_r+0xea>
 8009bec:	6821      	ldr	r1, [r4, #0]
 8009bee:	1a6d      	subs	r5, r5, r1
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7ff ffa6 	bl	8009b44 <sbrk_aligned>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d03a      	beq.n	8009c72 <_malloc_r+0xea>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	442b      	add	r3, r5
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	f8d8 3000 	ldr.w	r3, [r8]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	bb62      	cbnz	r2, 8009c64 <_malloc_r+0xdc>
 8009c0a:	f8c8 7000 	str.w	r7, [r8]
 8009c0e:	e00f      	b.n	8009c30 <_malloc_r+0xa8>
 8009c10:	6822      	ldr	r2, [r4, #0]
 8009c12:	1b52      	subs	r2, r2, r5
 8009c14:	d420      	bmi.n	8009c58 <_malloc_r+0xd0>
 8009c16:	2a0b      	cmp	r2, #11
 8009c18:	d917      	bls.n	8009c4a <_malloc_r+0xc2>
 8009c1a:	1961      	adds	r1, r4, r5
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	6025      	str	r5, [r4, #0]
 8009c20:	bf18      	it	ne
 8009c22:	6059      	strne	r1, [r3, #4]
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	bf08      	it	eq
 8009c28:	f8c8 1000 	streq.w	r1, [r8]
 8009c2c:	5162      	str	r2, [r4, r5]
 8009c2e:	604b      	str	r3, [r1, #4]
 8009c30:	4630      	mov	r0, r6
 8009c32:	f000 f82f 	bl	8009c94 <__malloc_unlock>
 8009c36:	f104 000b 	add.w	r0, r4, #11
 8009c3a:	1d23      	adds	r3, r4, #4
 8009c3c:	f020 0007 	bic.w	r0, r0, #7
 8009c40:	1ac2      	subs	r2, r0, r3
 8009c42:	bf1c      	itt	ne
 8009c44:	1a1b      	subne	r3, r3, r0
 8009c46:	50a3      	strne	r3, [r4, r2]
 8009c48:	e7af      	b.n	8009baa <_malloc_r+0x22>
 8009c4a:	6862      	ldr	r2, [r4, #4]
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	bf0c      	ite	eq
 8009c50:	f8c8 2000 	streq.w	r2, [r8]
 8009c54:	605a      	strne	r2, [r3, #4]
 8009c56:	e7eb      	b.n	8009c30 <_malloc_r+0xa8>
 8009c58:	4623      	mov	r3, r4
 8009c5a:	6864      	ldr	r4, [r4, #4]
 8009c5c:	e7ae      	b.n	8009bbc <_malloc_r+0x34>
 8009c5e:	463c      	mov	r4, r7
 8009c60:	687f      	ldr	r7, [r7, #4]
 8009c62:	e7b6      	b.n	8009bd2 <_malloc_r+0x4a>
 8009c64:	461a      	mov	r2, r3
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	42a3      	cmp	r3, r4
 8009c6a:	d1fb      	bne.n	8009c64 <_malloc_r+0xdc>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	6053      	str	r3, [r2, #4]
 8009c70:	e7de      	b.n	8009c30 <_malloc_r+0xa8>
 8009c72:	230c      	movs	r3, #12
 8009c74:	6033      	str	r3, [r6, #0]
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 f80c 	bl	8009c94 <__malloc_unlock>
 8009c7c:	e794      	b.n	8009ba8 <_malloc_r+0x20>
 8009c7e:	6005      	str	r5, [r0, #0]
 8009c80:	e7d6      	b.n	8009c30 <_malloc_r+0xa8>
 8009c82:	bf00      	nop
 8009c84:	200036ec 	.word	0x200036ec

08009c88 <__malloc_lock>:
 8009c88:	4801      	ldr	r0, [pc, #4]	@ (8009c90 <__malloc_lock+0x8>)
 8009c8a:	f7ff b898 	b.w	8008dbe <__retarget_lock_acquire_recursive>
 8009c8e:	bf00      	nop
 8009c90:	200036e4 	.word	0x200036e4

08009c94 <__malloc_unlock>:
 8009c94:	4801      	ldr	r0, [pc, #4]	@ (8009c9c <__malloc_unlock+0x8>)
 8009c96:	f7ff b893 	b.w	8008dc0 <__retarget_lock_release_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	200036e4 	.word	0x200036e4

08009ca0 <_Balloc>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	69c6      	ldr	r6, [r0, #28]
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	b976      	cbnz	r6, 8009cc8 <_Balloc+0x28>
 8009caa:	2010      	movs	r0, #16
 8009cac:	f7ff ff42 	bl	8009b34 <malloc>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	61e0      	str	r0, [r4, #28]
 8009cb4:	b920      	cbnz	r0, 8009cc0 <_Balloc+0x20>
 8009cb6:	4b18      	ldr	r3, [pc, #96]	@ (8009d18 <_Balloc+0x78>)
 8009cb8:	4818      	ldr	r0, [pc, #96]	@ (8009d1c <_Balloc+0x7c>)
 8009cba:	216b      	movs	r1, #107	@ 0x6b
 8009cbc:	f001 fd68 	bl	800b790 <__assert_func>
 8009cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cc4:	6006      	str	r6, [r0, #0]
 8009cc6:	60c6      	str	r6, [r0, #12]
 8009cc8:	69e6      	ldr	r6, [r4, #28]
 8009cca:	68f3      	ldr	r3, [r6, #12]
 8009ccc:	b183      	cbz	r3, 8009cf0 <_Balloc+0x50>
 8009cce:	69e3      	ldr	r3, [r4, #28]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cd6:	b9b8      	cbnz	r0, 8009d08 <_Balloc+0x68>
 8009cd8:	2101      	movs	r1, #1
 8009cda:	fa01 f605 	lsl.w	r6, r1, r5
 8009cde:	1d72      	adds	r2, r6, #5
 8009ce0:	0092      	lsls	r2, r2, #2
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f001 fd72 	bl	800b7cc <_calloc_r>
 8009ce8:	b160      	cbz	r0, 8009d04 <_Balloc+0x64>
 8009cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cee:	e00e      	b.n	8009d0e <_Balloc+0x6e>
 8009cf0:	2221      	movs	r2, #33	@ 0x21
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f001 fd69 	bl	800b7cc <_calloc_r>
 8009cfa:	69e3      	ldr	r3, [r4, #28]
 8009cfc:	60f0      	str	r0, [r6, #12]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e4      	bne.n	8009cce <_Balloc+0x2e>
 8009d04:	2000      	movs	r0, #0
 8009d06:	bd70      	pop	{r4, r5, r6, pc}
 8009d08:	6802      	ldr	r2, [r0, #0]
 8009d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d14:	e7f7      	b.n	8009d06 <_Balloc+0x66>
 8009d16:	bf00      	nop
 8009d18:	0800d5da 	.word	0x0800d5da
 8009d1c:	0800d65a 	.word	0x0800d65a

08009d20 <_Bfree>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	69c6      	ldr	r6, [r0, #28]
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	b976      	cbnz	r6, 8009d48 <_Bfree+0x28>
 8009d2a:	2010      	movs	r0, #16
 8009d2c:	f7ff ff02 	bl	8009b34 <malloc>
 8009d30:	4602      	mov	r2, r0
 8009d32:	61e8      	str	r0, [r5, #28]
 8009d34:	b920      	cbnz	r0, 8009d40 <_Bfree+0x20>
 8009d36:	4b09      	ldr	r3, [pc, #36]	@ (8009d5c <_Bfree+0x3c>)
 8009d38:	4809      	ldr	r0, [pc, #36]	@ (8009d60 <_Bfree+0x40>)
 8009d3a:	218f      	movs	r1, #143	@ 0x8f
 8009d3c:	f001 fd28 	bl	800b790 <__assert_func>
 8009d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d44:	6006      	str	r6, [r0, #0]
 8009d46:	60c6      	str	r6, [r0, #12]
 8009d48:	b13c      	cbz	r4, 8009d5a <_Bfree+0x3a>
 8009d4a:	69eb      	ldr	r3, [r5, #28]
 8009d4c:	6862      	ldr	r2, [r4, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d54:	6021      	str	r1, [r4, #0]
 8009d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	0800d5da 	.word	0x0800d5da
 8009d60:	0800d65a 	.word	0x0800d65a

08009d64 <__multadd>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	690d      	ldr	r5, [r1, #16]
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	461e      	mov	r6, r3
 8009d70:	f101 0c14 	add.w	ip, r1, #20
 8009d74:	2000      	movs	r0, #0
 8009d76:	f8dc 3000 	ldr.w	r3, [ip]
 8009d7a:	b299      	uxth	r1, r3
 8009d7c:	fb02 6101 	mla	r1, r2, r1, r6
 8009d80:	0c1e      	lsrs	r6, r3, #16
 8009d82:	0c0b      	lsrs	r3, r1, #16
 8009d84:	fb02 3306 	mla	r3, r2, r6, r3
 8009d88:	b289      	uxth	r1, r1
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d90:	4285      	cmp	r5, r0
 8009d92:	f84c 1b04 	str.w	r1, [ip], #4
 8009d96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d9a:	dcec      	bgt.n	8009d76 <__multadd+0x12>
 8009d9c:	b30e      	cbz	r6, 8009de2 <__multadd+0x7e>
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	42ab      	cmp	r3, r5
 8009da2:	dc19      	bgt.n	8009dd8 <__multadd+0x74>
 8009da4:	6861      	ldr	r1, [r4, #4]
 8009da6:	4638      	mov	r0, r7
 8009da8:	3101      	adds	r1, #1
 8009daa:	f7ff ff79 	bl	8009ca0 <_Balloc>
 8009dae:	4680      	mov	r8, r0
 8009db0:	b928      	cbnz	r0, 8009dbe <__multadd+0x5a>
 8009db2:	4602      	mov	r2, r0
 8009db4:	4b0c      	ldr	r3, [pc, #48]	@ (8009de8 <__multadd+0x84>)
 8009db6:	480d      	ldr	r0, [pc, #52]	@ (8009dec <__multadd+0x88>)
 8009db8:	21ba      	movs	r1, #186	@ 0xba
 8009dba:	f001 fce9 	bl	800b790 <__assert_func>
 8009dbe:	6922      	ldr	r2, [r4, #16]
 8009dc0:	3202      	adds	r2, #2
 8009dc2:	f104 010c 	add.w	r1, r4, #12
 8009dc6:	0092      	lsls	r2, r2, #2
 8009dc8:	300c      	adds	r0, #12
 8009dca:	f7fe fffa 	bl	8008dc2 <memcpy>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7ff ffa5 	bl	8009d20 <_Bfree>
 8009dd6:	4644      	mov	r4, r8
 8009dd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ddc:	3501      	adds	r5, #1
 8009dde:	615e      	str	r6, [r3, #20]
 8009de0:	6125      	str	r5, [r4, #16]
 8009de2:	4620      	mov	r0, r4
 8009de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de8:	0800d649 	.word	0x0800d649
 8009dec:	0800d65a 	.word	0x0800d65a

08009df0 <__s2b>:
 8009df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009df4:	460c      	mov	r4, r1
 8009df6:	4615      	mov	r5, r2
 8009df8:	461f      	mov	r7, r3
 8009dfa:	2209      	movs	r2, #9
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	4606      	mov	r6, r0
 8009e00:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e04:	2100      	movs	r1, #0
 8009e06:	2201      	movs	r2, #1
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	db09      	blt.n	8009e20 <__s2b+0x30>
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f7ff ff47 	bl	8009ca0 <_Balloc>
 8009e12:	b940      	cbnz	r0, 8009e26 <__s2b+0x36>
 8009e14:	4602      	mov	r2, r0
 8009e16:	4b19      	ldr	r3, [pc, #100]	@ (8009e7c <__s2b+0x8c>)
 8009e18:	4819      	ldr	r0, [pc, #100]	@ (8009e80 <__s2b+0x90>)
 8009e1a:	21d3      	movs	r1, #211	@ 0xd3
 8009e1c:	f001 fcb8 	bl	800b790 <__assert_func>
 8009e20:	0052      	lsls	r2, r2, #1
 8009e22:	3101      	adds	r1, #1
 8009e24:	e7f0      	b.n	8009e08 <__s2b+0x18>
 8009e26:	9b08      	ldr	r3, [sp, #32]
 8009e28:	6143      	str	r3, [r0, #20]
 8009e2a:	2d09      	cmp	r5, #9
 8009e2c:	f04f 0301 	mov.w	r3, #1
 8009e30:	6103      	str	r3, [r0, #16]
 8009e32:	dd16      	ble.n	8009e62 <__s2b+0x72>
 8009e34:	f104 0909 	add.w	r9, r4, #9
 8009e38:	46c8      	mov	r8, r9
 8009e3a:	442c      	add	r4, r5
 8009e3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e40:	4601      	mov	r1, r0
 8009e42:	3b30      	subs	r3, #48	@ 0x30
 8009e44:	220a      	movs	r2, #10
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7ff ff8c 	bl	8009d64 <__multadd>
 8009e4c:	45a0      	cmp	r8, r4
 8009e4e:	d1f5      	bne.n	8009e3c <__s2b+0x4c>
 8009e50:	f1a5 0408 	sub.w	r4, r5, #8
 8009e54:	444c      	add	r4, r9
 8009e56:	1b2d      	subs	r5, r5, r4
 8009e58:	1963      	adds	r3, r4, r5
 8009e5a:	42bb      	cmp	r3, r7
 8009e5c:	db04      	blt.n	8009e68 <__s2b+0x78>
 8009e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e62:	340a      	adds	r4, #10
 8009e64:	2509      	movs	r5, #9
 8009e66:	e7f6      	b.n	8009e56 <__s2b+0x66>
 8009e68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e6c:	4601      	mov	r1, r0
 8009e6e:	3b30      	subs	r3, #48	@ 0x30
 8009e70:	220a      	movs	r2, #10
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7ff ff76 	bl	8009d64 <__multadd>
 8009e78:	e7ee      	b.n	8009e58 <__s2b+0x68>
 8009e7a:	bf00      	nop
 8009e7c:	0800d649 	.word	0x0800d649
 8009e80:	0800d65a 	.word	0x0800d65a

08009e84 <__hi0bits>:
 8009e84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009e88:	4603      	mov	r3, r0
 8009e8a:	bf36      	itet	cc
 8009e8c:	0403      	lslcc	r3, r0, #16
 8009e8e:	2000      	movcs	r0, #0
 8009e90:	2010      	movcc	r0, #16
 8009e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e96:	bf3c      	itt	cc
 8009e98:	021b      	lslcc	r3, r3, #8
 8009e9a:	3008      	addcc	r0, #8
 8009e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ea0:	bf3c      	itt	cc
 8009ea2:	011b      	lslcc	r3, r3, #4
 8009ea4:	3004      	addcc	r0, #4
 8009ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eaa:	bf3c      	itt	cc
 8009eac:	009b      	lslcc	r3, r3, #2
 8009eae:	3002      	addcc	r0, #2
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	db05      	blt.n	8009ec0 <__hi0bits+0x3c>
 8009eb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009eb8:	f100 0001 	add.w	r0, r0, #1
 8009ebc:	bf08      	it	eq
 8009ebe:	2020      	moveq	r0, #32
 8009ec0:	4770      	bx	lr

08009ec2 <__lo0bits>:
 8009ec2:	6803      	ldr	r3, [r0, #0]
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	f013 0007 	ands.w	r0, r3, #7
 8009eca:	d00b      	beq.n	8009ee4 <__lo0bits+0x22>
 8009ecc:	07d9      	lsls	r1, r3, #31
 8009ece:	d421      	bmi.n	8009f14 <__lo0bits+0x52>
 8009ed0:	0798      	lsls	r0, r3, #30
 8009ed2:	bf49      	itett	mi
 8009ed4:	085b      	lsrmi	r3, r3, #1
 8009ed6:	089b      	lsrpl	r3, r3, #2
 8009ed8:	2001      	movmi	r0, #1
 8009eda:	6013      	strmi	r3, [r2, #0]
 8009edc:	bf5c      	itt	pl
 8009ede:	6013      	strpl	r3, [r2, #0]
 8009ee0:	2002      	movpl	r0, #2
 8009ee2:	4770      	bx	lr
 8009ee4:	b299      	uxth	r1, r3
 8009ee6:	b909      	cbnz	r1, 8009eec <__lo0bits+0x2a>
 8009ee8:	0c1b      	lsrs	r3, r3, #16
 8009eea:	2010      	movs	r0, #16
 8009eec:	b2d9      	uxtb	r1, r3
 8009eee:	b909      	cbnz	r1, 8009ef4 <__lo0bits+0x32>
 8009ef0:	3008      	adds	r0, #8
 8009ef2:	0a1b      	lsrs	r3, r3, #8
 8009ef4:	0719      	lsls	r1, r3, #28
 8009ef6:	bf04      	itt	eq
 8009ef8:	091b      	lsreq	r3, r3, #4
 8009efa:	3004      	addeq	r0, #4
 8009efc:	0799      	lsls	r1, r3, #30
 8009efe:	bf04      	itt	eq
 8009f00:	089b      	lsreq	r3, r3, #2
 8009f02:	3002      	addeq	r0, #2
 8009f04:	07d9      	lsls	r1, r3, #31
 8009f06:	d403      	bmi.n	8009f10 <__lo0bits+0x4e>
 8009f08:	085b      	lsrs	r3, r3, #1
 8009f0a:	f100 0001 	add.w	r0, r0, #1
 8009f0e:	d003      	beq.n	8009f18 <__lo0bits+0x56>
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	4770      	bx	lr
 8009f14:	2000      	movs	r0, #0
 8009f16:	4770      	bx	lr
 8009f18:	2020      	movs	r0, #32
 8009f1a:	4770      	bx	lr

08009f1c <__i2b>:
 8009f1c:	b510      	push	{r4, lr}
 8009f1e:	460c      	mov	r4, r1
 8009f20:	2101      	movs	r1, #1
 8009f22:	f7ff febd 	bl	8009ca0 <_Balloc>
 8009f26:	4602      	mov	r2, r0
 8009f28:	b928      	cbnz	r0, 8009f36 <__i2b+0x1a>
 8009f2a:	4b05      	ldr	r3, [pc, #20]	@ (8009f40 <__i2b+0x24>)
 8009f2c:	4805      	ldr	r0, [pc, #20]	@ (8009f44 <__i2b+0x28>)
 8009f2e:	f240 1145 	movw	r1, #325	@ 0x145
 8009f32:	f001 fc2d 	bl	800b790 <__assert_func>
 8009f36:	2301      	movs	r3, #1
 8009f38:	6144      	str	r4, [r0, #20]
 8009f3a:	6103      	str	r3, [r0, #16]
 8009f3c:	bd10      	pop	{r4, pc}
 8009f3e:	bf00      	nop
 8009f40:	0800d649 	.word	0x0800d649
 8009f44:	0800d65a 	.word	0x0800d65a

08009f48 <__multiply>:
 8009f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	4617      	mov	r7, r2
 8009f4e:	690a      	ldr	r2, [r1, #16]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	bfa8      	it	ge
 8009f56:	463b      	movge	r3, r7
 8009f58:	4689      	mov	r9, r1
 8009f5a:	bfa4      	itt	ge
 8009f5c:	460f      	movge	r7, r1
 8009f5e:	4699      	movge	r9, r3
 8009f60:	693d      	ldr	r5, [r7, #16]
 8009f62:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	eb05 060a 	add.w	r6, r5, sl
 8009f6e:	42b3      	cmp	r3, r6
 8009f70:	b085      	sub	sp, #20
 8009f72:	bfb8      	it	lt
 8009f74:	3101      	addlt	r1, #1
 8009f76:	f7ff fe93 	bl	8009ca0 <_Balloc>
 8009f7a:	b930      	cbnz	r0, 8009f8a <__multiply+0x42>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	4b41      	ldr	r3, [pc, #260]	@ (800a084 <__multiply+0x13c>)
 8009f80:	4841      	ldr	r0, [pc, #260]	@ (800a088 <__multiply+0x140>)
 8009f82:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009f86:	f001 fc03 	bl	800b790 <__assert_func>
 8009f8a:	f100 0414 	add.w	r4, r0, #20
 8009f8e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009f92:	4623      	mov	r3, r4
 8009f94:	2200      	movs	r2, #0
 8009f96:	4573      	cmp	r3, lr
 8009f98:	d320      	bcc.n	8009fdc <__multiply+0x94>
 8009f9a:	f107 0814 	add.w	r8, r7, #20
 8009f9e:	f109 0114 	add.w	r1, r9, #20
 8009fa2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009fa6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009faa:	9302      	str	r3, [sp, #8]
 8009fac:	1beb      	subs	r3, r5, r7
 8009fae:	3b15      	subs	r3, #21
 8009fb0:	f023 0303 	bic.w	r3, r3, #3
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	3715      	adds	r7, #21
 8009fb8:	42bd      	cmp	r5, r7
 8009fba:	bf38      	it	cc
 8009fbc:	2304      	movcc	r3, #4
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	9b02      	ldr	r3, [sp, #8]
 8009fc2:	9103      	str	r1, [sp, #12]
 8009fc4:	428b      	cmp	r3, r1
 8009fc6:	d80c      	bhi.n	8009fe2 <__multiply+0x9a>
 8009fc8:	2e00      	cmp	r6, #0
 8009fca:	dd03      	ble.n	8009fd4 <__multiply+0x8c>
 8009fcc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d055      	beq.n	800a080 <__multiply+0x138>
 8009fd4:	6106      	str	r6, [r0, #16]
 8009fd6:	b005      	add	sp, #20
 8009fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fdc:	f843 2b04 	str.w	r2, [r3], #4
 8009fe0:	e7d9      	b.n	8009f96 <__multiply+0x4e>
 8009fe2:	f8b1 a000 	ldrh.w	sl, [r1]
 8009fe6:	f1ba 0f00 	cmp.w	sl, #0
 8009fea:	d01f      	beq.n	800a02c <__multiply+0xe4>
 8009fec:	46c4      	mov	ip, r8
 8009fee:	46a1      	mov	r9, r4
 8009ff0:	2700      	movs	r7, #0
 8009ff2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8009ffa:	fa1f fb82 	uxth.w	fp, r2
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	fb0a 330b 	mla	r3, sl, fp, r3
 800a004:	443b      	add	r3, r7
 800a006:	f8d9 7000 	ldr.w	r7, [r9]
 800a00a:	0c12      	lsrs	r2, r2, #16
 800a00c:	0c3f      	lsrs	r7, r7, #16
 800a00e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a012:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a016:	b29b      	uxth	r3, r3
 800a018:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a01c:	4565      	cmp	r5, ip
 800a01e:	f849 3b04 	str.w	r3, [r9], #4
 800a022:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a026:	d8e4      	bhi.n	8009ff2 <__multiply+0xaa>
 800a028:	9b01      	ldr	r3, [sp, #4]
 800a02a:	50e7      	str	r7, [r4, r3]
 800a02c:	9b03      	ldr	r3, [sp, #12]
 800a02e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a032:	3104      	adds	r1, #4
 800a034:	f1b9 0f00 	cmp.w	r9, #0
 800a038:	d020      	beq.n	800a07c <__multiply+0x134>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	4647      	mov	r7, r8
 800a03e:	46a4      	mov	ip, r4
 800a040:	f04f 0a00 	mov.w	sl, #0
 800a044:	f8b7 b000 	ldrh.w	fp, [r7]
 800a048:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a04c:	fb09 220b 	mla	r2, r9, fp, r2
 800a050:	4452      	add	r2, sl
 800a052:	b29b      	uxth	r3, r3
 800a054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a058:	f84c 3b04 	str.w	r3, [ip], #4
 800a05c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a060:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a064:	f8bc 3000 	ldrh.w	r3, [ip]
 800a068:	fb09 330a 	mla	r3, r9, sl, r3
 800a06c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a070:	42bd      	cmp	r5, r7
 800a072:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a076:	d8e5      	bhi.n	800a044 <__multiply+0xfc>
 800a078:	9a01      	ldr	r2, [sp, #4]
 800a07a:	50a3      	str	r3, [r4, r2]
 800a07c:	3404      	adds	r4, #4
 800a07e:	e79f      	b.n	8009fc0 <__multiply+0x78>
 800a080:	3e01      	subs	r6, #1
 800a082:	e7a1      	b.n	8009fc8 <__multiply+0x80>
 800a084:	0800d649 	.word	0x0800d649
 800a088:	0800d65a 	.word	0x0800d65a

0800a08c <__pow5mult>:
 800a08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a090:	4615      	mov	r5, r2
 800a092:	f012 0203 	ands.w	r2, r2, #3
 800a096:	4607      	mov	r7, r0
 800a098:	460e      	mov	r6, r1
 800a09a:	d007      	beq.n	800a0ac <__pow5mult+0x20>
 800a09c:	4c25      	ldr	r4, [pc, #148]	@ (800a134 <__pow5mult+0xa8>)
 800a09e:	3a01      	subs	r2, #1
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0a6:	f7ff fe5d 	bl	8009d64 <__multadd>
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	10ad      	asrs	r5, r5, #2
 800a0ae:	d03d      	beq.n	800a12c <__pow5mult+0xa0>
 800a0b0:	69fc      	ldr	r4, [r7, #28]
 800a0b2:	b97c      	cbnz	r4, 800a0d4 <__pow5mult+0x48>
 800a0b4:	2010      	movs	r0, #16
 800a0b6:	f7ff fd3d 	bl	8009b34 <malloc>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	61f8      	str	r0, [r7, #28]
 800a0be:	b928      	cbnz	r0, 800a0cc <__pow5mult+0x40>
 800a0c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a138 <__pow5mult+0xac>)
 800a0c2:	481e      	ldr	r0, [pc, #120]	@ (800a13c <__pow5mult+0xb0>)
 800a0c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a0c8:	f001 fb62 	bl	800b790 <__assert_func>
 800a0cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0d0:	6004      	str	r4, [r0, #0]
 800a0d2:	60c4      	str	r4, [r0, #12]
 800a0d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a0d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0dc:	b94c      	cbnz	r4, 800a0f2 <__pow5mult+0x66>
 800a0de:	f240 2171 	movw	r1, #625	@ 0x271
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	f7ff ff1a 	bl	8009f1c <__i2b>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	6003      	str	r3, [r0, #0]
 800a0f2:	f04f 0900 	mov.w	r9, #0
 800a0f6:	07eb      	lsls	r3, r5, #31
 800a0f8:	d50a      	bpl.n	800a110 <__pow5mult+0x84>
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	4638      	mov	r0, r7
 800a100:	f7ff ff22 	bl	8009f48 <__multiply>
 800a104:	4631      	mov	r1, r6
 800a106:	4680      	mov	r8, r0
 800a108:	4638      	mov	r0, r7
 800a10a:	f7ff fe09 	bl	8009d20 <_Bfree>
 800a10e:	4646      	mov	r6, r8
 800a110:	106d      	asrs	r5, r5, #1
 800a112:	d00b      	beq.n	800a12c <__pow5mult+0xa0>
 800a114:	6820      	ldr	r0, [r4, #0]
 800a116:	b938      	cbnz	r0, 800a128 <__pow5mult+0x9c>
 800a118:	4622      	mov	r2, r4
 800a11a:	4621      	mov	r1, r4
 800a11c:	4638      	mov	r0, r7
 800a11e:	f7ff ff13 	bl	8009f48 <__multiply>
 800a122:	6020      	str	r0, [r4, #0]
 800a124:	f8c0 9000 	str.w	r9, [r0]
 800a128:	4604      	mov	r4, r0
 800a12a:	e7e4      	b.n	800a0f6 <__pow5mult+0x6a>
 800a12c:	4630      	mov	r0, r6
 800a12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a132:	bf00      	nop
 800a134:	0800d76c 	.word	0x0800d76c
 800a138:	0800d5da 	.word	0x0800d5da
 800a13c:	0800d65a 	.word	0x0800d65a

0800a140 <__lshift>:
 800a140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a144:	460c      	mov	r4, r1
 800a146:	6849      	ldr	r1, [r1, #4]
 800a148:	6923      	ldr	r3, [r4, #16]
 800a14a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a14e:	68a3      	ldr	r3, [r4, #8]
 800a150:	4607      	mov	r7, r0
 800a152:	4691      	mov	r9, r2
 800a154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a158:	f108 0601 	add.w	r6, r8, #1
 800a15c:	42b3      	cmp	r3, r6
 800a15e:	db0b      	blt.n	800a178 <__lshift+0x38>
 800a160:	4638      	mov	r0, r7
 800a162:	f7ff fd9d 	bl	8009ca0 <_Balloc>
 800a166:	4605      	mov	r5, r0
 800a168:	b948      	cbnz	r0, 800a17e <__lshift+0x3e>
 800a16a:	4602      	mov	r2, r0
 800a16c:	4b28      	ldr	r3, [pc, #160]	@ (800a210 <__lshift+0xd0>)
 800a16e:	4829      	ldr	r0, [pc, #164]	@ (800a214 <__lshift+0xd4>)
 800a170:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a174:	f001 fb0c 	bl	800b790 <__assert_func>
 800a178:	3101      	adds	r1, #1
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	e7ee      	b.n	800a15c <__lshift+0x1c>
 800a17e:	2300      	movs	r3, #0
 800a180:	f100 0114 	add.w	r1, r0, #20
 800a184:	f100 0210 	add.w	r2, r0, #16
 800a188:	4618      	mov	r0, r3
 800a18a:	4553      	cmp	r3, sl
 800a18c:	db33      	blt.n	800a1f6 <__lshift+0xb6>
 800a18e:	6920      	ldr	r0, [r4, #16]
 800a190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a194:	f104 0314 	add.w	r3, r4, #20
 800a198:	f019 091f 	ands.w	r9, r9, #31
 800a19c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1a4:	d02b      	beq.n	800a1fe <__lshift+0xbe>
 800a1a6:	f1c9 0e20 	rsb	lr, r9, #32
 800a1aa:	468a      	mov	sl, r1
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	6818      	ldr	r0, [r3, #0]
 800a1b0:	fa00 f009 	lsl.w	r0, r0, r9
 800a1b4:	4310      	orrs	r0, r2
 800a1b6:	f84a 0b04 	str.w	r0, [sl], #4
 800a1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1be:	459c      	cmp	ip, r3
 800a1c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1c4:	d8f3      	bhi.n	800a1ae <__lshift+0x6e>
 800a1c6:	ebac 0304 	sub.w	r3, ip, r4
 800a1ca:	3b15      	subs	r3, #21
 800a1cc:	f023 0303 	bic.w	r3, r3, #3
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	f104 0015 	add.w	r0, r4, #21
 800a1d6:	4560      	cmp	r0, ip
 800a1d8:	bf88      	it	hi
 800a1da:	2304      	movhi	r3, #4
 800a1dc:	50ca      	str	r2, [r1, r3]
 800a1de:	b10a      	cbz	r2, 800a1e4 <__lshift+0xa4>
 800a1e0:	f108 0602 	add.w	r6, r8, #2
 800a1e4:	3e01      	subs	r6, #1
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	612e      	str	r6, [r5, #16]
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	f7ff fd98 	bl	8009d20 <_Bfree>
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	e7c5      	b.n	800a18a <__lshift+0x4a>
 800a1fe:	3904      	subs	r1, #4
 800a200:	f853 2b04 	ldr.w	r2, [r3], #4
 800a204:	f841 2f04 	str.w	r2, [r1, #4]!
 800a208:	459c      	cmp	ip, r3
 800a20a:	d8f9      	bhi.n	800a200 <__lshift+0xc0>
 800a20c:	e7ea      	b.n	800a1e4 <__lshift+0xa4>
 800a20e:	bf00      	nop
 800a210:	0800d649 	.word	0x0800d649
 800a214:	0800d65a 	.word	0x0800d65a

0800a218 <__mcmp>:
 800a218:	690a      	ldr	r2, [r1, #16]
 800a21a:	4603      	mov	r3, r0
 800a21c:	6900      	ldr	r0, [r0, #16]
 800a21e:	1a80      	subs	r0, r0, r2
 800a220:	b530      	push	{r4, r5, lr}
 800a222:	d10e      	bne.n	800a242 <__mcmp+0x2a>
 800a224:	3314      	adds	r3, #20
 800a226:	3114      	adds	r1, #20
 800a228:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a22c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a238:	4295      	cmp	r5, r2
 800a23a:	d003      	beq.n	800a244 <__mcmp+0x2c>
 800a23c:	d205      	bcs.n	800a24a <__mcmp+0x32>
 800a23e:	f04f 30ff 	mov.w	r0, #4294967295
 800a242:	bd30      	pop	{r4, r5, pc}
 800a244:	42a3      	cmp	r3, r4
 800a246:	d3f3      	bcc.n	800a230 <__mcmp+0x18>
 800a248:	e7fb      	b.n	800a242 <__mcmp+0x2a>
 800a24a:	2001      	movs	r0, #1
 800a24c:	e7f9      	b.n	800a242 <__mcmp+0x2a>
	...

0800a250 <__mdiff>:
 800a250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	4689      	mov	r9, r1
 800a256:	4606      	mov	r6, r0
 800a258:	4611      	mov	r1, r2
 800a25a:	4648      	mov	r0, r9
 800a25c:	4614      	mov	r4, r2
 800a25e:	f7ff ffdb 	bl	800a218 <__mcmp>
 800a262:	1e05      	subs	r5, r0, #0
 800a264:	d112      	bne.n	800a28c <__mdiff+0x3c>
 800a266:	4629      	mov	r1, r5
 800a268:	4630      	mov	r0, r6
 800a26a:	f7ff fd19 	bl	8009ca0 <_Balloc>
 800a26e:	4602      	mov	r2, r0
 800a270:	b928      	cbnz	r0, 800a27e <__mdiff+0x2e>
 800a272:	4b3f      	ldr	r3, [pc, #252]	@ (800a370 <__mdiff+0x120>)
 800a274:	f240 2137 	movw	r1, #567	@ 0x237
 800a278:	483e      	ldr	r0, [pc, #248]	@ (800a374 <__mdiff+0x124>)
 800a27a:	f001 fa89 	bl	800b790 <__assert_func>
 800a27e:	2301      	movs	r3, #1
 800a280:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a284:	4610      	mov	r0, r2
 800a286:	b003      	add	sp, #12
 800a288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28c:	bfbc      	itt	lt
 800a28e:	464b      	movlt	r3, r9
 800a290:	46a1      	movlt	r9, r4
 800a292:	4630      	mov	r0, r6
 800a294:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a298:	bfba      	itte	lt
 800a29a:	461c      	movlt	r4, r3
 800a29c:	2501      	movlt	r5, #1
 800a29e:	2500      	movge	r5, #0
 800a2a0:	f7ff fcfe 	bl	8009ca0 <_Balloc>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	b918      	cbnz	r0, 800a2b0 <__mdiff+0x60>
 800a2a8:	4b31      	ldr	r3, [pc, #196]	@ (800a370 <__mdiff+0x120>)
 800a2aa:	f240 2145 	movw	r1, #581	@ 0x245
 800a2ae:	e7e3      	b.n	800a278 <__mdiff+0x28>
 800a2b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a2b4:	6926      	ldr	r6, [r4, #16]
 800a2b6:	60c5      	str	r5, [r0, #12]
 800a2b8:	f109 0310 	add.w	r3, r9, #16
 800a2bc:	f109 0514 	add.w	r5, r9, #20
 800a2c0:	f104 0e14 	add.w	lr, r4, #20
 800a2c4:	f100 0b14 	add.w	fp, r0, #20
 800a2c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a2cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	46d9      	mov	r9, fp
 800a2d4:	f04f 0c00 	mov.w	ip, #0
 800a2d8:	9b01      	ldr	r3, [sp, #4]
 800a2da:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a2de:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	fa1f f38a 	uxth.w	r3, sl
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	b283      	uxth	r3, r0
 800a2ec:	1acb      	subs	r3, r1, r3
 800a2ee:	0c00      	lsrs	r0, r0, #16
 800a2f0:	4463      	add	r3, ip
 800a2f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a2f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a300:	4576      	cmp	r6, lr
 800a302:	f849 3b04 	str.w	r3, [r9], #4
 800a306:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a30a:	d8e5      	bhi.n	800a2d8 <__mdiff+0x88>
 800a30c:	1b33      	subs	r3, r6, r4
 800a30e:	3b15      	subs	r3, #21
 800a310:	f023 0303 	bic.w	r3, r3, #3
 800a314:	3415      	adds	r4, #21
 800a316:	3304      	adds	r3, #4
 800a318:	42a6      	cmp	r6, r4
 800a31a:	bf38      	it	cc
 800a31c:	2304      	movcc	r3, #4
 800a31e:	441d      	add	r5, r3
 800a320:	445b      	add	r3, fp
 800a322:	461e      	mov	r6, r3
 800a324:	462c      	mov	r4, r5
 800a326:	4544      	cmp	r4, r8
 800a328:	d30e      	bcc.n	800a348 <__mdiff+0xf8>
 800a32a:	f108 0103 	add.w	r1, r8, #3
 800a32e:	1b49      	subs	r1, r1, r5
 800a330:	f021 0103 	bic.w	r1, r1, #3
 800a334:	3d03      	subs	r5, #3
 800a336:	45a8      	cmp	r8, r5
 800a338:	bf38      	it	cc
 800a33a:	2100      	movcc	r1, #0
 800a33c:	440b      	add	r3, r1
 800a33e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a342:	b191      	cbz	r1, 800a36a <__mdiff+0x11a>
 800a344:	6117      	str	r7, [r2, #16]
 800a346:	e79d      	b.n	800a284 <__mdiff+0x34>
 800a348:	f854 1b04 	ldr.w	r1, [r4], #4
 800a34c:	46e6      	mov	lr, ip
 800a34e:	0c08      	lsrs	r0, r1, #16
 800a350:	fa1c fc81 	uxtah	ip, ip, r1
 800a354:	4471      	add	r1, lr
 800a356:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a35a:	b289      	uxth	r1, r1
 800a35c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a360:	f846 1b04 	str.w	r1, [r6], #4
 800a364:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a368:	e7dd      	b.n	800a326 <__mdiff+0xd6>
 800a36a:	3f01      	subs	r7, #1
 800a36c:	e7e7      	b.n	800a33e <__mdiff+0xee>
 800a36e:	bf00      	nop
 800a370:	0800d649 	.word	0x0800d649
 800a374:	0800d65a 	.word	0x0800d65a

0800a378 <__ulp>:
 800a378:	b082      	sub	sp, #8
 800a37a:	ed8d 0b00 	vstr	d0, [sp]
 800a37e:	9a01      	ldr	r2, [sp, #4]
 800a380:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c0 <__ulp+0x48>)
 800a382:	4013      	ands	r3, r2
 800a384:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	dc08      	bgt.n	800a39e <__ulp+0x26>
 800a38c:	425b      	negs	r3, r3
 800a38e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a392:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a396:	da04      	bge.n	800a3a2 <__ulp+0x2a>
 800a398:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a39c:	4113      	asrs	r3, r2
 800a39e:	2200      	movs	r2, #0
 800a3a0:	e008      	b.n	800a3b4 <__ulp+0x3c>
 800a3a2:	f1a2 0314 	sub.w	r3, r2, #20
 800a3a6:	2b1e      	cmp	r3, #30
 800a3a8:	bfda      	itte	le
 800a3aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a3ae:	40da      	lsrle	r2, r3
 800a3b0:	2201      	movgt	r2, #1
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	ec41 0b10 	vmov	d0, r0, r1
 800a3bc:	b002      	add	sp, #8
 800a3be:	4770      	bx	lr
 800a3c0:	7ff00000 	.word	0x7ff00000

0800a3c4 <__b2d>:
 800a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c8:	6906      	ldr	r6, [r0, #16]
 800a3ca:	f100 0814 	add.w	r8, r0, #20
 800a3ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a3d2:	1f37      	subs	r7, r6, #4
 800a3d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a3d8:	4610      	mov	r0, r2
 800a3da:	f7ff fd53 	bl	8009e84 <__hi0bits>
 800a3de:	f1c0 0320 	rsb	r3, r0, #32
 800a3e2:	280a      	cmp	r0, #10
 800a3e4:	600b      	str	r3, [r1, #0]
 800a3e6:	491b      	ldr	r1, [pc, #108]	@ (800a454 <__b2d+0x90>)
 800a3e8:	dc15      	bgt.n	800a416 <__b2d+0x52>
 800a3ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800a3ee:	fa22 f30c 	lsr.w	r3, r2, ip
 800a3f2:	45b8      	cmp	r8, r7
 800a3f4:	ea43 0501 	orr.w	r5, r3, r1
 800a3f8:	bf34      	ite	cc
 800a3fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a3fe:	2300      	movcs	r3, #0
 800a400:	3015      	adds	r0, #21
 800a402:	fa02 f000 	lsl.w	r0, r2, r0
 800a406:	fa23 f30c 	lsr.w	r3, r3, ip
 800a40a:	4303      	orrs	r3, r0
 800a40c:	461c      	mov	r4, r3
 800a40e:	ec45 4b10 	vmov	d0, r4, r5
 800a412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a416:	45b8      	cmp	r8, r7
 800a418:	bf3a      	itte	cc
 800a41a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a41e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a422:	2300      	movcs	r3, #0
 800a424:	380b      	subs	r0, #11
 800a426:	d012      	beq.n	800a44e <__b2d+0x8a>
 800a428:	f1c0 0120 	rsb	r1, r0, #32
 800a42c:	fa23 f401 	lsr.w	r4, r3, r1
 800a430:	4082      	lsls	r2, r0
 800a432:	4322      	orrs	r2, r4
 800a434:	4547      	cmp	r7, r8
 800a436:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a43a:	bf8c      	ite	hi
 800a43c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a440:	2200      	movls	r2, #0
 800a442:	4083      	lsls	r3, r0
 800a444:	40ca      	lsrs	r2, r1
 800a446:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a44a:	4313      	orrs	r3, r2
 800a44c:	e7de      	b.n	800a40c <__b2d+0x48>
 800a44e:	ea42 0501 	orr.w	r5, r2, r1
 800a452:	e7db      	b.n	800a40c <__b2d+0x48>
 800a454:	3ff00000 	.word	0x3ff00000

0800a458 <__d2b>:
 800a458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	460f      	mov	r7, r1
 800a45e:	2101      	movs	r1, #1
 800a460:	ec59 8b10 	vmov	r8, r9, d0
 800a464:	4616      	mov	r6, r2
 800a466:	f7ff fc1b 	bl	8009ca0 <_Balloc>
 800a46a:	4604      	mov	r4, r0
 800a46c:	b930      	cbnz	r0, 800a47c <__d2b+0x24>
 800a46e:	4602      	mov	r2, r0
 800a470:	4b23      	ldr	r3, [pc, #140]	@ (800a500 <__d2b+0xa8>)
 800a472:	4824      	ldr	r0, [pc, #144]	@ (800a504 <__d2b+0xac>)
 800a474:	f240 310f 	movw	r1, #783	@ 0x30f
 800a478:	f001 f98a 	bl	800b790 <__assert_func>
 800a47c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a484:	b10d      	cbz	r5, 800a48a <__d2b+0x32>
 800a486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a48a:	9301      	str	r3, [sp, #4]
 800a48c:	f1b8 0300 	subs.w	r3, r8, #0
 800a490:	d023      	beq.n	800a4da <__d2b+0x82>
 800a492:	4668      	mov	r0, sp
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	f7ff fd14 	bl	8009ec2 <__lo0bits>
 800a49a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a49e:	b1d0      	cbz	r0, 800a4d6 <__d2b+0x7e>
 800a4a0:	f1c0 0320 	rsb	r3, r0, #32
 800a4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a8:	430b      	orrs	r3, r1
 800a4aa:	40c2      	lsrs	r2, r0
 800a4ac:	6163      	str	r3, [r4, #20]
 800a4ae:	9201      	str	r2, [sp, #4]
 800a4b0:	9b01      	ldr	r3, [sp, #4]
 800a4b2:	61a3      	str	r3, [r4, #24]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bf0c      	ite	eq
 800a4b8:	2201      	moveq	r2, #1
 800a4ba:	2202      	movne	r2, #2
 800a4bc:	6122      	str	r2, [r4, #16]
 800a4be:	b1a5      	cbz	r5, 800a4ea <__d2b+0x92>
 800a4c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a4c4:	4405      	add	r5, r0
 800a4c6:	603d      	str	r5, [r7, #0]
 800a4c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a4cc:	6030      	str	r0, [r6, #0]
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	b003      	add	sp, #12
 800a4d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	6161      	str	r1, [r4, #20]
 800a4d8:	e7ea      	b.n	800a4b0 <__d2b+0x58>
 800a4da:	a801      	add	r0, sp, #4
 800a4dc:	f7ff fcf1 	bl	8009ec2 <__lo0bits>
 800a4e0:	9b01      	ldr	r3, [sp, #4]
 800a4e2:	6163      	str	r3, [r4, #20]
 800a4e4:	3020      	adds	r0, #32
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	e7e8      	b.n	800a4bc <__d2b+0x64>
 800a4ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a4f2:	6038      	str	r0, [r7, #0]
 800a4f4:	6918      	ldr	r0, [r3, #16]
 800a4f6:	f7ff fcc5 	bl	8009e84 <__hi0bits>
 800a4fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4fe:	e7e5      	b.n	800a4cc <__d2b+0x74>
 800a500:	0800d649 	.word	0x0800d649
 800a504:	0800d65a 	.word	0x0800d65a

0800a508 <__ratio>:
 800a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	b085      	sub	sp, #20
 800a50e:	e9cd 1000 	strd	r1, r0, [sp]
 800a512:	a902      	add	r1, sp, #8
 800a514:	f7ff ff56 	bl	800a3c4 <__b2d>
 800a518:	9800      	ldr	r0, [sp, #0]
 800a51a:	a903      	add	r1, sp, #12
 800a51c:	ec55 4b10 	vmov	r4, r5, d0
 800a520:	f7ff ff50 	bl	800a3c4 <__b2d>
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	6919      	ldr	r1, [r3, #16]
 800a528:	9b00      	ldr	r3, [sp, #0]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	1ac9      	subs	r1, r1, r3
 800a52e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	ec5b ab10 	vmov	sl, fp, d0
 800a538:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bfce      	itee	gt
 800a540:	462a      	movgt	r2, r5
 800a542:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a546:	465a      	movle	r2, fp
 800a548:	462f      	mov	r7, r5
 800a54a:	46d9      	mov	r9, fp
 800a54c:	bfcc      	ite	gt
 800a54e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a552:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a556:	464b      	mov	r3, r9
 800a558:	4652      	mov	r2, sl
 800a55a:	4620      	mov	r0, r4
 800a55c:	4639      	mov	r1, r7
 800a55e:	f7f6 f995 	bl	800088c <__aeabi_ddiv>
 800a562:	ec41 0b10 	vmov	d0, r0, r1
 800a566:	b005      	add	sp, #20
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a56c <__copybits>:
 800a56c:	3901      	subs	r1, #1
 800a56e:	b570      	push	{r4, r5, r6, lr}
 800a570:	1149      	asrs	r1, r1, #5
 800a572:	6914      	ldr	r4, [r2, #16]
 800a574:	3101      	adds	r1, #1
 800a576:	f102 0314 	add.w	r3, r2, #20
 800a57a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a57e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a582:	1f05      	subs	r5, r0, #4
 800a584:	42a3      	cmp	r3, r4
 800a586:	d30c      	bcc.n	800a5a2 <__copybits+0x36>
 800a588:	1aa3      	subs	r3, r4, r2
 800a58a:	3b11      	subs	r3, #17
 800a58c:	f023 0303 	bic.w	r3, r3, #3
 800a590:	3211      	adds	r2, #17
 800a592:	42a2      	cmp	r2, r4
 800a594:	bf88      	it	hi
 800a596:	2300      	movhi	r3, #0
 800a598:	4418      	add	r0, r3
 800a59a:	2300      	movs	r3, #0
 800a59c:	4288      	cmp	r0, r1
 800a59e:	d305      	bcc.n	800a5ac <__copybits+0x40>
 800a5a0:	bd70      	pop	{r4, r5, r6, pc}
 800a5a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5aa:	e7eb      	b.n	800a584 <__copybits+0x18>
 800a5ac:	f840 3b04 	str.w	r3, [r0], #4
 800a5b0:	e7f4      	b.n	800a59c <__copybits+0x30>

0800a5b2 <__any_on>:
 800a5b2:	f100 0214 	add.w	r2, r0, #20
 800a5b6:	6900      	ldr	r0, [r0, #16]
 800a5b8:	114b      	asrs	r3, r1, #5
 800a5ba:	4298      	cmp	r0, r3
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	db11      	blt.n	800a5e4 <__any_on+0x32>
 800a5c0:	dd0a      	ble.n	800a5d8 <__any_on+0x26>
 800a5c2:	f011 011f 	ands.w	r1, r1, #31
 800a5c6:	d007      	beq.n	800a5d8 <__any_on+0x26>
 800a5c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a5cc:	fa24 f001 	lsr.w	r0, r4, r1
 800a5d0:	fa00 f101 	lsl.w	r1, r0, r1
 800a5d4:	428c      	cmp	r4, r1
 800a5d6:	d10b      	bne.n	800a5f0 <__any_on+0x3e>
 800a5d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d803      	bhi.n	800a5e8 <__any_on+0x36>
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	bd10      	pop	{r4, pc}
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	e7f7      	b.n	800a5d8 <__any_on+0x26>
 800a5e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5ec:	2900      	cmp	r1, #0
 800a5ee:	d0f5      	beq.n	800a5dc <__any_on+0x2a>
 800a5f0:	2001      	movs	r0, #1
 800a5f2:	e7f6      	b.n	800a5e2 <__any_on+0x30>

0800a5f4 <sulp>:
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	460d      	mov	r5, r1
 800a5fa:	ec45 4b10 	vmov	d0, r4, r5
 800a5fe:	4616      	mov	r6, r2
 800a600:	f7ff feba 	bl	800a378 <__ulp>
 800a604:	ec51 0b10 	vmov	r0, r1, d0
 800a608:	b17e      	cbz	r6, 800a62a <sulp+0x36>
 800a60a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a60e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a612:	2b00      	cmp	r3, #0
 800a614:	dd09      	ble.n	800a62a <sulp+0x36>
 800a616:	051b      	lsls	r3, r3, #20
 800a618:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a61c:	2400      	movs	r4, #0
 800a61e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a622:	4622      	mov	r2, r4
 800a624:	462b      	mov	r3, r5
 800a626:	f7f6 f807 	bl	8000638 <__aeabi_dmul>
 800a62a:	ec41 0b10 	vmov	d0, r0, r1
 800a62e:	bd70      	pop	{r4, r5, r6, pc}

0800a630 <_strtod_l>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	b09f      	sub	sp, #124	@ 0x7c
 800a636:	460c      	mov	r4, r1
 800a638:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a63a:	2200      	movs	r2, #0
 800a63c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a63e:	9005      	str	r0, [sp, #20]
 800a640:	f04f 0a00 	mov.w	sl, #0
 800a644:	f04f 0b00 	mov.w	fp, #0
 800a648:	460a      	mov	r2, r1
 800a64a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a64c:	7811      	ldrb	r1, [r2, #0]
 800a64e:	292b      	cmp	r1, #43	@ 0x2b
 800a650:	d04a      	beq.n	800a6e8 <_strtod_l+0xb8>
 800a652:	d838      	bhi.n	800a6c6 <_strtod_l+0x96>
 800a654:	290d      	cmp	r1, #13
 800a656:	d832      	bhi.n	800a6be <_strtod_l+0x8e>
 800a658:	2908      	cmp	r1, #8
 800a65a:	d832      	bhi.n	800a6c2 <_strtod_l+0x92>
 800a65c:	2900      	cmp	r1, #0
 800a65e:	d03b      	beq.n	800a6d8 <_strtod_l+0xa8>
 800a660:	2200      	movs	r2, #0
 800a662:	920e      	str	r2, [sp, #56]	@ 0x38
 800a664:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a666:	782a      	ldrb	r2, [r5, #0]
 800a668:	2a30      	cmp	r2, #48	@ 0x30
 800a66a:	f040 80b2 	bne.w	800a7d2 <_strtod_l+0x1a2>
 800a66e:	786a      	ldrb	r2, [r5, #1]
 800a670:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a674:	2a58      	cmp	r2, #88	@ 0x58
 800a676:	d16e      	bne.n	800a756 <_strtod_l+0x126>
 800a678:	9302      	str	r3, [sp, #8]
 800a67a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	4a8f      	ldr	r2, [pc, #572]	@ (800a8c0 <_strtod_l+0x290>)
 800a684:	9805      	ldr	r0, [sp, #20]
 800a686:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a688:	a919      	add	r1, sp, #100	@ 0x64
 800a68a:	f001 f91b 	bl	800b8c4 <__gethex>
 800a68e:	f010 060f 	ands.w	r6, r0, #15
 800a692:	4604      	mov	r4, r0
 800a694:	d005      	beq.n	800a6a2 <_strtod_l+0x72>
 800a696:	2e06      	cmp	r6, #6
 800a698:	d128      	bne.n	800a6ec <_strtod_l+0xbc>
 800a69a:	3501      	adds	r5, #1
 800a69c:	2300      	movs	r3, #0
 800a69e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a6a0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a6a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f040 858e 	bne.w	800b1c6 <_strtod_l+0xb96>
 800a6aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6ac:	b1cb      	cbz	r3, 800a6e2 <_strtod_l+0xb2>
 800a6ae:	4652      	mov	r2, sl
 800a6b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a6b4:	ec43 2b10 	vmov	d0, r2, r3
 800a6b8:	b01f      	add	sp, #124	@ 0x7c
 800a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6be:	2920      	cmp	r1, #32
 800a6c0:	d1ce      	bne.n	800a660 <_strtod_l+0x30>
 800a6c2:	3201      	adds	r2, #1
 800a6c4:	e7c1      	b.n	800a64a <_strtod_l+0x1a>
 800a6c6:	292d      	cmp	r1, #45	@ 0x2d
 800a6c8:	d1ca      	bne.n	800a660 <_strtod_l+0x30>
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	910e      	str	r1, [sp, #56]	@ 0x38
 800a6ce:	1c51      	adds	r1, r2, #1
 800a6d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a6d2:	7852      	ldrb	r2, [r2, #1]
 800a6d4:	2a00      	cmp	r2, #0
 800a6d6:	d1c5      	bne.n	800a664 <_strtod_l+0x34>
 800a6d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6da:	9419      	str	r4, [sp, #100]	@ 0x64
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f040 8570 	bne.w	800b1c2 <_strtod_l+0xb92>
 800a6e2:	4652      	mov	r2, sl
 800a6e4:	465b      	mov	r3, fp
 800a6e6:	e7e5      	b.n	800a6b4 <_strtod_l+0x84>
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	e7ef      	b.n	800a6cc <_strtod_l+0x9c>
 800a6ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a6ee:	b13a      	cbz	r2, 800a700 <_strtod_l+0xd0>
 800a6f0:	2135      	movs	r1, #53	@ 0x35
 800a6f2:	a81c      	add	r0, sp, #112	@ 0x70
 800a6f4:	f7ff ff3a 	bl	800a56c <__copybits>
 800a6f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6fa:	9805      	ldr	r0, [sp, #20]
 800a6fc:	f7ff fb10 	bl	8009d20 <_Bfree>
 800a700:	3e01      	subs	r6, #1
 800a702:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a704:	2e04      	cmp	r6, #4
 800a706:	d806      	bhi.n	800a716 <_strtod_l+0xe6>
 800a708:	e8df f006 	tbb	[pc, r6]
 800a70c:	201d0314 	.word	0x201d0314
 800a710:	14          	.byte	0x14
 800a711:	00          	.byte	0x00
 800a712:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a716:	05e1      	lsls	r1, r4, #23
 800a718:	bf48      	it	mi
 800a71a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a71e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a722:	0d1b      	lsrs	r3, r3, #20
 800a724:	051b      	lsls	r3, r3, #20
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1bb      	bne.n	800a6a2 <_strtod_l+0x72>
 800a72a:	f7fe fb1d 	bl	8008d68 <__errno>
 800a72e:	2322      	movs	r3, #34	@ 0x22
 800a730:	6003      	str	r3, [r0, #0]
 800a732:	e7b6      	b.n	800a6a2 <_strtod_l+0x72>
 800a734:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a738:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a73c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a740:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a744:	e7e7      	b.n	800a716 <_strtod_l+0xe6>
 800a746:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a8c8 <_strtod_l+0x298>
 800a74a:	e7e4      	b.n	800a716 <_strtod_l+0xe6>
 800a74c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a750:	f04f 3aff 	mov.w	sl, #4294967295
 800a754:	e7df      	b.n	800a716 <_strtod_l+0xe6>
 800a756:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a75c:	785b      	ldrb	r3, [r3, #1]
 800a75e:	2b30      	cmp	r3, #48	@ 0x30
 800a760:	d0f9      	beq.n	800a756 <_strtod_l+0x126>
 800a762:	2b00      	cmp	r3, #0
 800a764:	d09d      	beq.n	800a6a2 <_strtod_l+0x72>
 800a766:	2301      	movs	r3, #1
 800a768:	2700      	movs	r7, #0
 800a76a:	9308      	str	r3, [sp, #32]
 800a76c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a76e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a770:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a772:	46b9      	mov	r9, r7
 800a774:	220a      	movs	r2, #10
 800a776:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a778:	7805      	ldrb	r5, [r0, #0]
 800a77a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a77e:	b2d9      	uxtb	r1, r3
 800a780:	2909      	cmp	r1, #9
 800a782:	d928      	bls.n	800a7d6 <_strtod_l+0x1a6>
 800a784:	494f      	ldr	r1, [pc, #316]	@ (800a8c4 <_strtod_l+0x294>)
 800a786:	2201      	movs	r2, #1
 800a788:	f000 ffd6 	bl	800b738 <strncmp>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d032      	beq.n	800a7f6 <_strtod_l+0x1c6>
 800a790:	2000      	movs	r0, #0
 800a792:	462a      	mov	r2, r5
 800a794:	900a      	str	r0, [sp, #40]	@ 0x28
 800a796:	464d      	mov	r5, r9
 800a798:	4603      	mov	r3, r0
 800a79a:	2a65      	cmp	r2, #101	@ 0x65
 800a79c:	d001      	beq.n	800a7a2 <_strtod_l+0x172>
 800a79e:	2a45      	cmp	r2, #69	@ 0x45
 800a7a0:	d114      	bne.n	800a7cc <_strtod_l+0x19c>
 800a7a2:	b91d      	cbnz	r5, 800a7ac <_strtod_l+0x17c>
 800a7a4:	9a08      	ldr	r2, [sp, #32]
 800a7a6:	4302      	orrs	r2, r0
 800a7a8:	d096      	beq.n	800a6d8 <_strtod_l+0xa8>
 800a7aa:	2500      	movs	r5, #0
 800a7ac:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a7ae:	1c62      	adds	r2, r4, #1
 800a7b0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7b2:	7862      	ldrb	r2, [r4, #1]
 800a7b4:	2a2b      	cmp	r2, #43	@ 0x2b
 800a7b6:	d07a      	beq.n	800a8ae <_strtod_l+0x27e>
 800a7b8:	2a2d      	cmp	r2, #45	@ 0x2d
 800a7ba:	d07e      	beq.n	800a8ba <_strtod_l+0x28a>
 800a7bc:	f04f 0c00 	mov.w	ip, #0
 800a7c0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a7c4:	2909      	cmp	r1, #9
 800a7c6:	f240 8085 	bls.w	800a8d4 <_strtod_l+0x2a4>
 800a7ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800a7cc:	f04f 0800 	mov.w	r8, #0
 800a7d0:	e0a5      	b.n	800a91e <_strtod_l+0x2ee>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	e7c8      	b.n	800a768 <_strtod_l+0x138>
 800a7d6:	f1b9 0f08 	cmp.w	r9, #8
 800a7da:	bfd8      	it	le
 800a7dc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a7de:	f100 0001 	add.w	r0, r0, #1
 800a7e2:	bfda      	itte	le
 800a7e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a7e8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a7ea:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a7ee:	f109 0901 	add.w	r9, r9, #1
 800a7f2:	9019      	str	r0, [sp, #100]	@ 0x64
 800a7f4:	e7bf      	b.n	800a776 <_strtod_l+0x146>
 800a7f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7fc:	785a      	ldrb	r2, [r3, #1]
 800a7fe:	f1b9 0f00 	cmp.w	r9, #0
 800a802:	d03b      	beq.n	800a87c <_strtod_l+0x24c>
 800a804:	900a      	str	r0, [sp, #40]	@ 0x28
 800a806:	464d      	mov	r5, r9
 800a808:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a80c:	2b09      	cmp	r3, #9
 800a80e:	d912      	bls.n	800a836 <_strtod_l+0x206>
 800a810:	2301      	movs	r3, #1
 800a812:	e7c2      	b.n	800a79a <_strtod_l+0x16a>
 800a814:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	9219      	str	r2, [sp, #100]	@ 0x64
 800a81a:	785a      	ldrb	r2, [r3, #1]
 800a81c:	3001      	adds	r0, #1
 800a81e:	2a30      	cmp	r2, #48	@ 0x30
 800a820:	d0f8      	beq.n	800a814 <_strtod_l+0x1e4>
 800a822:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a826:	2b08      	cmp	r3, #8
 800a828:	f200 84d2 	bhi.w	800b1d0 <_strtod_l+0xba0>
 800a82c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a82e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a830:	2000      	movs	r0, #0
 800a832:	930c      	str	r3, [sp, #48]	@ 0x30
 800a834:	4605      	mov	r5, r0
 800a836:	3a30      	subs	r2, #48	@ 0x30
 800a838:	f100 0301 	add.w	r3, r0, #1
 800a83c:	d018      	beq.n	800a870 <_strtod_l+0x240>
 800a83e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a840:	4419      	add	r1, r3
 800a842:	910a      	str	r1, [sp, #40]	@ 0x28
 800a844:	462e      	mov	r6, r5
 800a846:	f04f 0e0a 	mov.w	lr, #10
 800a84a:	1c71      	adds	r1, r6, #1
 800a84c:	eba1 0c05 	sub.w	ip, r1, r5
 800a850:	4563      	cmp	r3, ip
 800a852:	dc15      	bgt.n	800a880 <_strtod_l+0x250>
 800a854:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a858:	182b      	adds	r3, r5, r0
 800a85a:	2b08      	cmp	r3, #8
 800a85c:	f105 0501 	add.w	r5, r5, #1
 800a860:	4405      	add	r5, r0
 800a862:	dc1a      	bgt.n	800a89a <_strtod_l+0x26a>
 800a864:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a866:	230a      	movs	r3, #10
 800a868:	fb03 2301 	mla	r3, r3, r1, r2
 800a86c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a86e:	2300      	movs	r3, #0
 800a870:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a872:	1c51      	adds	r1, r2, #1
 800a874:	9119      	str	r1, [sp, #100]	@ 0x64
 800a876:	7852      	ldrb	r2, [r2, #1]
 800a878:	4618      	mov	r0, r3
 800a87a:	e7c5      	b.n	800a808 <_strtod_l+0x1d8>
 800a87c:	4648      	mov	r0, r9
 800a87e:	e7ce      	b.n	800a81e <_strtod_l+0x1ee>
 800a880:	2e08      	cmp	r6, #8
 800a882:	dc05      	bgt.n	800a890 <_strtod_l+0x260>
 800a884:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a886:	fb0e f606 	mul.w	r6, lr, r6
 800a88a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a88c:	460e      	mov	r6, r1
 800a88e:	e7dc      	b.n	800a84a <_strtod_l+0x21a>
 800a890:	2910      	cmp	r1, #16
 800a892:	bfd8      	it	le
 800a894:	fb0e f707 	mulle.w	r7, lr, r7
 800a898:	e7f8      	b.n	800a88c <_strtod_l+0x25c>
 800a89a:	2b0f      	cmp	r3, #15
 800a89c:	bfdc      	itt	le
 800a89e:	230a      	movle	r3, #10
 800a8a0:	fb03 2707 	mlale	r7, r3, r7, r2
 800a8a4:	e7e3      	b.n	800a86e <_strtod_l+0x23e>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e77a      	b.n	800a7a4 <_strtod_l+0x174>
 800a8ae:	f04f 0c00 	mov.w	ip, #0
 800a8b2:	1ca2      	adds	r2, r4, #2
 800a8b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8b6:	78a2      	ldrb	r2, [r4, #2]
 800a8b8:	e782      	b.n	800a7c0 <_strtod_l+0x190>
 800a8ba:	f04f 0c01 	mov.w	ip, #1
 800a8be:	e7f8      	b.n	800a8b2 <_strtod_l+0x282>
 800a8c0:	0800d87c 	.word	0x0800d87c
 800a8c4:	0800d6b3 	.word	0x0800d6b3
 800a8c8:	7ff00000 	.word	0x7ff00000
 800a8cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8ce:	1c51      	adds	r1, r2, #1
 800a8d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8d2:	7852      	ldrb	r2, [r2, #1]
 800a8d4:	2a30      	cmp	r2, #48	@ 0x30
 800a8d6:	d0f9      	beq.n	800a8cc <_strtod_l+0x29c>
 800a8d8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a8dc:	2908      	cmp	r1, #8
 800a8de:	f63f af75 	bhi.w	800a7cc <_strtod_l+0x19c>
 800a8e2:	3a30      	subs	r2, #48	@ 0x30
 800a8e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8e8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a8ea:	f04f 080a 	mov.w	r8, #10
 800a8ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8f0:	1c56      	adds	r6, r2, #1
 800a8f2:	9619      	str	r6, [sp, #100]	@ 0x64
 800a8f4:	7852      	ldrb	r2, [r2, #1]
 800a8f6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a8fa:	f1be 0f09 	cmp.w	lr, #9
 800a8fe:	d939      	bls.n	800a974 <_strtod_l+0x344>
 800a900:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a902:	1a76      	subs	r6, r6, r1
 800a904:	2e08      	cmp	r6, #8
 800a906:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a90a:	dc03      	bgt.n	800a914 <_strtod_l+0x2e4>
 800a90c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a90e:	4588      	cmp	r8, r1
 800a910:	bfa8      	it	ge
 800a912:	4688      	movge	r8, r1
 800a914:	f1bc 0f00 	cmp.w	ip, #0
 800a918:	d001      	beq.n	800a91e <_strtod_l+0x2ee>
 800a91a:	f1c8 0800 	rsb	r8, r8, #0
 800a91e:	2d00      	cmp	r5, #0
 800a920:	d14e      	bne.n	800a9c0 <_strtod_l+0x390>
 800a922:	9908      	ldr	r1, [sp, #32]
 800a924:	4308      	orrs	r0, r1
 800a926:	f47f aebc 	bne.w	800a6a2 <_strtod_l+0x72>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f47f aed4 	bne.w	800a6d8 <_strtod_l+0xa8>
 800a930:	2a69      	cmp	r2, #105	@ 0x69
 800a932:	d028      	beq.n	800a986 <_strtod_l+0x356>
 800a934:	dc25      	bgt.n	800a982 <_strtod_l+0x352>
 800a936:	2a49      	cmp	r2, #73	@ 0x49
 800a938:	d025      	beq.n	800a986 <_strtod_l+0x356>
 800a93a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a93c:	f47f aecc 	bne.w	800a6d8 <_strtod_l+0xa8>
 800a940:	499a      	ldr	r1, [pc, #616]	@ (800abac <_strtod_l+0x57c>)
 800a942:	a819      	add	r0, sp, #100	@ 0x64
 800a944:	f001 f9e0 	bl	800bd08 <__match>
 800a948:	2800      	cmp	r0, #0
 800a94a:	f43f aec5 	beq.w	800a6d8 <_strtod_l+0xa8>
 800a94e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	2b28      	cmp	r3, #40	@ 0x28
 800a954:	d12e      	bne.n	800a9b4 <_strtod_l+0x384>
 800a956:	4996      	ldr	r1, [pc, #600]	@ (800abb0 <_strtod_l+0x580>)
 800a958:	aa1c      	add	r2, sp, #112	@ 0x70
 800a95a:	a819      	add	r0, sp, #100	@ 0x64
 800a95c:	f001 f9e8 	bl	800bd30 <__hexnan>
 800a960:	2805      	cmp	r0, #5
 800a962:	d127      	bne.n	800a9b4 <_strtod_l+0x384>
 800a964:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a966:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a96a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a96e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a972:	e696      	b.n	800a6a2 <_strtod_l+0x72>
 800a974:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a976:	fb08 2101 	mla	r1, r8, r1, r2
 800a97a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a97e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a980:	e7b5      	b.n	800a8ee <_strtod_l+0x2be>
 800a982:	2a6e      	cmp	r2, #110	@ 0x6e
 800a984:	e7da      	b.n	800a93c <_strtod_l+0x30c>
 800a986:	498b      	ldr	r1, [pc, #556]	@ (800abb4 <_strtod_l+0x584>)
 800a988:	a819      	add	r0, sp, #100	@ 0x64
 800a98a:	f001 f9bd 	bl	800bd08 <__match>
 800a98e:	2800      	cmp	r0, #0
 800a990:	f43f aea2 	beq.w	800a6d8 <_strtod_l+0xa8>
 800a994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a996:	4988      	ldr	r1, [pc, #544]	@ (800abb8 <_strtod_l+0x588>)
 800a998:	3b01      	subs	r3, #1
 800a99a:	a819      	add	r0, sp, #100	@ 0x64
 800a99c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a99e:	f001 f9b3 	bl	800bd08 <__match>
 800a9a2:	b910      	cbnz	r0, 800a9aa <_strtod_l+0x37a>
 800a9a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9aa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800abc8 <_strtod_l+0x598>
 800a9ae:	f04f 0a00 	mov.w	sl, #0
 800a9b2:	e676      	b.n	800a6a2 <_strtod_l+0x72>
 800a9b4:	4881      	ldr	r0, [pc, #516]	@ (800abbc <_strtod_l+0x58c>)
 800a9b6:	f000 fee3 	bl	800b780 <nan>
 800a9ba:	ec5b ab10 	vmov	sl, fp, d0
 800a9be:	e670      	b.n	800a6a2 <_strtod_l+0x72>
 800a9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a9c4:	eba8 0303 	sub.w	r3, r8, r3
 800a9c8:	f1b9 0f00 	cmp.w	r9, #0
 800a9cc:	bf08      	it	eq
 800a9ce:	46a9      	moveq	r9, r5
 800a9d0:	2d10      	cmp	r5, #16
 800a9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d4:	462c      	mov	r4, r5
 800a9d6:	bfa8      	it	ge
 800a9d8:	2410      	movge	r4, #16
 800a9da:	f7f5 fdb3 	bl	8000544 <__aeabi_ui2d>
 800a9de:	2d09      	cmp	r5, #9
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	468b      	mov	fp, r1
 800a9e4:	dc13      	bgt.n	800aa0e <_strtod_l+0x3de>
 800a9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f43f ae5a 	beq.w	800a6a2 <_strtod_l+0x72>
 800a9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f0:	dd78      	ble.n	800aae4 <_strtod_l+0x4b4>
 800a9f2:	2b16      	cmp	r3, #22
 800a9f4:	dc5f      	bgt.n	800aab6 <_strtod_l+0x486>
 800a9f6:	4972      	ldr	r1, [pc, #456]	@ (800abc0 <_strtod_l+0x590>)
 800a9f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa00:	4652      	mov	r2, sl
 800aa02:	465b      	mov	r3, fp
 800aa04:	f7f5 fe18 	bl	8000638 <__aeabi_dmul>
 800aa08:	4682      	mov	sl, r0
 800aa0a:	468b      	mov	fp, r1
 800aa0c:	e649      	b.n	800a6a2 <_strtod_l+0x72>
 800aa0e:	4b6c      	ldr	r3, [pc, #432]	@ (800abc0 <_strtod_l+0x590>)
 800aa10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aa18:	f7f5 fe0e 	bl	8000638 <__aeabi_dmul>
 800aa1c:	4682      	mov	sl, r0
 800aa1e:	4638      	mov	r0, r7
 800aa20:	468b      	mov	fp, r1
 800aa22:	f7f5 fd8f 	bl	8000544 <__aeabi_ui2d>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4650      	mov	r0, sl
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	f7f5 fc4d 	bl	80002cc <__adddf3>
 800aa32:	2d0f      	cmp	r5, #15
 800aa34:	4682      	mov	sl, r0
 800aa36:	468b      	mov	fp, r1
 800aa38:	ddd5      	ble.n	800a9e6 <_strtod_l+0x3b6>
 800aa3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa3c:	1b2c      	subs	r4, r5, r4
 800aa3e:	441c      	add	r4, r3
 800aa40:	2c00      	cmp	r4, #0
 800aa42:	f340 8093 	ble.w	800ab6c <_strtod_l+0x53c>
 800aa46:	f014 030f 	ands.w	r3, r4, #15
 800aa4a:	d00a      	beq.n	800aa62 <_strtod_l+0x432>
 800aa4c:	495c      	ldr	r1, [pc, #368]	@ (800abc0 <_strtod_l+0x590>)
 800aa4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa52:	4652      	mov	r2, sl
 800aa54:	465b      	mov	r3, fp
 800aa56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa5a:	f7f5 fded 	bl	8000638 <__aeabi_dmul>
 800aa5e:	4682      	mov	sl, r0
 800aa60:	468b      	mov	fp, r1
 800aa62:	f034 040f 	bics.w	r4, r4, #15
 800aa66:	d073      	beq.n	800ab50 <_strtod_l+0x520>
 800aa68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aa6c:	dd49      	ble.n	800ab02 <_strtod_l+0x4d2>
 800aa6e:	2400      	movs	r4, #0
 800aa70:	46a0      	mov	r8, r4
 800aa72:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa74:	46a1      	mov	r9, r4
 800aa76:	9a05      	ldr	r2, [sp, #20]
 800aa78:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800abc8 <_strtod_l+0x598>
 800aa7c:	2322      	movs	r3, #34	@ 0x22
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	f04f 0a00 	mov.w	sl, #0
 800aa84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f43f ae0b 	beq.w	800a6a2 <_strtod_l+0x72>
 800aa8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa8e:	9805      	ldr	r0, [sp, #20]
 800aa90:	f7ff f946 	bl	8009d20 <_Bfree>
 800aa94:	9805      	ldr	r0, [sp, #20]
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7ff f942 	bl	8009d20 <_Bfree>
 800aa9c:	9805      	ldr	r0, [sp, #20]
 800aa9e:	4641      	mov	r1, r8
 800aaa0:	f7ff f93e 	bl	8009d20 <_Bfree>
 800aaa4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aaa6:	9805      	ldr	r0, [sp, #20]
 800aaa8:	f7ff f93a 	bl	8009d20 <_Bfree>
 800aaac:	9805      	ldr	r0, [sp, #20]
 800aaae:	4621      	mov	r1, r4
 800aab0:	f7ff f936 	bl	8009d20 <_Bfree>
 800aab4:	e5f5      	b.n	800a6a2 <_strtod_l+0x72>
 800aab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aab8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aabc:	4293      	cmp	r3, r2
 800aabe:	dbbc      	blt.n	800aa3a <_strtod_l+0x40a>
 800aac0:	4c3f      	ldr	r4, [pc, #252]	@ (800abc0 <_strtod_l+0x590>)
 800aac2:	f1c5 050f 	rsb	r5, r5, #15
 800aac6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aaca:	4652      	mov	r2, sl
 800aacc:	465b      	mov	r3, fp
 800aace:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aad2:	f7f5 fdb1 	bl	8000638 <__aeabi_dmul>
 800aad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad8:	1b5d      	subs	r5, r3, r5
 800aada:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aade:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aae2:	e78f      	b.n	800aa04 <_strtod_l+0x3d4>
 800aae4:	3316      	adds	r3, #22
 800aae6:	dba8      	blt.n	800aa3a <_strtod_l+0x40a>
 800aae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaea:	eba3 0808 	sub.w	r8, r3, r8
 800aaee:	4b34      	ldr	r3, [pc, #208]	@ (800abc0 <_strtod_l+0x590>)
 800aaf0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aaf4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aaf8:	4650      	mov	r0, sl
 800aafa:	4659      	mov	r1, fp
 800aafc:	f7f5 fec6 	bl	800088c <__aeabi_ddiv>
 800ab00:	e782      	b.n	800aa08 <_strtod_l+0x3d8>
 800ab02:	2300      	movs	r3, #0
 800ab04:	4f2f      	ldr	r7, [pc, #188]	@ (800abc4 <_strtod_l+0x594>)
 800ab06:	1124      	asrs	r4, r4, #4
 800ab08:	4650      	mov	r0, sl
 800ab0a:	4659      	mov	r1, fp
 800ab0c:	461e      	mov	r6, r3
 800ab0e:	2c01      	cmp	r4, #1
 800ab10:	dc21      	bgt.n	800ab56 <_strtod_l+0x526>
 800ab12:	b10b      	cbz	r3, 800ab18 <_strtod_l+0x4e8>
 800ab14:	4682      	mov	sl, r0
 800ab16:	468b      	mov	fp, r1
 800ab18:	492a      	ldr	r1, [pc, #168]	@ (800abc4 <_strtod_l+0x594>)
 800ab1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ab22:	4652      	mov	r2, sl
 800ab24:	465b      	mov	r3, fp
 800ab26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab2a:	f7f5 fd85 	bl	8000638 <__aeabi_dmul>
 800ab2e:	4b26      	ldr	r3, [pc, #152]	@ (800abc8 <_strtod_l+0x598>)
 800ab30:	460a      	mov	r2, r1
 800ab32:	400b      	ands	r3, r1
 800ab34:	4925      	ldr	r1, [pc, #148]	@ (800abcc <_strtod_l+0x59c>)
 800ab36:	428b      	cmp	r3, r1
 800ab38:	4682      	mov	sl, r0
 800ab3a:	d898      	bhi.n	800aa6e <_strtod_l+0x43e>
 800ab3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ab40:	428b      	cmp	r3, r1
 800ab42:	bf86      	itte	hi
 800ab44:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800abd0 <_strtod_l+0x5a0>
 800ab48:	f04f 3aff 	movhi.w	sl, #4294967295
 800ab4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ab50:	2300      	movs	r3, #0
 800ab52:	9308      	str	r3, [sp, #32]
 800ab54:	e076      	b.n	800ac44 <_strtod_l+0x614>
 800ab56:	07e2      	lsls	r2, r4, #31
 800ab58:	d504      	bpl.n	800ab64 <_strtod_l+0x534>
 800ab5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab5e:	f7f5 fd6b 	bl	8000638 <__aeabi_dmul>
 800ab62:	2301      	movs	r3, #1
 800ab64:	3601      	adds	r6, #1
 800ab66:	1064      	asrs	r4, r4, #1
 800ab68:	3708      	adds	r7, #8
 800ab6a:	e7d0      	b.n	800ab0e <_strtod_l+0x4de>
 800ab6c:	d0f0      	beq.n	800ab50 <_strtod_l+0x520>
 800ab6e:	4264      	negs	r4, r4
 800ab70:	f014 020f 	ands.w	r2, r4, #15
 800ab74:	d00a      	beq.n	800ab8c <_strtod_l+0x55c>
 800ab76:	4b12      	ldr	r3, [pc, #72]	@ (800abc0 <_strtod_l+0x590>)
 800ab78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	4659      	mov	r1, fp
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f7f5 fe82 	bl	800088c <__aeabi_ddiv>
 800ab88:	4682      	mov	sl, r0
 800ab8a:	468b      	mov	fp, r1
 800ab8c:	1124      	asrs	r4, r4, #4
 800ab8e:	d0df      	beq.n	800ab50 <_strtod_l+0x520>
 800ab90:	2c1f      	cmp	r4, #31
 800ab92:	dd1f      	ble.n	800abd4 <_strtod_l+0x5a4>
 800ab94:	2400      	movs	r4, #0
 800ab96:	46a0      	mov	r8, r4
 800ab98:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab9a:	46a1      	mov	r9, r4
 800ab9c:	9a05      	ldr	r2, [sp, #20]
 800ab9e:	2322      	movs	r3, #34	@ 0x22
 800aba0:	f04f 0a00 	mov.w	sl, #0
 800aba4:	f04f 0b00 	mov.w	fp, #0
 800aba8:	6013      	str	r3, [r2, #0]
 800abaa:	e76b      	b.n	800aa84 <_strtod_l+0x454>
 800abac:	0800d5a1 	.word	0x0800d5a1
 800abb0:	0800d868 	.word	0x0800d868
 800abb4:	0800d599 	.word	0x0800d599
 800abb8:	0800d5d0 	.word	0x0800d5d0
 800abbc:	0800d709 	.word	0x0800d709
 800abc0:	0800d7a0 	.word	0x0800d7a0
 800abc4:	0800d778 	.word	0x0800d778
 800abc8:	7ff00000 	.word	0x7ff00000
 800abcc:	7ca00000 	.word	0x7ca00000
 800abd0:	7fefffff 	.word	0x7fefffff
 800abd4:	f014 0310 	ands.w	r3, r4, #16
 800abd8:	bf18      	it	ne
 800abda:	236a      	movne	r3, #106	@ 0x6a
 800abdc:	4ea9      	ldr	r6, [pc, #676]	@ (800ae84 <_strtod_l+0x854>)
 800abde:	9308      	str	r3, [sp, #32]
 800abe0:	4650      	mov	r0, sl
 800abe2:	4659      	mov	r1, fp
 800abe4:	2300      	movs	r3, #0
 800abe6:	07e7      	lsls	r7, r4, #31
 800abe8:	d504      	bpl.n	800abf4 <_strtod_l+0x5c4>
 800abea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abee:	f7f5 fd23 	bl	8000638 <__aeabi_dmul>
 800abf2:	2301      	movs	r3, #1
 800abf4:	1064      	asrs	r4, r4, #1
 800abf6:	f106 0608 	add.w	r6, r6, #8
 800abfa:	d1f4      	bne.n	800abe6 <_strtod_l+0x5b6>
 800abfc:	b10b      	cbz	r3, 800ac02 <_strtod_l+0x5d2>
 800abfe:	4682      	mov	sl, r0
 800ac00:	468b      	mov	fp, r1
 800ac02:	9b08      	ldr	r3, [sp, #32]
 800ac04:	b1b3      	cbz	r3, 800ac34 <_strtod_l+0x604>
 800ac06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	4659      	mov	r1, fp
 800ac12:	dd0f      	ble.n	800ac34 <_strtod_l+0x604>
 800ac14:	2b1f      	cmp	r3, #31
 800ac16:	dd56      	ble.n	800acc6 <_strtod_l+0x696>
 800ac18:	2b34      	cmp	r3, #52	@ 0x34
 800ac1a:	bfde      	ittt	le
 800ac1c:	f04f 33ff 	movle.w	r3, #4294967295
 800ac20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ac24:	4093      	lslle	r3, r2
 800ac26:	f04f 0a00 	mov.w	sl, #0
 800ac2a:	bfcc      	ite	gt
 800ac2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac30:	ea03 0b01 	andle.w	fp, r3, r1
 800ac34:	2200      	movs	r2, #0
 800ac36:	2300      	movs	r3, #0
 800ac38:	4650      	mov	r0, sl
 800ac3a:	4659      	mov	r1, fp
 800ac3c:	f7f5 ff64 	bl	8000b08 <__aeabi_dcmpeq>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d1a7      	bne.n	800ab94 <_strtod_l+0x564>
 800ac44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac4a:	9805      	ldr	r0, [sp, #20]
 800ac4c:	462b      	mov	r3, r5
 800ac4e:	464a      	mov	r2, r9
 800ac50:	f7ff f8ce 	bl	8009df0 <__s2b>
 800ac54:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f43f af09 	beq.w	800aa6e <_strtod_l+0x43e>
 800ac5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac60:	2a00      	cmp	r2, #0
 800ac62:	eba3 0308 	sub.w	r3, r3, r8
 800ac66:	bfa8      	it	ge
 800ac68:	2300      	movge	r3, #0
 800ac6a:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac6c:	2400      	movs	r4, #0
 800ac6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ac72:	9316      	str	r3, [sp, #88]	@ 0x58
 800ac74:	46a0      	mov	r8, r4
 800ac76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac78:	9805      	ldr	r0, [sp, #20]
 800ac7a:	6859      	ldr	r1, [r3, #4]
 800ac7c:	f7ff f810 	bl	8009ca0 <_Balloc>
 800ac80:	4681      	mov	r9, r0
 800ac82:	2800      	cmp	r0, #0
 800ac84:	f43f aef7 	beq.w	800aa76 <_strtod_l+0x446>
 800ac88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac8a:	691a      	ldr	r2, [r3, #16]
 800ac8c:	3202      	adds	r2, #2
 800ac8e:	f103 010c 	add.w	r1, r3, #12
 800ac92:	0092      	lsls	r2, r2, #2
 800ac94:	300c      	adds	r0, #12
 800ac96:	f7fe f894 	bl	8008dc2 <memcpy>
 800ac9a:	ec4b ab10 	vmov	d0, sl, fp
 800ac9e:	9805      	ldr	r0, [sp, #20]
 800aca0:	aa1c      	add	r2, sp, #112	@ 0x70
 800aca2:	a91b      	add	r1, sp, #108	@ 0x6c
 800aca4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aca8:	f7ff fbd6 	bl	800a458 <__d2b>
 800acac:	901a      	str	r0, [sp, #104]	@ 0x68
 800acae:	2800      	cmp	r0, #0
 800acb0:	f43f aee1 	beq.w	800aa76 <_strtod_l+0x446>
 800acb4:	9805      	ldr	r0, [sp, #20]
 800acb6:	2101      	movs	r1, #1
 800acb8:	f7ff f930 	bl	8009f1c <__i2b>
 800acbc:	4680      	mov	r8, r0
 800acbe:	b948      	cbnz	r0, 800acd4 <_strtod_l+0x6a4>
 800acc0:	f04f 0800 	mov.w	r8, #0
 800acc4:	e6d7      	b.n	800aa76 <_strtod_l+0x446>
 800acc6:	f04f 32ff 	mov.w	r2, #4294967295
 800acca:	fa02 f303 	lsl.w	r3, r2, r3
 800acce:	ea03 0a0a 	and.w	sl, r3, sl
 800acd2:	e7af      	b.n	800ac34 <_strtod_l+0x604>
 800acd4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800acd6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800acd8:	2d00      	cmp	r5, #0
 800acda:	bfab      	itete	ge
 800acdc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800acde:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ace0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ace2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ace4:	bfac      	ite	ge
 800ace6:	18ef      	addge	r7, r5, r3
 800ace8:	1b5e      	sublt	r6, r3, r5
 800acea:	9b08      	ldr	r3, [sp, #32]
 800acec:	1aed      	subs	r5, r5, r3
 800acee:	4415      	add	r5, r2
 800acf0:	4b65      	ldr	r3, [pc, #404]	@ (800ae88 <_strtod_l+0x858>)
 800acf2:	3d01      	subs	r5, #1
 800acf4:	429d      	cmp	r5, r3
 800acf6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800acfa:	da50      	bge.n	800ad9e <_strtod_l+0x76e>
 800acfc:	1b5b      	subs	r3, r3, r5
 800acfe:	2b1f      	cmp	r3, #31
 800ad00:	eba2 0203 	sub.w	r2, r2, r3
 800ad04:	f04f 0101 	mov.w	r1, #1
 800ad08:	dc3d      	bgt.n	800ad86 <_strtod_l+0x756>
 800ad0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad10:	2300      	movs	r3, #0
 800ad12:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad14:	18bd      	adds	r5, r7, r2
 800ad16:	9b08      	ldr	r3, [sp, #32]
 800ad18:	42af      	cmp	r7, r5
 800ad1a:	4416      	add	r6, r2
 800ad1c:	441e      	add	r6, r3
 800ad1e:	463b      	mov	r3, r7
 800ad20:	bfa8      	it	ge
 800ad22:	462b      	movge	r3, r5
 800ad24:	42b3      	cmp	r3, r6
 800ad26:	bfa8      	it	ge
 800ad28:	4633      	movge	r3, r6
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	bfc2      	ittt	gt
 800ad2e:	1aed      	subgt	r5, r5, r3
 800ad30:	1af6      	subgt	r6, r6, r3
 800ad32:	1aff      	subgt	r7, r7, r3
 800ad34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	dd16      	ble.n	800ad68 <_strtod_l+0x738>
 800ad3a:	4641      	mov	r1, r8
 800ad3c:	9805      	ldr	r0, [sp, #20]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f7ff f9a4 	bl	800a08c <__pow5mult>
 800ad44:	4680      	mov	r8, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d0ba      	beq.n	800acc0 <_strtod_l+0x690>
 800ad4a:	4601      	mov	r1, r0
 800ad4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad4e:	9805      	ldr	r0, [sp, #20]
 800ad50:	f7ff f8fa 	bl	8009f48 <__multiply>
 800ad54:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad56:	2800      	cmp	r0, #0
 800ad58:	f43f ae8d 	beq.w	800aa76 <_strtod_l+0x446>
 800ad5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad5e:	9805      	ldr	r0, [sp, #20]
 800ad60:	f7fe ffde 	bl	8009d20 <_Bfree>
 800ad64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad66:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad68:	2d00      	cmp	r5, #0
 800ad6a:	dc1d      	bgt.n	800ada8 <_strtod_l+0x778>
 800ad6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	dd23      	ble.n	800adba <_strtod_l+0x78a>
 800ad72:	4649      	mov	r1, r9
 800ad74:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ad76:	9805      	ldr	r0, [sp, #20]
 800ad78:	f7ff f988 	bl	800a08c <__pow5mult>
 800ad7c:	4681      	mov	r9, r0
 800ad7e:	b9e0      	cbnz	r0, 800adba <_strtod_l+0x78a>
 800ad80:	f04f 0900 	mov.w	r9, #0
 800ad84:	e677      	b.n	800aa76 <_strtod_l+0x446>
 800ad86:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ad8a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ad8e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ad92:	35e2      	adds	r5, #226	@ 0xe2
 800ad94:	fa01 f305 	lsl.w	r3, r1, r5
 800ad98:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad9a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ad9c:	e7ba      	b.n	800ad14 <_strtod_l+0x6e4>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ada2:	2301      	movs	r3, #1
 800ada4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ada6:	e7b5      	b.n	800ad14 <_strtod_l+0x6e4>
 800ada8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adaa:	9805      	ldr	r0, [sp, #20]
 800adac:	462a      	mov	r2, r5
 800adae:	f7ff f9c7 	bl	800a140 <__lshift>
 800adb2:	901a      	str	r0, [sp, #104]	@ 0x68
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d1d9      	bne.n	800ad6c <_strtod_l+0x73c>
 800adb8:	e65d      	b.n	800aa76 <_strtod_l+0x446>
 800adba:	2e00      	cmp	r6, #0
 800adbc:	dd07      	ble.n	800adce <_strtod_l+0x79e>
 800adbe:	4649      	mov	r1, r9
 800adc0:	9805      	ldr	r0, [sp, #20]
 800adc2:	4632      	mov	r2, r6
 800adc4:	f7ff f9bc 	bl	800a140 <__lshift>
 800adc8:	4681      	mov	r9, r0
 800adca:	2800      	cmp	r0, #0
 800adcc:	d0d8      	beq.n	800ad80 <_strtod_l+0x750>
 800adce:	2f00      	cmp	r7, #0
 800add0:	dd08      	ble.n	800ade4 <_strtod_l+0x7b4>
 800add2:	4641      	mov	r1, r8
 800add4:	9805      	ldr	r0, [sp, #20]
 800add6:	463a      	mov	r2, r7
 800add8:	f7ff f9b2 	bl	800a140 <__lshift>
 800addc:	4680      	mov	r8, r0
 800adde:	2800      	cmp	r0, #0
 800ade0:	f43f ae49 	beq.w	800aa76 <_strtod_l+0x446>
 800ade4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ade6:	9805      	ldr	r0, [sp, #20]
 800ade8:	464a      	mov	r2, r9
 800adea:	f7ff fa31 	bl	800a250 <__mdiff>
 800adee:	4604      	mov	r4, r0
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f43f ae40 	beq.w	800aa76 <_strtod_l+0x446>
 800adf6:	68c3      	ldr	r3, [r0, #12]
 800adf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adfa:	2300      	movs	r3, #0
 800adfc:	60c3      	str	r3, [r0, #12]
 800adfe:	4641      	mov	r1, r8
 800ae00:	f7ff fa0a 	bl	800a218 <__mcmp>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	da45      	bge.n	800ae94 <_strtod_l+0x864>
 800ae08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae0a:	ea53 030a 	orrs.w	r3, r3, sl
 800ae0e:	d16b      	bne.n	800aee8 <_strtod_l+0x8b8>
 800ae10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d167      	bne.n	800aee8 <_strtod_l+0x8b8>
 800ae18:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae1c:	0d1b      	lsrs	r3, r3, #20
 800ae1e:	051b      	lsls	r3, r3, #20
 800ae20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae24:	d960      	bls.n	800aee8 <_strtod_l+0x8b8>
 800ae26:	6963      	ldr	r3, [r4, #20]
 800ae28:	b913      	cbnz	r3, 800ae30 <_strtod_l+0x800>
 800ae2a:	6923      	ldr	r3, [r4, #16]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	dd5b      	ble.n	800aee8 <_strtod_l+0x8b8>
 800ae30:	4621      	mov	r1, r4
 800ae32:	2201      	movs	r2, #1
 800ae34:	9805      	ldr	r0, [sp, #20]
 800ae36:	f7ff f983 	bl	800a140 <__lshift>
 800ae3a:	4641      	mov	r1, r8
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	f7ff f9eb 	bl	800a218 <__mcmp>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	dd50      	ble.n	800aee8 <_strtod_l+0x8b8>
 800ae46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae4a:	9a08      	ldr	r2, [sp, #32]
 800ae4c:	0d1b      	lsrs	r3, r3, #20
 800ae4e:	051b      	lsls	r3, r3, #20
 800ae50:	2a00      	cmp	r2, #0
 800ae52:	d06a      	beq.n	800af2a <_strtod_l+0x8fa>
 800ae54:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae58:	d867      	bhi.n	800af2a <_strtod_l+0x8fa>
 800ae5a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ae5e:	f67f ae9d 	bls.w	800ab9c <_strtod_l+0x56c>
 800ae62:	4b0a      	ldr	r3, [pc, #40]	@ (800ae8c <_strtod_l+0x85c>)
 800ae64:	4650      	mov	r0, sl
 800ae66:	4659      	mov	r1, fp
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f7f5 fbe5 	bl	8000638 <__aeabi_dmul>
 800ae6e:	4b08      	ldr	r3, [pc, #32]	@ (800ae90 <_strtod_l+0x860>)
 800ae70:	400b      	ands	r3, r1
 800ae72:	4682      	mov	sl, r0
 800ae74:	468b      	mov	fp, r1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f47f ae08 	bne.w	800aa8c <_strtod_l+0x45c>
 800ae7c:	9a05      	ldr	r2, [sp, #20]
 800ae7e:	2322      	movs	r3, #34	@ 0x22
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	e603      	b.n	800aa8c <_strtod_l+0x45c>
 800ae84:	0800d890 	.word	0x0800d890
 800ae88:	fffffc02 	.word	0xfffffc02
 800ae8c:	39500000 	.word	0x39500000
 800ae90:	7ff00000 	.word	0x7ff00000
 800ae94:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ae98:	d165      	bne.n	800af66 <_strtod_l+0x936>
 800ae9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ae9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aea0:	b35a      	cbz	r2, 800aefa <_strtod_l+0x8ca>
 800aea2:	4a9f      	ldr	r2, [pc, #636]	@ (800b120 <_strtod_l+0xaf0>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d12b      	bne.n	800af00 <_strtod_l+0x8d0>
 800aea8:	9b08      	ldr	r3, [sp, #32]
 800aeaa:	4651      	mov	r1, sl
 800aeac:	b303      	cbz	r3, 800aef0 <_strtod_l+0x8c0>
 800aeae:	4b9d      	ldr	r3, [pc, #628]	@ (800b124 <_strtod_l+0xaf4>)
 800aeb0:	465a      	mov	r2, fp
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aeb8:	f04f 32ff 	mov.w	r2, #4294967295
 800aebc:	d81b      	bhi.n	800aef6 <_strtod_l+0x8c6>
 800aebe:	0d1b      	lsrs	r3, r3, #20
 800aec0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aec4:	fa02 f303 	lsl.w	r3, r2, r3
 800aec8:	4299      	cmp	r1, r3
 800aeca:	d119      	bne.n	800af00 <_strtod_l+0x8d0>
 800aecc:	4b96      	ldr	r3, [pc, #600]	@ (800b128 <_strtod_l+0xaf8>)
 800aece:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d102      	bne.n	800aeda <_strtod_l+0x8aa>
 800aed4:	3101      	adds	r1, #1
 800aed6:	f43f adce 	beq.w	800aa76 <_strtod_l+0x446>
 800aeda:	4b92      	ldr	r3, [pc, #584]	@ (800b124 <_strtod_l+0xaf4>)
 800aedc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aede:	401a      	ands	r2, r3
 800aee0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aee4:	f04f 0a00 	mov.w	sl, #0
 800aee8:	9b08      	ldr	r3, [sp, #32]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1b9      	bne.n	800ae62 <_strtod_l+0x832>
 800aeee:	e5cd      	b.n	800aa8c <_strtod_l+0x45c>
 800aef0:	f04f 33ff 	mov.w	r3, #4294967295
 800aef4:	e7e8      	b.n	800aec8 <_strtod_l+0x898>
 800aef6:	4613      	mov	r3, r2
 800aef8:	e7e6      	b.n	800aec8 <_strtod_l+0x898>
 800aefa:	ea53 030a 	orrs.w	r3, r3, sl
 800aefe:	d0a2      	beq.n	800ae46 <_strtod_l+0x816>
 800af00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af02:	b1db      	cbz	r3, 800af3c <_strtod_l+0x90c>
 800af04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af06:	4213      	tst	r3, r2
 800af08:	d0ee      	beq.n	800aee8 <_strtod_l+0x8b8>
 800af0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af0c:	9a08      	ldr	r2, [sp, #32]
 800af0e:	4650      	mov	r0, sl
 800af10:	4659      	mov	r1, fp
 800af12:	b1bb      	cbz	r3, 800af44 <_strtod_l+0x914>
 800af14:	f7ff fb6e 	bl	800a5f4 <sulp>
 800af18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af1c:	ec53 2b10 	vmov	r2, r3, d0
 800af20:	f7f5 f9d4 	bl	80002cc <__adddf3>
 800af24:	4682      	mov	sl, r0
 800af26:	468b      	mov	fp, r1
 800af28:	e7de      	b.n	800aee8 <_strtod_l+0x8b8>
 800af2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af36:	f04f 3aff 	mov.w	sl, #4294967295
 800af3a:	e7d5      	b.n	800aee8 <_strtod_l+0x8b8>
 800af3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af3e:	ea13 0f0a 	tst.w	r3, sl
 800af42:	e7e1      	b.n	800af08 <_strtod_l+0x8d8>
 800af44:	f7ff fb56 	bl	800a5f4 <sulp>
 800af48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af4c:	ec53 2b10 	vmov	r2, r3, d0
 800af50:	f7f5 f9ba 	bl	80002c8 <__aeabi_dsub>
 800af54:	2200      	movs	r2, #0
 800af56:	2300      	movs	r3, #0
 800af58:	4682      	mov	sl, r0
 800af5a:	468b      	mov	fp, r1
 800af5c:	f7f5 fdd4 	bl	8000b08 <__aeabi_dcmpeq>
 800af60:	2800      	cmp	r0, #0
 800af62:	d0c1      	beq.n	800aee8 <_strtod_l+0x8b8>
 800af64:	e61a      	b.n	800ab9c <_strtod_l+0x56c>
 800af66:	4641      	mov	r1, r8
 800af68:	4620      	mov	r0, r4
 800af6a:	f7ff facd 	bl	800a508 <__ratio>
 800af6e:	ec57 6b10 	vmov	r6, r7, d0
 800af72:	2200      	movs	r2, #0
 800af74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af78:	4630      	mov	r0, r6
 800af7a:	4639      	mov	r1, r7
 800af7c:	f7f5 fdd8 	bl	8000b30 <__aeabi_dcmple>
 800af80:	2800      	cmp	r0, #0
 800af82:	d06f      	beq.n	800b064 <_strtod_l+0xa34>
 800af84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af86:	2b00      	cmp	r3, #0
 800af88:	d17a      	bne.n	800b080 <_strtod_l+0xa50>
 800af8a:	f1ba 0f00 	cmp.w	sl, #0
 800af8e:	d158      	bne.n	800b042 <_strtod_l+0xa12>
 800af90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af96:	2b00      	cmp	r3, #0
 800af98:	d15a      	bne.n	800b050 <_strtod_l+0xa20>
 800af9a:	4b64      	ldr	r3, [pc, #400]	@ (800b12c <_strtod_l+0xafc>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 fdbb 	bl	8000b1c <__aeabi_dcmplt>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d159      	bne.n	800b05e <_strtod_l+0xa2e>
 800afaa:	4630      	mov	r0, r6
 800afac:	4639      	mov	r1, r7
 800afae:	4b60      	ldr	r3, [pc, #384]	@ (800b130 <_strtod_l+0xb00>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	f7f5 fb41 	bl	8000638 <__aeabi_dmul>
 800afb6:	4606      	mov	r6, r0
 800afb8:	460f      	mov	r7, r1
 800afba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800afbe:	9606      	str	r6, [sp, #24]
 800afc0:	9307      	str	r3, [sp, #28]
 800afc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afc6:	4d57      	ldr	r5, [pc, #348]	@ (800b124 <_strtod_l+0xaf4>)
 800afc8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800afcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afce:	401d      	ands	r5, r3
 800afd0:	4b58      	ldr	r3, [pc, #352]	@ (800b134 <_strtod_l+0xb04>)
 800afd2:	429d      	cmp	r5, r3
 800afd4:	f040 80b2 	bne.w	800b13c <_strtod_l+0xb0c>
 800afd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afda:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800afde:	ec4b ab10 	vmov	d0, sl, fp
 800afe2:	f7ff f9c9 	bl	800a378 <__ulp>
 800afe6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afea:	ec51 0b10 	vmov	r0, r1, d0
 800afee:	f7f5 fb23 	bl	8000638 <__aeabi_dmul>
 800aff2:	4652      	mov	r2, sl
 800aff4:	465b      	mov	r3, fp
 800aff6:	f7f5 f969 	bl	80002cc <__adddf3>
 800affa:	460b      	mov	r3, r1
 800affc:	4949      	ldr	r1, [pc, #292]	@ (800b124 <_strtod_l+0xaf4>)
 800affe:	4a4e      	ldr	r2, [pc, #312]	@ (800b138 <_strtod_l+0xb08>)
 800b000:	4019      	ands	r1, r3
 800b002:	4291      	cmp	r1, r2
 800b004:	4682      	mov	sl, r0
 800b006:	d942      	bls.n	800b08e <_strtod_l+0xa5e>
 800b008:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b00a:	4b47      	ldr	r3, [pc, #284]	@ (800b128 <_strtod_l+0xaf8>)
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d103      	bne.n	800b018 <_strtod_l+0x9e8>
 800b010:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b012:	3301      	adds	r3, #1
 800b014:	f43f ad2f 	beq.w	800aa76 <_strtod_l+0x446>
 800b018:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b128 <_strtod_l+0xaf8>
 800b01c:	f04f 3aff 	mov.w	sl, #4294967295
 800b020:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b022:	9805      	ldr	r0, [sp, #20]
 800b024:	f7fe fe7c 	bl	8009d20 <_Bfree>
 800b028:	9805      	ldr	r0, [sp, #20]
 800b02a:	4649      	mov	r1, r9
 800b02c:	f7fe fe78 	bl	8009d20 <_Bfree>
 800b030:	9805      	ldr	r0, [sp, #20]
 800b032:	4641      	mov	r1, r8
 800b034:	f7fe fe74 	bl	8009d20 <_Bfree>
 800b038:	9805      	ldr	r0, [sp, #20]
 800b03a:	4621      	mov	r1, r4
 800b03c:	f7fe fe70 	bl	8009d20 <_Bfree>
 800b040:	e619      	b.n	800ac76 <_strtod_l+0x646>
 800b042:	f1ba 0f01 	cmp.w	sl, #1
 800b046:	d103      	bne.n	800b050 <_strtod_l+0xa20>
 800b048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f43f ada6 	beq.w	800ab9c <_strtod_l+0x56c>
 800b050:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b100 <_strtod_l+0xad0>
 800b054:	4f35      	ldr	r7, [pc, #212]	@ (800b12c <_strtod_l+0xafc>)
 800b056:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b05a:	2600      	movs	r6, #0
 800b05c:	e7b1      	b.n	800afc2 <_strtod_l+0x992>
 800b05e:	4f34      	ldr	r7, [pc, #208]	@ (800b130 <_strtod_l+0xb00>)
 800b060:	2600      	movs	r6, #0
 800b062:	e7aa      	b.n	800afba <_strtod_l+0x98a>
 800b064:	4b32      	ldr	r3, [pc, #200]	@ (800b130 <_strtod_l+0xb00>)
 800b066:	4630      	mov	r0, r6
 800b068:	4639      	mov	r1, r7
 800b06a:	2200      	movs	r2, #0
 800b06c:	f7f5 fae4 	bl	8000638 <__aeabi_dmul>
 800b070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b072:	4606      	mov	r6, r0
 800b074:	460f      	mov	r7, r1
 800b076:	2b00      	cmp	r3, #0
 800b078:	d09f      	beq.n	800afba <_strtod_l+0x98a>
 800b07a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b07e:	e7a0      	b.n	800afc2 <_strtod_l+0x992>
 800b080:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b108 <_strtod_l+0xad8>
 800b084:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b088:	ec57 6b17 	vmov	r6, r7, d7
 800b08c:	e799      	b.n	800afc2 <_strtod_l+0x992>
 800b08e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b092:	9b08      	ldr	r3, [sp, #32]
 800b094:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1c1      	bne.n	800b020 <_strtod_l+0x9f0>
 800b09c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0a0:	0d1b      	lsrs	r3, r3, #20
 800b0a2:	051b      	lsls	r3, r3, #20
 800b0a4:	429d      	cmp	r5, r3
 800b0a6:	d1bb      	bne.n	800b020 <_strtod_l+0x9f0>
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	f7f5 fe24 	bl	8000cf8 <__aeabi_d2lz>
 800b0b0:	f7f5 fa94 	bl	80005dc <__aeabi_l2d>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	f7f5 f904 	bl	80002c8 <__aeabi_dsub>
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b0c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ce:	ea46 060a 	orr.w	r6, r6, sl
 800b0d2:	431e      	orrs	r6, r3
 800b0d4:	d06f      	beq.n	800b1b6 <_strtod_l+0xb86>
 800b0d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b110 <_strtod_l+0xae0>)
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f7f5 fd1e 	bl	8000b1c <__aeabi_dcmplt>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	f47f acd3 	bne.w	800aa8c <_strtod_l+0x45c>
 800b0e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b118 <_strtod_l+0xae8>)
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0f0:	f7f5 fd32 	bl	8000b58 <__aeabi_dcmpgt>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d093      	beq.n	800b020 <_strtod_l+0x9f0>
 800b0f8:	e4c8      	b.n	800aa8c <_strtod_l+0x45c>
 800b0fa:	bf00      	nop
 800b0fc:	f3af 8000 	nop.w
 800b100:	00000000 	.word	0x00000000
 800b104:	bff00000 	.word	0xbff00000
 800b108:	00000000 	.word	0x00000000
 800b10c:	3ff00000 	.word	0x3ff00000
 800b110:	94a03595 	.word	0x94a03595
 800b114:	3fdfffff 	.word	0x3fdfffff
 800b118:	35afe535 	.word	0x35afe535
 800b11c:	3fe00000 	.word	0x3fe00000
 800b120:	000fffff 	.word	0x000fffff
 800b124:	7ff00000 	.word	0x7ff00000
 800b128:	7fefffff 	.word	0x7fefffff
 800b12c:	3ff00000 	.word	0x3ff00000
 800b130:	3fe00000 	.word	0x3fe00000
 800b134:	7fe00000 	.word	0x7fe00000
 800b138:	7c9fffff 	.word	0x7c9fffff
 800b13c:	9b08      	ldr	r3, [sp, #32]
 800b13e:	b323      	cbz	r3, 800b18a <_strtod_l+0xb5a>
 800b140:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b144:	d821      	bhi.n	800b18a <_strtod_l+0xb5a>
 800b146:	a328      	add	r3, pc, #160	@ (adr r3, 800b1e8 <_strtod_l+0xbb8>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	4630      	mov	r0, r6
 800b14e:	4639      	mov	r1, r7
 800b150:	f7f5 fcee 	bl	8000b30 <__aeabi_dcmple>
 800b154:	b1a0      	cbz	r0, 800b180 <_strtod_l+0xb50>
 800b156:	4639      	mov	r1, r7
 800b158:	4630      	mov	r0, r6
 800b15a:	f7f5 fd45 	bl	8000be8 <__aeabi_d2uiz>
 800b15e:	2801      	cmp	r0, #1
 800b160:	bf38      	it	cc
 800b162:	2001      	movcc	r0, #1
 800b164:	f7f5 f9ee 	bl	8000544 <__aeabi_ui2d>
 800b168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b16a:	4606      	mov	r6, r0
 800b16c:	460f      	mov	r7, r1
 800b16e:	b9fb      	cbnz	r3, 800b1b0 <_strtod_l+0xb80>
 800b170:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b174:	9014      	str	r0, [sp, #80]	@ 0x50
 800b176:	9315      	str	r3, [sp, #84]	@ 0x54
 800b178:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b17c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b180:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b182:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b186:	1b5b      	subs	r3, r3, r5
 800b188:	9311      	str	r3, [sp, #68]	@ 0x44
 800b18a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b18e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b192:	f7ff f8f1 	bl	800a378 <__ulp>
 800b196:	4650      	mov	r0, sl
 800b198:	ec53 2b10 	vmov	r2, r3, d0
 800b19c:	4659      	mov	r1, fp
 800b19e:	f7f5 fa4b 	bl	8000638 <__aeabi_dmul>
 800b1a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b1a6:	f7f5 f891 	bl	80002cc <__adddf3>
 800b1aa:	4682      	mov	sl, r0
 800b1ac:	468b      	mov	fp, r1
 800b1ae:	e770      	b.n	800b092 <_strtod_l+0xa62>
 800b1b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b1b4:	e7e0      	b.n	800b178 <_strtod_l+0xb48>
 800b1b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b1f0 <_strtod_l+0xbc0>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	f7f5 fcae 	bl	8000b1c <__aeabi_dcmplt>
 800b1c0:	e798      	b.n	800b0f4 <_strtod_l+0xac4>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b1c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b1c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	f7ff ba6d 	b.w	800a6aa <_strtod_l+0x7a>
 800b1d0:	2a65      	cmp	r2, #101	@ 0x65
 800b1d2:	f43f ab68 	beq.w	800a8a6 <_strtod_l+0x276>
 800b1d6:	2a45      	cmp	r2, #69	@ 0x45
 800b1d8:	f43f ab65 	beq.w	800a8a6 <_strtod_l+0x276>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	f7ff bba0 	b.w	800a922 <_strtod_l+0x2f2>
 800b1e2:	bf00      	nop
 800b1e4:	f3af 8000 	nop.w
 800b1e8:	ffc00000 	.word	0xffc00000
 800b1ec:	41dfffff 	.word	0x41dfffff
 800b1f0:	94a03595 	.word	0x94a03595
 800b1f4:	3fcfffff 	.word	0x3fcfffff

0800b1f8 <_strtod_r>:
 800b1f8:	4b01      	ldr	r3, [pc, #4]	@ (800b200 <_strtod_r+0x8>)
 800b1fa:	f7ff ba19 	b.w	800a630 <_strtod_l>
 800b1fe:	bf00      	nop
 800b200:	2000006c 	.word	0x2000006c

0800b204 <_strtol_l.isra.0>:
 800b204:	2b24      	cmp	r3, #36	@ 0x24
 800b206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b20a:	4686      	mov	lr, r0
 800b20c:	4690      	mov	r8, r2
 800b20e:	d801      	bhi.n	800b214 <_strtol_l.isra.0+0x10>
 800b210:	2b01      	cmp	r3, #1
 800b212:	d106      	bne.n	800b222 <_strtol_l.isra.0+0x1e>
 800b214:	f7fd fda8 	bl	8008d68 <__errno>
 800b218:	2316      	movs	r3, #22
 800b21a:	6003      	str	r3, [r0, #0]
 800b21c:	2000      	movs	r0, #0
 800b21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b222:	4834      	ldr	r0, [pc, #208]	@ (800b2f4 <_strtol_l.isra.0+0xf0>)
 800b224:	460d      	mov	r5, r1
 800b226:	462a      	mov	r2, r5
 800b228:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b22c:	5d06      	ldrb	r6, [r0, r4]
 800b22e:	f016 0608 	ands.w	r6, r6, #8
 800b232:	d1f8      	bne.n	800b226 <_strtol_l.isra.0+0x22>
 800b234:	2c2d      	cmp	r4, #45	@ 0x2d
 800b236:	d110      	bne.n	800b25a <_strtol_l.isra.0+0x56>
 800b238:	782c      	ldrb	r4, [r5, #0]
 800b23a:	2601      	movs	r6, #1
 800b23c:	1c95      	adds	r5, r2, #2
 800b23e:	f033 0210 	bics.w	r2, r3, #16
 800b242:	d115      	bne.n	800b270 <_strtol_l.isra.0+0x6c>
 800b244:	2c30      	cmp	r4, #48	@ 0x30
 800b246:	d10d      	bne.n	800b264 <_strtol_l.isra.0+0x60>
 800b248:	782a      	ldrb	r2, [r5, #0]
 800b24a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b24e:	2a58      	cmp	r2, #88	@ 0x58
 800b250:	d108      	bne.n	800b264 <_strtol_l.isra.0+0x60>
 800b252:	786c      	ldrb	r4, [r5, #1]
 800b254:	3502      	adds	r5, #2
 800b256:	2310      	movs	r3, #16
 800b258:	e00a      	b.n	800b270 <_strtol_l.isra.0+0x6c>
 800b25a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b25c:	bf04      	itt	eq
 800b25e:	782c      	ldrbeq	r4, [r5, #0]
 800b260:	1c95      	addeq	r5, r2, #2
 800b262:	e7ec      	b.n	800b23e <_strtol_l.isra.0+0x3a>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1f6      	bne.n	800b256 <_strtol_l.isra.0+0x52>
 800b268:	2c30      	cmp	r4, #48	@ 0x30
 800b26a:	bf14      	ite	ne
 800b26c:	230a      	movne	r3, #10
 800b26e:	2308      	moveq	r3, #8
 800b270:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b274:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b278:	2200      	movs	r2, #0
 800b27a:	fbbc f9f3 	udiv	r9, ip, r3
 800b27e:	4610      	mov	r0, r2
 800b280:	fb03 ca19 	mls	sl, r3, r9, ip
 800b284:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b288:	2f09      	cmp	r7, #9
 800b28a:	d80f      	bhi.n	800b2ac <_strtol_l.isra.0+0xa8>
 800b28c:	463c      	mov	r4, r7
 800b28e:	42a3      	cmp	r3, r4
 800b290:	dd1b      	ble.n	800b2ca <_strtol_l.isra.0+0xc6>
 800b292:	1c57      	adds	r7, r2, #1
 800b294:	d007      	beq.n	800b2a6 <_strtol_l.isra.0+0xa2>
 800b296:	4581      	cmp	r9, r0
 800b298:	d314      	bcc.n	800b2c4 <_strtol_l.isra.0+0xc0>
 800b29a:	d101      	bne.n	800b2a0 <_strtol_l.isra.0+0x9c>
 800b29c:	45a2      	cmp	sl, r4
 800b29e:	db11      	blt.n	800b2c4 <_strtol_l.isra.0+0xc0>
 800b2a0:	fb00 4003 	mla	r0, r0, r3, r4
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2aa:	e7eb      	b.n	800b284 <_strtol_l.isra.0+0x80>
 800b2ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2b0:	2f19      	cmp	r7, #25
 800b2b2:	d801      	bhi.n	800b2b8 <_strtol_l.isra.0+0xb4>
 800b2b4:	3c37      	subs	r4, #55	@ 0x37
 800b2b6:	e7ea      	b.n	800b28e <_strtol_l.isra.0+0x8a>
 800b2b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b2bc:	2f19      	cmp	r7, #25
 800b2be:	d804      	bhi.n	800b2ca <_strtol_l.isra.0+0xc6>
 800b2c0:	3c57      	subs	r4, #87	@ 0x57
 800b2c2:	e7e4      	b.n	800b28e <_strtol_l.isra.0+0x8a>
 800b2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c8:	e7ed      	b.n	800b2a6 <_strtol_l.isra.0+0xa2>
 800b2ca:	1c53      	adds	r3, r2, #1
 800b2cc:	d108      	bne.n	800b2e0 <_strtol_l.isra.0+0xdc>
 800b2ce:	2322      	movs	r3, #34	@ 0x22
 800b2d0:	f8ce 3000 	str.w	r3, [lr]
 800b2d4:	4660      	mov	r0, ip
 800b2d6:	f1b8 0f00 	cmp.w	r8, #0
 800b2da:	d0a0      	beq.n	800b21e <_strtol_l.isra.0+0x1a>
 800b2dc:	1e69      	subs	r1, r5, #1
 800b2de:	e006      	b.n	800b2ee <_strtol_l.isra.0+0xea>
 800b2e0:	b106      	cbz	r6, 800b2e4 <_strtol_l.isra.0+0xe0>
 800b2e2:	4240      	negs	r0, r0
 800b2e4:	f1b8 0f00 	cmp.w	r8, #0
 800b2e8:	d099      	beq.n	800b21e <_strtol_l.isra.0+0x1a>
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	d1f6      	bne.n	800b2dc <_strtol_l.isra.0+0xd8>
 800b2ee:	f8c8 1000 	str.w	r1, [r8]
 800b2f2:	e794      	b.n	800b21e <_strtol_l.isra.0+0x1a>
 800b2f4:	0800d8b9 	.word	0x0800d8b9

0800b2f8 <_strtol_r>:
 800b2f8:	f7ff bf84 	b.w	800b204 <_strtol_l.isra.0>

0800b2fc <__ssputs_r>:
 800b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b300:	688e      	ldr	r6, [r1, #8]
 800b302:	461f      	mov	r7, r3
 800b304:	42be      	cmp	r6, r7
 800b306:	680b      	ldr	r3, [r1, #0]
 800b308:	4682      	mov	sl, r0
 800b30a:	460c      	mov	r4, r1
 800b30c:	4690      	mov	r8, r2
 800b30e:	d82d      	bhi.n	800b36c <__ssputs_r+0x70>
 800b310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b314:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b318:	d026      	beq.n	800b368 <__ssputs_r+0x6c>
 800b31a:	6965      	ldr	r5, [r4, #20]
 800b31c:	6909      	ldr	r1, [r1, #16]
 800b31e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b322:	eba3 0901 	sub.w	r9, r3, r1
 800b326:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b32a:	1c7b      	adds	r3, r7, #1
 800b32c:	444b      	add	r3, r9
 800b32e:	106d      	asrs	r5, r5, #1
 800b330:	429d      	cmp	r5, r3
 800b332:	bf38      	it	cc
 800b334:	461d      	movcc	r5, r3
 800b336:	0553      	lsls	r3, r2, #21
 800b338:	d527      	bpl.n	800b38a <__ssputs_r+0x8e>
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7fe fc24 	bl	8009b88 <_malloc_r>
 800b340:	4606      	mov	r6, r0
 800b342:	b360      	cbz	r0, 800b39e <__ssputs_r+0xa2>
 800b344:	6921      	ldr	r1, [r4, #16]
 800b346:	464a      	mov	r2, r9
 800b348:	f7fd fd3b 	bl	8008dc2 <memcpy>
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b356:	81a3      	strh	r3, [r4, #12]
 800b358:	6126      	str	r6, [r4, #16]
 800b35a:	6165      	str	r5, [r4, #20]
 800b35c:	444e      	add	r6, r9
 800b35e:	eba5 0509 	sub.w	r5, r5, r9
 800b362:	6026      	str	r6, [r4, #0]
 800b364:	60a5      	str	r5, [r4, #8]
 800b366:	463e      	mov	r6, r7
 800b368:	42be      	cmp	r6, r7
 800b36a:	d900      	bls.n	800b36e <__ssputs_r+0x72>
 800b36c:	463e      	mov	r6, r7
 800b36e:	6820      	ldr	r0, [r4, #0]
 800b370:	4632      	mov	r2, r6
 800b372:	4641      	mov	r1, r8
 800b374:	f000 f9c6 	bl	800b704 <memmove>
 800b378:	68a3      	ldr	r3, [r4, #8]
 800b37a:	1b9b      	subs	r3, r3, r6
 800b37c:	60a3      	str	r3, [r4, #8]
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	4433      	add	r3, r6
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	2000      	movs	r0, #0
 800b386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b38a:	462a      	mov	r2, r5
 800b38c:	f000 fd7d 	bl	800be8a <_realloc_r>
 800b390:	4606      	mov	r6, r0
 800b392:	2800      	cmp	r0, #0
 800b394:	d1e0      	bne.n	800b358 <__ssputs_r+0x5c>
 800b396:	6921      	ldr	r1, [r4, #16]
 800b398:	4650      	mov	r0, sl
 800b39a:	f7fe fb81 	bl	8009aa0 <_free_r>
 800b39e:	230c      	movs	r3, #12
 800b3a0:	f8ca 3000 	str.w	r3, [sl]
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3aa:	81a3      	strh	r3, [r4, #12]
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b0:	e7e9      	b.n	800b386 <__ssputs_r+0x8a>
	...

0800b3b4 <_svfiprintf_r>:
 800b3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b8:	4698      	mov	r8, r3
 800b3ba:	898b      	ldrh	r3, [r1, #12]
 800b3bc:	061b      	lsls	r3, r3, #24
 800b3be:	b09d      	sub	sp, #116	@ 0x74
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	d510      	bpl.n	800b3ea <_svfiprintf_r+0x36>
 800b3c8:	690b      	ldr	r3, [r1, #16]
 800b3ca:	b973      	cbnz	r3, 800b3ea <_svfiprintf_r+0x36>
 800b3cc:	2140      	movs	r1, #64	@ 0x40
 800b3ce:	f7fe fbdb 	bl	8009b88 <_malloc_r>
 800b3d2:	6028      	str	r0, [r5, #0]
 800b3d4:	6128      	str	r0, [r5, #16]
 800b3d6:	b930      	cbnz	r0, 800b3e6 <_svfiprintf_r+0x32>
 800b3d8:	230c      	movs	r3, #12
 800b3da:	603b      	str	r3, [r7, #0]
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	b01d      	add	sp, #116	@ 0x74
 800b3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e6:	2340      	movs	r3, #64	@ 0x40
 800b3e8:	616b      	str	r3, [r5, #20]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ee:	2320      	movs	r3, #32
 800b3f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3f8:	2330      	movs	r3, #48	@ 0x30
 800b3fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b598 <_svfiprintf_r+0x1e4>
 800b3fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b402:	f04f 0901 	mov.w	r9, #1
 800b406:	4623      	mov	r3, r4
 800b408:	469a      	mov	sl, r3
 800b40a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b40e:	b10a      	cbz	r2, 800b414 <_svfiprintf_r+0x60>
 800b410:	2a25      	cmp	r2, #37	@ 0x25
 800b412:	d1f9      	bne.n	800b408 <_svfiprintf_r+0x54>
 800b414:	ebba 0b04 	subs.w	fp, sl, r4
 800b418:	d00b      	beq.n	800b432 <_svfiprintf_r+0x7e>
 800b41a:	465b      	mov	r3, fp
 800b41c:	4622      	mov	r2, r4
 800b41e:	4629      	mov	r1, r5
 800b420:	4638      	mov	r0, r7
 800b422:	f7ff ff6b 	bl	800b2fc <__ssputs_r>
 800b426:	3001      	adds	r0, #1
 800b428:	f000 80a7 	beq.w	800b57a <_svfiprintf_r+0x1c6>
 800b42c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b42e:	445a      	add	r2, fp
 800b430:	9209      	str	r2, [sp, #36]	@ 0x24
 800b432:	f89a 3000 	ldrb.w	r3, [sl]
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 809f 	beq.w	800b57a <_svfiprintf_r+0x1c6>
 800b43c:	2300      	movs	r3, #0
 800b43e:	f04f 32ff 	mov.w	r2, #4294967295
 800b442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b446:	f10a 0a01 	add.w	sl, sl, #1
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	9307      	str	r3, [sp, #28]
 800b44e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b452:	931a      	str	r3, [sp, #104]	@ 0x68
 800b454:	4654      	mov	r4, sl
 800b456:	2205      	movs	r2, #5
 800b458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45c:	484e      	ldr	r0, [pc, #312]	@ (800b598 <_svfiprintf_r+0x1e4>)
 800b45e:	f7f4 fed7 	bl	8000210 <memchr>
 800b462:	9a04      	ldr	r2, [sp, #16]
 800b464:	b9d8      	cbnz	r0, 800b49e <_svfiprintf_r+0xea>
 800b466:	06d0      	lsls	r0, r2, #27
 800b468:	bf44      	itt	mi
 800b46a:	2320      	movmi	r3, #32
 800b46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b470:	0711      	lsls	r1, r2, #28
 800b472:	bf44      	itt	mi
 800b474:	232b      	movmi	r3, #43	@ 0x2b
 800b476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b47a:	f89a 3000 	ldrb.w	r3, [sl]
 800b47e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b480:	d015      	beq.n	800b4ae <_svfiprintf_r+0xfa>
 800b482:	9a07      	ldr	r2, [sp, #28]
 800b484:	4654      	mov	r4, sl
 800b486:	2000      	movs	r0, #0
 800b488:	f04f 0c0a 	mov.w	ip, #10
 800b48c:	4621      	mov	r1, r4
 800b48e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b492:	3b30      	subs	r3, #48	@ 0x30
 800b494:	2b09      	cmp	r3, #9
 800b496:	d94b      	bls.n	800b530 <_svfiprintf_r+0x17c>
 800b498:	b1b0      	cbz	r0, 800b4c8 <_svfiprintf_r+0x114>
 800b49a:	9207      	str	r2, [sp, #28]
 800b49c:	e014      	b.n	800b4c8 <_svfiprintf_r+0x114>
 800b49e:	eba0 0308 	sub.w	r3, r0, r8
 800b4a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	46a2      	mov	sl, r4
 800b4ac:	e7d2      	b.n	800b454 <_svfiprintf_r+0xa0>
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	1d19      	adds	r1, r3, #4
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	9103      	str	r1, [sp, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	bfbb      	ittet	lt
 800b4ba:	425b      	neglt	r3, r3
 800b4bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b4c0:	9307      	strge	r3, [sp, #28]
 800b4c2:	9307      	strlt	r3, [sp, #28]
 800b4c4:	bfb8      	it	lt
 800b4c6:	9204      	strlt	r2, [sp, #16]
 800b4c8:	7823      	ldrb	r3, [r4, #0]
 800b4ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4cc:	d10a      	bne.n	800b4e4 <_svfiprintf_r+0x130>
 800b4ce:	7863      	ldrb	r3, [r4, #1]
 800b4d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4d2:	d132      	bne.n	800b53a <_svfiprintf_r+0x186>
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	1d1a      	adds	r2, r3, #4
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	9203      	str	r2, [sp, #12]
 800b4dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4e0:	3402      	adds	r4, #2
 800b4e2:	9305      	str	r3, [sp, #20]
 800b4e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b5a8 <_svfiprintf_r+0x1f4>
 800b4e8:	7821      	ldrb	r1, [r4, #0]
 800b4ea:	2203      	movs	r2, #3
 800b4ec:	4650      	mov	r0, sl
 800b4ee:	f7f4 fe8f 	bl	8000210 <memchr>
 800b4f2:	b138      	cbz	r0, 800b504 <_svfiprintf_r+0x150>
 800b4f4:	9b04      	ldr	r3, [sp, #16]
 800b4f6:	eba0 000a 	sub.w	r0, r0, sl
 800b4fa:	2240      	movs	r2, #64	@ 0x40
 800b4fc:	4082      	lsls	r2, r0
 800b4fe:	4313      	orrs	r3, r2
 800b500:	3401      	adds	r4, #1
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b508:	4824      	ldr	r0, [pc, #144]	@ (800b59c <_svfiprintf_r+0x1e8>)
 800b50a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b50e:	2206      	movs	r2, #6
 800b510:	f7f4 fe7e 	bl	8000210 <memchr>
 800b514:	2800      	cmp	r0, #0
 800b516:	d036      	beq.n	800b586 <_svfiprintf_r+0x1d2>
 800b518:	4b21      	ldr	r3, [pc, #132]	@ (800b5a0 <_svfiprintf_r+0x1ec>)
 800b51a:	bb1b      	cbnz	r3, 800b564 <_svfiprintf_r+0x1b0>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	3307      	adds	r3, #7
 800b520:	f023 0307 	bic.w	r3, r3, #7
 800b524:	3308      	adds	r3, #8
 800b526:	9303      	str	r3, [sp, #12]
 800b528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b52a:	4433      	add	r3, r6
 800b52c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b52e:	e76a      	b.n	800b406 <_svfiprintf_r+0x52>
 800b530:	fb0c 3202 	mla	r2, ip, r2, r3
 800b534:	460c      	mov	r4, r1
 800b536:	2001      	movs	r0, #1
 800b538:	e7a8      	b.n	800b48c <_svfiprintf_r+0xd8>
 800b53a:	2300      	movs	r3, #0
 800b53c:	3401      	adds	r4, #1
 800b53e:	9305      	str	r3, [sp, #20]
 800b540:	4619      	mov	r1, r3
 800b542:	f04f 0c0a 	mov.w	ip, #10
 800b546:	4620      	mov	r0, r4
 800b548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b54c:	3a30      	subs	r2, #48	@ 0x30
 800b54e:	2a09      	cmp	r2, #9
 800b550:	d903      	bls.n	800b55a <_svfiprintf_r+0x1a6>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0c6      	beq.n	800b4e4 <_svfiprintf_r+0x130>
 800b556:	9105      	str	r1, [sp, #20]
 800b558:	e7c4      	b.n	800b4e4 <_svfiprintf_r+0x130>
 800b55a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b55e:	4604      	mov	r4, r0
 800b560:	2301      	movs	r3, #1
 800b562:	e7f0      	b.n	800b546 <_svfiprintf_r+0x192>
 800b564:	ab03      	add	r3, sp, #12
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	462a      	mov	r2, r5
 800b56a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a4 <_svfiprintf_r+0x1f0>)
 800b56c:	a904      	add	r1, sp, #16
 800b56e:	4638      	mov	r0, r7
 800b570:	f7fc fc7a 	bl	8007e68 <_printf_float>
 800b574:	1c42      	adds	r2, r0, #1
 800b576:	4606      	mov	r6, r0
 800b578:	d1d6      	bne.n	800b528 <_svfiprintf_r+0x174>
 800b57a:	89ab      	ldrh	r3, [r5, #12]
 800b57c:	065b      	lsls	r3, r3, #25
 800b57e:	f53f af2d 	bmi.w	800b3dc <_svfiprintf_r+0x28>
 800b582:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b584:	e72c      	b.n	800b3e0 <_svfiprintf_r+0x2c>
 800b586:	ab03      	add	r3, sp, #12
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	462a      	mov	r2, r5
 800b58c:	4b05      	ldr	r3, [pc, #20]	@ (800b5a4 <_svfiprintf_r+0x1f0>)
 800b58e:	a904      	add	r1, sp, #16
 800b590:	4638      	mov	r0, r7
 800b592:	f7fc ff01 	bl	8008398 <_printf_i>
 800b596:	e7ed      	b.n	800b574 <_svfiprintf_r+0x1c0>
 800b598:	0800d6b5 	.word	0x0800d6b5
 800b59c:	0800d6bf 	.word	0x0800d6bf
 800b5a0:	08007e69 	.word	0x08007e69
 800b5a4:	0800b2fd 	.word	0x0800b2fd
 800b5a8:	0800d6bb 	.word	0x0800d6bb

0800b5ac <__sflush_r>:
 800b5ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b4:	0716      	lsls	r6, r2, #28
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	d454      	bmi.n	800b666 <__sflush_r+0xba>
 800b5bc:	684b      	ldr	r3, [r1, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dc02      	bgt.n	800b5c8 <__sflush_r+0x1c>
 800b5c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	dd48      	ble.n	800b65a <__sflush_r+0xae>
 800b5c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5ca:	2e00      	cmp	r6, #0
 800b5cc:	d045      	beq.n	800b65a <__sflush_r+0xae>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5d4:	682f      	ldr	r7, [r5, #0]
 800b5d6:	6a21      	ldr	r1, [r4, #32]
 800b5d8:	602b      	str	r3, [r5, #0]
 800b5da:	d030      	beq.n	800b63e <__sflush_r+0x92>
 800b5dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	0759      	lsls	r1, r3, #29
 800b5e2:	d505      	bpl.n	800b5f0 <__sflush_r+0x44>
 800b5e4:	6863      	ldr	r3, [r4, #4]
 800b5e6:	1ad2      	subs	r2, r2, r3
 800b5e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5ea:	b10b      	cbz	r3, 800b5f0 <__sflush_r+0x44>
 800b5ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5ee:	1ad2      	subs	r2, r2, r3
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5f4:	6a21      	ldr	r1, [r4, #32]
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	47b0      	blx	r6
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	d106      	bne.n	800b60e <__sflush_r+0x62>
 800b600:	6829      	ldr	r1, [r5, #0]
 800b602:	291d      	cmp	r1, #29
 800b604:	d82b      	bhi.n	800b65e <__sflush_r+0xb2>
 800b606:	4a2a      	ldr	r2, [pc, #168]	@ (800b6b0 <__sflush_r+0x104>)
 800b608:	40ca      	lsrs	r2, r1
 800b60a:	07d6      	lsls	r6, r2, #31
 800b60c:	d527      	bpl.n	800b65e <__sflush_r+0xb2>
 800b60e:	2200      	movs	r2, #0
 800b610:	6062      	str	r2, [r4, #4]
 800b612:	04d9      	lsls	r1, r3, #19
 800b614:	6922      	ldr	r2, [r4, #16]
 800b616:	6022      	str	r2, [r4, #0]
 800b618:	d504      	bpl.n	800b624 <__sflush_r+0x78>
 800b61a:	1c42      	adds	r2, r0, #1
 800b61c:	d101      	bne.n	800b622 <__sflush_r+0x76>
 800b61e:	682b      	ldr	r3, [r5, #0]
 800b620:	b903      	cbnz	r3, 800b624 <__sflush_r+0x78>
 800b622:	6560      	str	r0, [r4, #84]	@ 0x54
 800b624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b626:	602f      	str	r7, [r5, #0]
 800b628:	b1b9      	cbz	r1, 800b65a <__sflush_r+0xae>
 800b62a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b62e:	4299      	cmp	r1, r3
 800b630:	d002      	beq.n	800b638 <__sflush_r+0x8c>
 800b632:	4628      	mov	r0, r5
 800b634:	f7fe fa34 	bl	8009aa0 <_free_r>
 800b638:	2300      	movs	r3, #0
 800b63a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b63c:	e00d      	b.n	800b65a <__sflush_r+0xae>
 800b63e:	2301      	movs	r3, #1
 800b640:	4628      	mov	r0, r5
 800b642:	47b0      	blx	r6
 800b644:	4602      	mov	r2, r0
 800b646:	1c50      	adds	r0, r2, #1
 800b648:	d1c9      	bne.n	800b5de <__sflush_r+0x32>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d0c6      	beq.n	800b5de <__sflush_r+0x32>
 800b650:	2b1d      	cmp	r3, #29
 800b652:	d001      	beq.n	800b658 <__sflush_r+0xac>
 800b654:	2b16      	cmp	r3, #22
 800b656:	d11e      	bne.n	800b696 <__sflush_r+0xea>
 800b658:	602f      	str	r7, [r5, #0]
 800b65a:	2000      	movs	r0, #0
 800b65c:	e022      	b.n	800b6a4 <__sflush_r+0xf8>
 800b65e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b662:	b21b      	sxth	r3, r3
 800b664:	e01b      	b.n	800b69e <__sflush_r+0xf2>
 800b666:	690f      	ldr	r7, [r1, #16]
 800b668:	2f00      	cmp	r7, #0
 800b66a:	d0f6      	beq.n	800b65a <__sflush_r+0xae>
 800b66c:	0793      	lsls	r3, r2, #30
 800b66e:	680e      	ldr	r6, [r1, #0]
 800b670:	bf08      	it	eq
 800b672:	694b      	ldreq	r3, [r1, #20]
 800b674:	600f      	str	r7, [r1, #0]
 800b676:	bf18      	it	ne
 800b678:	2300      	movne	r3, #0
 800b67a:	eba6 0807 	sub.w	r8, r6, r7
 800b67e:	608b      	str	r3, [r1, #8]
 800b680:	f1b8 0f00 	cmp.w	r8, #0
 800b684:	dde9      	ble.n	800b65a <__sflush_r+0xae>
 800b686:	6a21      	ldr	r1, [r4, #32]
 800b688:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b68a:	4643      	mov	r3, r8
 800b68c:	463a      	mov	r2, r7
 800b68e:	4628      	mov	r0, r5
 800b690:	47b0      	blx	r6
 800b692:	2800      	cmp	r0, #0
 800b694:	dc08      	bgt.n	800b6a8 <__sflush_r+0xfc>
 800b696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b69a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b69e:	81a3      	strh	r3, [r4, #12]
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a8:	4407      	add	r7, r0
 800b6aa:	eba8 0800 	sub.w	r8, r8, r0
 800b6ae:	e7e7      	b.n	800b680 <__sflush_r+0xd4>
 800b6b0:	20400001 	.word	0x20400001

0800b6b4 <_fflush_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	690b      	ldr	r3, [r1, #16]
 800b6b8:	4605      	mov	r5, r0
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	b913      	cbnz	r3, 800b6c4 <_fflush_r+0x10>
 800b6be:	2500      	movs	r5, #0
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	bd38      	pop	{r3, r4, r5, pc}
 800b6c4:	b118      	cbz	r0, 800b6ce <_fflush_r+0x1a>
 800b6c6:	6a03      	ldr	r3, [r0, #32]
 800b6c8:	b90b      	cbnz	r3, 800b6ce <_fflush_r+0x1a>
 800b6ca:	f7fd fa1d 	bl	8008b08 <__sinit>
 800b6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d0f3      	beq.n	800b6be <_fflush_r+0xa>
 800b6d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6d8:	07d0      	lsls	r0, r2, #31
 800b6da:	d404      	bmi.n	800b6e6 <_fflush_r+0x32>
 800b6dc:	0599      	lsls	r1, r3, #22
 800b6de:	d402      	bmi.n	800b6e6 <_fflush_r+0x32>
 800b6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6e2:	f7fd fb6c 	bl	8008dbe <__retarget_lock_acquire_recursive>
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	f7ff ff5f 	bl	800b5ac <__sflush_r>
 800b6ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6f0:	07da      	lsls	r2, r3, #31
 800b6f2:	4605      	mov	r5, r0
 800b6f4:	d4e4      	bmi.n	800b6c0 <_fflush_r+0xc>
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	059b      	lsls	r3, r3, #22
 800b6fa:	d4e1      	bmi.n	800b6c0 <_fflush_r+0xc>
 800b6fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6fe:	f7fd fb5f 	bl	8008dc0 <__retarget_lock_release_recursive>
 800b702:	e7dd      	b.n	800b6c0 <_fflush_r+0xc>

0800b704 <memmove>:
 800b704:	4288      	cmp	r0, r1
 800b706:	b510      	push	{r4, lr}
 800b708:	eb01 0402 	add.w	r4, r1, r2
 800b70c:	d902      	bls.n	800b714 <memmove+0x10>
 800b70e:	4284      	cmp	r4, r0
 800b710:	4623      	mov	r3, r4
 800b712:	d807      	bhi.n	800b724 <memmove+0x20>
 800b714:	1e43      	subs	r3, r0, #1
 800b716:	42a1      	cmp	r1, r4
 800b718:	d008      	beq.n	800b72c <memmove+0x28>
 800b71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b722:	e7f8      	b.n	800b716 <memmove+0x12>
 800b724:	4402      	add	r2, r0
 800b726:	4601      	mov	r1, r0
 800b728:	428a      	cmp	r2, r1
 800b72a:	d100      	bne.n	800b72e <memmove+0x2a>
 800b72c:	bd10      	pop	{r4, pc}
 800b72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b736:	e7f7      	b.n	800b728 <memmove+0x24>

0800b738 <strncmp>:
 800b738:	b510      	push	{r4, lr}
 800b73a:	b16a      	cbz	r2, 800b758 <strncmp+0x20>
 800b73c:	3901      	subs	r1, #1
 800b73e:	1884      	adds	r4, r0, r2
 800b740:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b744:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b748:	429a      	cmp	r2, r3
 800b74a:	d103      	bne.n	800b754 <strncmp+0x1c>
 800b74c:	42a0      	cmp	r0, r4
 800b74e:	d001      	beq.n	800b754 <strncmp+0x1c>
 800b750:	2a00      	cmp	r2, #0
 800b752:	d1f5      	bne.n	800b740 <strncmp+0x8>
 800b754:	1ad0      	subs	r0, r2, r3
 800b756:	bd10      	pop	{r4, pc}
 800b758:	4610      	mov	r0, r2
 800b75a:	e7fc      	b.n	800b756 <strncmp+0x1e>

0800b75c <_sbrk_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4d06      	ldr	r5, [pc, #24]	@ (800b778 <_sbrk_r+0x1c>)
 800b760:	2300      	movs	r3, #0
 800b762:	4604      	mov	r4, r0
 800b764:	4608      	mov	r0, r1
 800b766:	602b      	str	r3, [r5, #0]
 800b768:	f7f8 fc3e 	bl	8003fe8 <_sbrk>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d102      	bne.n	800b776 <_sbrk_r+0x1a>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	b103      	cbz	r3, 800b776 <_sbrk_r+0x1a>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	200036e0 	.word	0x200036e0
 800b77c:	00000000 	.word	0x00000000

0800b780 <nan>:
 800b780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b788 <nan+0x8>
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	00000000 	.word	0x00000000
 800b78c:	7ff80000 	.word	0x7ff80000

0800b790 <__assert_func>:
 800b790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b792:	4614      	mov	r4, r2
 800b794:	461a      	mov	r2, r3
 800b796:	4b09      	ldr	r3, [pc, #36]	@ (800b7bc <__assert_func+0x2c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4605      	mov	r5, r0
 800b79c:	68d8      	ldr	r0, [r3, #12]
 800b79e:	b14c      	cbz	r4, 800b7b4 <__assert_func+0x24>
 800b7a0:	4b07      	ldr	r3, [pc, #28]	@ (800b7c0 <__assert_func+0x30>)
 800b7a2:	9100      	str	r1, [sp, #0]
 800b7a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7a8:	4906      	ldr	r1, [pc, #24]	@ (800b7c4 <__assert_func+0x34>)
 800b7aa:	462b      	mov	r3, r5
 800b7ac:	f000 fba8 	bl	800bf00 <fiprintf>
 800b7b0:	f000 fbb8 	bl	800bf24 <abort>
 800b7b4:	4b04      	ldr	r3, [pc, #16]	@ (800b7c8 <__assert_func+0x38>)
 800b7b6:	461c      	mov	r4, r3
 800b7b8:	e7f3      	b.n	800b7a2 <__assert_func+0x12>
 800b7ba:	bf00      	nop
 800b7bc:	2000001c 	.word	0x2000001c
 800b7c0:	0800d6ce 	.word	0x0800d6ce
 800b7c4:	0800d6db 	.word	0x0800d6db
 800b7c8:	0800d709 	.word	0x0800d709

0800b7cc <_calloc_r>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	fba1 5402 	umull	r5, r4, r1, r2
 800b7d2:	b934      	cbnz	r4, 800b7e2 <_calloc_r+0x16>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	f7fe f9d7 	bl	8009b88 <_malloc_r>
 800b7da:	4606      	mov	r6, r0
 800b7dc:	b928      	cbnz	r0, 800b7ea <_calloc_r+0x1e>
 800b7de:	4630      	mov	r0, r6
 800b7e0:	bd70      	pop	{r4, r5, r6, pc}
 800b7e2:	220c      	movs	r2, #12
 800b7e4:	6002      	str	r2, [r0, #0]
 800b7e6:	2600      	movs	r6, #0
 800b7e8:	e7f9      	b.n	800b7de <_calloc_r+0x12>
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	f7fd fa5c 	bl	8008caa <memset>
 800b7f2:	e7f4      	b.n	800b7de <_calloc_r+0x12>

0800b7f4 <rshift>:
 800b7f4:	6903      	ldr	r3, [r0, #16]
 800b7f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b802:	f100 0414 	add.w	r4, r0, #20
 800b806:	dd45      	ble.n	800b894 <rshift+0xa0>
 800b808:	f011 011f 	ands.w	r1, r1, #31
 800b80c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b810:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b814:	d10c      	bne.n	800b830 <rshift+0x3c>
 800b816:	f100 0710 	add.w	r7, r0, #16
 800b81a:	4629      	mov	r1, r5
 800b81c:	42b1      	cmp	r1, r6
 800b81e:	d334      	bcc.n	800b88a <rshift+0x96>
 800b820:	1a9b      	subs	r3, r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	1eea      	subs	r2, r5, #3
 800b826:	4296      	cmp	r6, r2
 800b828:	bf38      	it	cc
 800b82a:	2300      	movcc	r3, #0
 800b82c:	4423      	add	r3, r4
 800b82e:	e015      	b.n	800b85c <rshift+0x68>
 800b830:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b834:	f1c1 0820 	rsb	r8, r1, #32
 800b838:	40cf      	lsrs	r7, r1
 800b83a:	f105 0e04 	add.w	lr, r5, #4
 800b83e:	46a1      	mov	r9, r4
 800b840:	4576      	cmp	r6, lr
 800b842:	46f4      	mov	ip, lr
 800b844:	d815      	bhi.n	800b872 <rshift+0x7e>
 800b846:	1a9a      	subs	r2, r3, r2
 800b848:	0092      	lsls	r2, r2, #2
 800b84a:	3a04      	subs	r2, #4
 800b84c:	3501      	adds	r5, #1
 800b84e:	42ae      	cmp	r6, r5
 800b850:	bf38      	it	cc
 800b852:	2200      	movcc	r2, #0
 800b854:	18a3      	adds	r3, r4, r2
 800b856:	50a7      	str	r7, [r4, r2]
 800b858:	b107      	cbz	r7, 800b85c <rshift+0x68>
 800b85a:	3304      	adds	r3, #4
 800b85c:	1b1a      	subs	r2, r3, r4
 800b85e:	42a3      	cmp	r3, r4
 800b860:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b864:	bf08      	it	eq
 800b866:	2300      	moveq	r3, #0
 800b868:	6102      	str	r2, [r0, #16]
 800b86a:	bf08      	it	eq
 800b86c:	6143      	streq	r3, [r0, #20]
 800b86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b872:	f8dc c000 	ldr.w	ip, [ip]
 800b876:	fa0c fc08 	lsl.w	ip, ip, r8
 800b87a:	ea4c 0707 	orr.w	r7, ip, r7
 800b87e:	f849 7b04 	str.w	r7, [r9], #4
 800b882:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b886:	40cf      	lsrs	r7, r1
 800b888:	e7da      	b.n	800b840 <rshift+0x4c>
 800b88a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b88e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b892:	e7c3      	b.n	800b81c <rshift+0x28>
 800b894:	4623      	mov	r3, r4
 800b896:	e7e1      	b.n	800b85c <rshift+0x68>

0800b898 <__hexdig_fun>:
 800b898:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b89c:	2b09      	cmp	r3, #9
 800b89e:	d802      	bhi.n	800b8a6 <__hexdig_fun+0xe>
 800b8a0:	3820      	subs	r0, #32
 800b8a2:	b2c0      	uxtb	r0, r0
 800b8a4:	4770      	bx	lr
 800b8a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b8aa:	2b05      	cmp	r3, #5
 800b8ac:	d801      	bhi.n	800b8b2 <__hexdig_fun+0x1a>
 800b8ae:	3847      	subs	r0, #71	@ 0x47
 800b8b0:	e7f7      	b.n	800b8a2 <__hexdig_fun+0xa>
 800b8b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b8b6:	2b05      	cmp	r3, #5
 800b8b8:	d801      	bhi.n	800b8be <__hexdig_fun+0x26>
 800b8ba:	3827      	subs	r0, #39	@ 0x27
 800b8bc:	e7f1      	b.n	800b8a2 <__hexdig_fun+0xa>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	4770      	bx	lr
	...

0800b8c4 <__gethex>:
 800b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c8:	b085      	sub	sp, #20
 800b8ca:	468a      	mov	sl, r1
 800b8cc:	9302      	str	r3, [sp, #8]
 800b8ce:	680b      	ldr	r3, [r1, #0]
 800b8d0:	9001      	str	r0, [sp, #4]
 800b8d2:	4690      	mov	r8, r2
 800b8d4:	1c9c      	adds	r4, r3, #2
 800b8d6:	46a1      	mov	r9, r4
 800b8d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b8dc:	2830      	cmp	r0, #48	@ 0x30
 800b8de:	d0fa      	beq.n	800b8d6 <__gethex+0x12>
 800b8e0:	eba9 0303 	sub.w	r3, r9, r3
 800b8e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b8e8:	f7ff ffd6 	bl	800b898 <__hexdig_fun>
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d168      	bne.n	800b9c4 <__gethex+0x100>
 800b8f2:	49a0      	ldr	r1, [pc, #640]	@ (800bb74 <__gethex+0x2b0>)
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	4648      	mov	r0, r9
 800b8f8:	f7ff ff1e 	bl	800b738 <strncmp>
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d167      	bne.n	800b9d2 <__gethex+0x10e>
 800b902:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b906:	4626      	mov	r6, r4
 800b908:	f7ff ffc6 	bl	800b898 <__hexdig_fun>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d062      	beq.n	800b9d6 <__gethex+0x112>
 800b910:	4623      	mov	r3, r4
 800b912:	7818      	ldrb	r0, [r3, #0]
 800b914:	2830      	cmp	r0, #48	@ 0x30
 800b916:	4699      	mov	r9, r3
 800b918:	f103 0301 	add.w	r3, r3, #1
 800b91c:	d0f9      	beq.n	800b912 <__gethex+0x4e>
 800b91e:	f7ff ffbb 	bl	800b898 <__hexdig_fun>
 800b922:	fab0 f580 	clz	r5, r0
 800b926:	096d      	lsrs	r5, r5, #5
 800b928:	f04f 0b01 	mov.w	fp, #1
 800b92c:	464a      	mov	r2, r9
 800b92e:	4616      	mov	r6, r2
 800b930:	3201      	adds	r2, #1
 800b932:	7830      	ldrb	r0, [r6, #0]
 800b934:	f7ff ffb0 	bl	800b898 <__hexdig_fun>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d1f8      	bne.n	800b92e <__gethex+0x6a>
 800b93c:	498d      	ldr	r1, [pc, #564]	@ (800bb74 <__gethex+0x2b0>)
 800b93e:	2201      	movs	r2, #1
 800b940:	4630      	mov	r0, r6
 800b942:	f7ff fef9 	bl	800b738 <strncmp>
 800b946:	2800      	cmp	r0, #0
 800b948:	d13f      	bne.n	800b9ca <__gethex+0x106>
 800b94a:	b944      	cbnz	r4, 800b95e <__gethex+0x9a>
 800b94c:	1c74      	adds	r4, r6, #1
 800b94e:	4622      	mov	r2, r4
 800b950:	4616      	mov	r6, r2
 800b952:	3201      	adds	r2, #1
 800b954:	7830      	ldrb	r0, [r6, #0]
 800b956:	f7ff ff9f 	bl	800b898 <__hexdig_fun>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d1f8      	bne.n	800b950 <__gethex+0x8c>
 800b95e:	1ba4      	subs	r4, r4, r6
 800b960:	00a7      	lsls	r7, r4, #2
 800b962:	7833      	ldrb	r3, [r6, #0]
 800b964:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b968:	2b50      	cmp	r3, #80	@ 0x50
 800b96a:	d13e      	bne.n	800b9ea <__gethex+0x126>
 800b96c:	7873      	ldrb	r3, [r6, #1]
 800b96e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b970:	d033      	beq.n	800b9da <__gethex+0x116>
 800b972:	2b2d      	cmp	r3, #45	@ 0x2d
 800b974:	d034      	beq.n	800b9e0 <__gethex+0x11c>
 800b976:	1c71      	adds	r1, r6, #1
 800b978:	2400      	movs	r4, #0
 800b97a:	7808      	ldrb	r0, [r1, #0]
 800b97c:	f7ff ff8c 	bl	800b898 <__hexdig_fun>
 800b980:	1e43      	subs	r3, r0, #1
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b18      	cmp	r3, #24
 800b986:	d830      	bhi.n	800b9ea <__gethex+0x126>
 800b988:	f1a0 0210 	sub.w	r2, r0, #16
 800b98c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b990:	f7ff ff82 	bl	800b898 <__hexdig_fun>
 800b994:	f100 3cff 	add.w	ip, r0, #4294967295
 800b998:	fa5f fc8c 	uxtb.w	ip, ip
 800b99c:	f1bc 0f18 	cmp.w	ip, #24
 800b9a0:	f04f 030a 	mov.w	r3, #10
 800b9a4:	d91e      	bls.n	800b9e4 <__gethex+0x120>
 800b9a6:	b104      	cbz	r4, 800b9aa <__gethex+0xe6>
 800b9a8:	4252      	negs	r2, r2
 800b9aa:	4417      	add	r7, r2
 800b9ac:	f8ca 1000 	str.w	r1, [sl]
 800b9b0:	b1ed      	cbz	r5, 800b9ee <__gethex+0x12a>
 800b9b2:	f1bb 0f00 	cmp.w	fp, #0
 800b9b6:	bf0c      	ite	eq
 800b9b8:	2506      	moveq	r5, #6
 800b9ba:	2500      	movne	r5, #0
 800b9bc:	4628      	mov	r0, r5
 800b9be:	b005      	add	sp, #20
 800b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c4:	2500      	movs	r5, #0
 800b9c6:	462c      	mov	r4, r5
 800b9c8:	e7b0      	b.n	800b92c <__gethex+0x68>
 800b9ca:	2c00      	cmp	r4, #0
 800b9cc:	d1c7      	bne.n	800b95e <__gethex+0x9a>
 800b9ce:	4627      	mov	r7, r4
 800b9d0:	e7c7      	b.n	800b962 <__gethex+0x9e>
 800b9d2:	464e      	mov	r6, r9
 800b9d4:	462f      	mov	r7, r5
 800b9d6:	2501      	movs	r5, #1
 800b9d8:	e7c3      	b.n	800b962 <__gethex+0x9e>
 800b9da:	2400      	movs	r4, #0
 800b9dc:	1cb1      	adds	r1, r6, #2
 800b9de:	e7cc      	b.n	800b97a <__gethex+0xb6>
 800b9e0:	2401      	movs	r4, #1
 800b9e2:	e7fb      	b.n	800b9dc <__gethex+0x118>
 800b9e4:	fb03 0002 	mla	r0, r3, r2, r0
 800b9e8:	e7ce      	b.n	800b988 <__gethex+0xc4>
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	e7de      	b.n	800b9ac <__gethex+0xe8>
 800b9ee:	eba6 0309 	sub.w	r3, r6, r9
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	2b07      	cmp	r3, #7
 800b9f8:	dc0a      	bgt.n	800ba10 <__gethex+0x14c>
 800b9fa:	9801      	ldr	r0, [sp, #4]
 800b9fc:	f7fe f950 	bl	8009ca0 <_Balloc>
 800ba00:	4604      	mov	r4, r0
 800ba02:	b940      	cbnz	r0, 800ba16 <__gethex+0x152>
 800ba04:	4b5c      	ldr	r3, [pc, #368]	@ (800bb78 <__gethex+0x2b4>)
 800ba06:	4602      	mov	r2, r0
 800ba08:	21e4      	movs	r1, #228	@ 0xe4
 800ba0a:	485c      	ldr	r0, [pc, #368]	@ (800bb7c <__gethex+0x2b8>)
 800ba0c:	f7ff fec0 	bl	800b790 <__assert_func>
 800ba10:	3101      	adds	r1, #1
 800ba12:	105b      	asrs	r3, r3, #1
 800ba14:	e7ef      	b.n	800b9f6 <__gethex+0x132>
 800ba16:	f100 0a14 	add.w	sl, r0, #20
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	4655      	mov	r5, sl
 800ba1e:	469b      	mov	fp, r3
 800ba20:	45b1      	cmp	r9, r6
 800ba22:	d337      	bcc.n	800ba94 <__gethex+0x1d0>
 800ba24:	f845 bb04 	str.w	fp, [r5], #4
 800ba28:	eba5 050a 	sub.w	r5, r5, sl
 800ba2c:	10ad      	asrs	r5, r5, #2
 800ba2e:	6125      	str	r5, [r4, #16]
 800ba30:	4658      	mov	r0, fp
 800ba32:	f7fe fa27 	bl	8009e84 <__hi0bits>
 800ba36:	016d      	lsls	r5, r5, #5
 800ba38:	f8d8 6000 	ldr.w	r6, [r8]
 800ba3c:	1a2d      	subs	r5, r5, r0
 800ba3e:	42b5      	cmp	r5, r6
 800ba40:	dd54      	ble.n	800baec <__gethex+0x228>
 800ba42:	1bad      	subs	r5, r5, r6
 800ba44:	4629      	mov	r1, r5
 800ba46:	4620      	mov	r0, r4
 800ba48:	f7fe fdb3 	bl	800a5b2 <__any_on>
 800ba4c:	4681      	mov	r9, r0
 800ba4e:	b178      	cbz	r0, 800ba70 <__gethex+0x1ac>
 800ba50:	1e6b      	subs	r3, r5, #1
 800ba52:	1159      	asrs	r1, r3, #5
 800ba54:	f003 021f 	and.w	r2, r3, #31
 800ba58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ba5c:	f04f 0901 	mov.w	r9, #1
 800ba60:	fa09 f202 	lsl.w	r2, r9, r2
 800ba64:	420a      	tst	r2, r1
 800ba66:	d003      	beq.n	800ba70 <__gethex+0x1ac>
 800ba68:	454b      	cmp	r3, r9
 800ba6a:	dc36      	bgt.n	800bada <__gethex+0x216>
 800ba6c:	f04f 0902 	mov.w	r9, #2
 800ba70:	4629      	mov	r1, r5
 800ba72:	4620      	mov	r0, r4
 800ba74:	f7ff febe 	bl	800b7f4 <rshift>
 800ba78:	442f      	add	r7, r5
 800ba7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba7e:	42bb      	cmp	r3, r7
 800ba80:	da42      	bge.n	800bb08 <__gethex+0x244>
 800ba82:	9801      	ldr	r0, [sp, #4]
 800ba84:	4621      	mov	r1, r4
 800ba86:	f7fe f94b 	bl	8009d20 <_Bfree>
 800ba8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	25a3      	movs	r5, #163	@ 0xa3
 800ba92:	e793      	b.n	800b9bc <__gethex+0xf8>
 800ba94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ba98:	2a2e      	cmp	r2, #46	@ 0x2e
 800ba9a:	d012      	beq.n	800bac2 <__gethex+0x1fe>
 800ba9c:	2b20      	cmp	r3, #32
 800ba9e:	d104      	bne.n	800baaa <__gethex+0x1e6>
 800baa0:	f845 bb04 	str.w	fp, [r5], #4
 800baa4:	f04f 0b00 	mov.w	fp, #0
 800baa8:	465b      	mov	r3, fp
 800baaa:	7830      	ldrb	r0, [r6, #0]
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	f7ff fef3 	bl	800b898 <__hexdig_fun>
 800bab2:	9b03      	ldr	r3, [sp, #12]
 800bab4:	f000 000f 	and.w	r0, r0, #15
 800bab8:	4098      	lsls	r0, r3
 800baba:	ea4b 0b00 	orr.w	fp, fp, r0
 800babe:	3304      	adds	r3, #4
 800bac0:	e7ae      	b.n	800ba20 <__gethex+0x15c>
 800bac2:	45b1      	cmp	r9, r6
 800bac4:	d8ea      	bhi.n	800ba9c <__gethex+0x1d8>
 800bac6:	492b      	ldr	r1, [pc, #172]	@ (800bb74 <__gethex+0x2b0>)
 800bac8:	9303      	str	r3, [sp, #12]
 800baca:	2201      	movs	r2, #1
 800bacc:	4630      	mov	r0, r6
 800bace:	f7ff fe33 	bl	800b738 <strncmp>
 800bad2:	9b03      	ldr	r3, [sp, #12]
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d1e1      	bne.n	800ba9c <__gethex+0x1d8>
 800bad8:	e7a2      	b.n	800ba20 <__gethex+0x15c>
 800bada:	1ea9      	subs	r1, r5, #2
 800badc:	4620      	mov	r0, r4
 800bade:	f7fe fd68 	bl	800a5b2 <__any_on>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d0c2      	beq.n	800ba6c <__gethex+0x1a8>
 800bae6:	f04f 0903 	mov.w	r9, #3
 800baea:	e7c1      	b.n	800ba70 <__gethex+0x1ac>
 800baec:	da09      	bge.n	800bb02 <__gethex+0x23e>
 800baee:	1b75      	subs	r5, r6, r5
 800baf0:	4621      	mov	r1, r4
 800baf2:	9801      	ldr	r0, [sp, #4]
 800baf4:	462a      	mov	r2, r5
 800baf6:	f7fe fb23 	bl	800a140 <__lshift>
 800bafa:	1b7f      	subs	r7, r7, r5
 800bafc:	4604      	mov	r4, r0
 800bafe:	f100 0a14 	add.w	sl, r0, #20
 800bb02:	f04f 0900 	mov.w	r9, #0
 800bb06:	e7b8      	b.n	800ba7a <__gethex+0x1b6>
 800bb08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bb0c:	42bd      	cmp	r5, r7
 800bb0e:	dd6f      	ble.n	800bbf0 <__gethex+0x32c>
 800bb10:	1bed      	subs	r5, r5, r7
 800bb12:	42ae      	cmp	r6, r5
 800bb14:	dc34      	bgt.n	800bb80 <__gethex+0x2bc>
 800bb16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d022      	beq.n	800bb64 <__gethex+0x2a0>
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d024      	beq.n	800bb6c <__gethex+0x2a8>
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d115      	bne.n	800bb52 <__gethex+0x28e>
 800bb26:	42ae      	cmp	r6, r5
 800bb28:	d113      	bne.n	800bb52 <__gethex+0x28e>
 800bb2a:	2e01      	cmp	r6, #1
 800bb2c:	d10b      	bne.n	800bb46 <__gethex+0x282>
 800bb2e:	9a02      	ldr	r2, [sp, #8]
 800bb30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	2301      	movs	r3, #1
 800bb38:	6123      	str	r3, [r4, #16]
 800bb3a:	f8ca 3000 	str.w	r3, [sl]
 800bb3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb40:	2562      	movs	r5, #98	@ 0x62
 800bb42:	601c      	str	r4, [r3, #0]
 800bb44:	e73a      	b.n	800b9bc <__gethex+0xf8>
 800bb46:	1e71      	subs	r1, r6, #1
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f7fe fd32 	bl	800a5b2 <__any_on>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d1ed      	bne.n	800bb2e <__gethex+0x26a>
 800bb52:	9801      	ldr	r0, [sp, #4]
 800bb54:	4621      	mov	r1, r4
 800bb56:	f7fe f8e3 	bl	8009d20 <_Bfree>
 800bb5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	2550      	movs	r5, #80	@ 0x50
 800bb62:	e72b      	b.n	800b9bc <__gethex+0xf8>
 800bb64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1f3      	bne.n	800bb52 <__gethex+0x28e>
 800bb6a:	e7e0      	b.n	800bb2e <__gethex+0x26a>
 800bb6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1dd      	bne.n	800bb2e <__gethex+0x26a>
 800bb72:	e7ee      	b.n	800bb52 <__gethex+0x28e>
 800bb74:	0800d6b3 	.word	0x0800d6b3
 800bb78:	0800d649 	.word	0x0800d649
 800bb7c:	0800d70a 	.word	0x0800d70a
 800bb80:	1e6f      	subs	r7, r5, #1
 800bb82:	f1b9 0f00 	cmp.w	r9, #0
 800bb86:	d130      	bne.n	800bbea <__gethex+0x326>
 800bb88:	b127      	cbz	r7, 800bb94 <__gethex+0x2d0>
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f7fe fd10 	bl	800a5b2 <__any_on>
 800bb92:	4681      	mov	r9, r0
 800bb94:	117a      	asrs	r2, r7, #5
 800bb96:	2301      	movs	r3, #1
 800bb98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bb9c:	f007 071f 	and.w	r7, r7, #31
 800bba0:	40bb      	lsls	r3, r7
 800bba2:	4213      	tst	r3, r2
 800bba4:	4629      	mov	r1, r5
 800bba6:	4620      	mov	r0, r4
 800bba8:	bf18      	it	ne
 800bbaa:	f049 0902 	orrne.w	r9, r9, #2
 800bbae:	f7ff fe21 	bl	800b7f4 <rshift>
 800bbb2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bbb6:	1b76      	subs	r6, r6, r5
 800bbb8:	2502      	movs	r5, #2
 800bbba:	f1b9 0f00 	cmp.w	r9, #0
 800bbbe:	d047      	beq.n	800bc50 <__gethex+0x38c>
 800bbc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d015      	beq.n	800bbf4 <__gethex+0x330>
 800bbc8:	2b03      	cmp	r3, #3
 800bbca:	d017      	beq.n	800bbfc <__gethex+0x338>
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d109      	bne.n	800bbe4 <__gethex+0x320>
 800bbd0:	f019 0f02 	tst.w	r9, #2
 800bbd4:	d006      	beq.n	800bbe4 <__gethex+0x320>
 800bbd6:	f8da 3000 	ldr.w	r3, [sl]
 800bbda:	ea49 0903 	orr.w	r9, r9, r3
 800bbde:	f019 0f01 	tst.w	r9, #1
 800bbe2:	d10e      	bne.n	800bc02 <__gethex+0x33e>
 800bbe4:	f045 0510 	orr.w	r5, r5, #16
 800bbe8:	e032      	b.n	800bc50 <__gethex+0x38c>
 800bbea:	f04f 0901 	mov.w	r9, #1
 800bbee:	e7d1      	b.n	800bb94 <__gethex+0x2d0>
 800bbf0:	2501      	movs	r5, #1
 800bbf2:	e7e2      	b.n	800bbba <__gethex+0x2f6>
 800bbf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbf6:	f1c3 0301 	rsb	r3, r3, #1
 800bbfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0f0      	beq.n	800bbe4 <__gethex+0x320>
 800bc02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc06:	f104 0314 	add.w	r3, r4, #20
 800bc0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc12:	f04f 0c00 	mov.w	ip, #0
 800bc16:	4618      	mov	r0, r3
 800bc18:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc20:	d01b      	beq.n	800bc5a <__gethex+0x396>
 800bc22:	3201      	adds	r2, #1
 800bc24:	6002      	str	r2, [r0, #0]
 800bc26:	2d02      	cmp	r5, #2
 800bc28:	f104 0314 	add.w	r3, r4, #20
 800bc2c:	d13c      	bne.n	800bca8 <__gethex+0x3e4>
 800bc2e:	f8d8 2000 	ldr.w	r2, [r8]
 800bc32:	3a01      	subs	r2, #1
 800bc34:	42b2      	cmp	r2, r6
 800bc36:	d109      	bne.n	800bc4c <__gethex+0x388>
 800bc38:	1171      	asrs	r1, r6, #5
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc40:	f006 061f 	and.w	r6, r6, #31
 800bc44:	fa02 f606 	lsl.w	r6, r2, r6
 800bc48:	421e      	tst	r6, r3
 800bc4a:	d13a      	bne.n	800bcc2 <__gethex+0x3fe>
 800bc4c:	f045 0520 	orr.w	r5, r5, #32
 800bc50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc52:	601c      	str	r4, [r3, #0]
 800bc54:	9b02      	ldr	r3, [sp, #8]
 800bc56:	601f      	str	r7, [r3, #0]
 800bc58:	e6b0      	b.n	800b9bc <__gethex+0xf8>
 800bc5a:	4299      	cmp	r1, r3
 800bc5c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bc60:	d8d9      	bhi.n	800bc16 <__gethex+0x352>
 800bc62:	68a3      	ldr	r3, [r4, #8]
 800bc64:	459b      	cmp	fp, r3
 800bc66:	db17      	blt.n	800bc98 <__gethex+0x3d4>
 800bc68:	6861      	ldr	r1, [r4, #4]
 800bc6a:	9801      	ldr	r0, [sp, #4]
 800bc6c:	3101      	adds	r1, #1
 800bc6e:	f7fe f817 	bl	8009ca0 <_Balloc>
 800bc72:	4681      	mov	r9, r0
 800bc74:	b918      	cbnz	r0, 800bc7e <__gethex+0x3ba>
 800bc76:	4b1a      	ldr	r3, [pc, #104]	@ (800bce0 <__gethex+0x41c>)
 800bc78:	4602      	mov	r2, r0
 800bc7a:	2184      	movs	r1, #132	@ 0x84
 800bc7c:	e6c5      	b.n	800ba0a <__gethex+0x146>
 800bc7e:	6922      	ldr	r2, [r4, #16]
 800bc80:	3202      	adds	r2, #2
 800bc82:	f104 010c 	add.w	r1, r4, #12
 800bc86:	0092      	lsls	r2, r2, #2
 800bc88:	300c      	adds	r0, #12
 800bc8a:	f7fd f89a 	bl	8008dc2 <memcpy>
 800bc8e:	4621      	mov	r1, r4
 800bc90:	9801      	ldr	r0, [sp, #4]
 800bc92:	f7fe f845 	bl	8009d20 <_Bfree>
 800bc96:	464c      	mov	r4, r9
 800bc98:	6923      	ldr	r3, [r4, #16]
 800bc9a:	1c5a      	adds	r2, r3, #1
 800bc9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bca0:	6122      	str	r2, [r4, #16]
 800bca2:	2201      	movs	r2, #1
 800bca4:	615a      	str	r2, [r3, #20]
 800bca6:	e7be      	b.n	800bc26 <__gethex+0x362>
 800bca8:	6922      	ldr	r2, [r4, #16]
 800bcaa:	455a      	cmp	r2, fp
 800bcac:	dd0b      	ble.n	800bcc6 <__gethex+0x402>
 800bcae:	2101      	movs	r1, #1
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f7ff fd9f 	bl	800b7f4 <rshift>
 800bcb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcba:	3701      	adds	r7, #1
 800bcbc:	42bb      	cmp	r3, r7
 800bcbe:	f6ff aee0 	blt.w	800ba82 <__gethex+0x1be>
 800bcc2:	2501      	movs	r5, #1
 800bcc4:	e7c2      	b.n	800bc4c <__gethex+0x388>
 800bcc6:	f016 061f 	ands.w	r6, r6, #31
 800bcca:	d0fa      	beq.n	800bcc2 <__gethex+0x3fe>
 800bccc:	4453      	add	r3, sl
 800bcce:	f1c6 0620 	rsb	r6, r6, #32
 800bcd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bcd6:	f7fe f8d5 	bl	8009e84 <__hi0bits>
 800bcda:	42b0      	cmp	r0, r6
 800bcdc:	dbe7      	blt.n	800bcae <__gethex+0x3ea>
 800bcde:	e7f0      	b.n	800bcc2 <__gethex+0x3fe>
 800bce0:	0800d649 	.word	0x0800d649

0800bce4 <L_shift>:
 800bce4:	f1c2 0208 	rsb	r2, r2, #8
 800bce8:	0092      	lsls	r2, r2, #2
 800bcea:	b570      	push	{r4, r5, r6, lr}
 800bcec:	f1c2 0620 	rsb	r6, r2, #32
 800bcf0:	6843      	ldr	r3, [r0, #4]
 800bcf2:	6804      	ldr	r4, [r0, #0]
 800bcf4:	fa03 f506 	lsl.w	r5, r3, r6
 800bcf8:	432c      	orrs	r4, r5
 800bcfa:	40d3      	lsrs	r3, r2
 800bcfc:	6004      	str	r4, [r0, #0]
 800bcfe:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd02:	4288      	cmp	r0, r1
 800bd04:	d3f4      	bcc.n	800bcf0 <L_shift+0xc>
 800bd06:	bd70      	pop	{r4, r5, r6, pc}

0800bd08 <__match>:
 800bd08:	b530      	push	{r4, r5, lr}
 800bd0a:	6803      	ldr	r3, [r0, #0]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd12:	b914      	cbnz	r4, 800bd1a <__match+0x12>
 800bd14:	6003      	str	r3, [r0, #0]
 800bd16:	2001      	movs	r0, #1
 800bd18:	bd30      	pop	{r4, r5, pc}
 800bd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd1e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bd22:	2d19      	cmp	r5, #25
 800bd24:	bf98      	it	ls
 800bd26:	3220      	addls	r2, #32
 800bd28:	42a2      	cmp	r2, r4
 800bd2a:	d0f0      	beq.n	800bd0e <__match+0x6>
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	e7f3      	b.n	800bd18 <__match+0x10>

0800bd30 <__hexnan>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	680b      	ldr	r3, [r1, #0]
 800bd36:	6801      	ldr	r1, [r0, #0]
 800bd38:	115e      	asrs	r6, r3, #5
 800bd3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd3e:	f013 031f 	ands.w	r3, r3, #31
 800bd42:	b087      	sub	sp, #28
 800bd44:	bf18      	it	ne
 800bd46:	3604      	addne	r6, #4
 800bd48:	2500      	movs	r5, #0
 800bd4a:	1f37      	subs	r7, r6, #4
 800bd4c:	4682      	mov	sl, r0
 800bd4e:	4690      	mov	r8, r2
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd56:	46b9      	mov	r9, r7
 800bd58:	463c      	mov	r4, r7
 800bd5a:	9502      	str	r5, [sp, #8]
 800bd5c:	46ab      	mov	fp, r5
 800bd5e:	784a      	ldrb	r2, [r1, #1]
 800bd60:	1c4b      	adds	r3, r1, #1
 800bd62:	9303      	str	r3, [sp, #12]
 800bd64:	b342      	cbz	r2, 800bdb8 <__hexnan+0x88>
 800bd66:	4610      	mov	r0, r2
 800bd68:	9105      	str	r1, [sp, #20]
 800bd6a:	9204      	str	r2, [sp, #16]
 800bd6c:	f7ff fd94 	bl	800b898 <__hexdig_fun>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d151      	bne.n	800be18 <__hexnan+0xe8>
 800bd74:	9a04      	ldr	r2, [sp, #16]
 800bd76:	9905      	ldr	r1, [sp, #20]
 800bd78:	2a20      	cmp	r2, #32
 800bd7a:	d818      	bhi.n	800bdae <__hexnan+0x7e>
 800bd7c:	9b02      	ldr	r3, [sp, #8]
 800bd7e:	459b      	cmp	fp, r3
 800bd80:	dd13      	ble.n	800bdaa <__hexnan+0x7a>
 800bd82:	454c      	cmp	r4, r9
 800bd84:	d206      	bcs.n	800bd94 <__hexnan+0x64>
 800bd86:	2d07      	cmp	r5, #7
 800bd88:	dc04      	bgt.n	800bd94 <__hexnan+0x64>
 800bd8a:	462a      	mov	r2, r5
 800bd8c:	4649      	mov	r1, r9
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f7ff ffa8 	bl	800bce4 <L_shift>
 800bd94:	4544      	cmp	r4, r8
 800bd96:	d952      	bls.n	800be3e <__hexnan+0x10e>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f1a4 0904 	sub.w	r9, r4, #4
 800bd9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bda2:	f8cd b008 	str.w	fp, [sp, #8]
 800bda6:	464c      	mov	r4, r9
 800bda8:	461d      	mov	r5, r3
 800bdaa:	9903      	ldr	r1, [sp, #12]
 800bdac:	e7d7      	b.n	800bd5e <__hexnan+0x2e>
 800bdae:	2a29      	cmp	r2, #41	@ 0x29
 800bdb0:	d157      	bne.n	800be62 <__hexnan+0x132>
 800bdb2:	3102      	adds	r1, #2
 800bdb4:	f8ca 1000 	str.w	r1, [sl]
 800bdb8:	f1bb 0f00 	cmp.w	fp, #0
 800bdbc:	d051      	beq.n	800be62 <__hexnan+0x132>
 800bdbe:	454c      	cmp	r4, r9
 800bdc0:	d206      	bcs.n	800bdd0 <__hexnan+0xa0>
 800bdc2:	2d07      	cmp	r5, #7
 800bdc4:	dc04      	bgt.n	800bdd0 <__hexnan+0xa0>
 800bdc6:	462a      	mov	r2, r5
 800bdc8:	4649      	mov	r1, r9
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f7ff ff8a 	bl	800bce4 <L_shift>
 800bdd0:	4544      	cmp	r4, r8
 800bdd2:	d936      	bls.n	800be42 <__hexnan+0x112>
 800bdd4:	f1a8 0204 	sub.w	r2, r8, #4
 800bdd8:	4623      	mov	r3, r4
 800bdda:	f853 1b04 	ldr.w	r1, [r3], #4
 800bdde:	f842 1f04 	str.w	r1, [r2, #4]!
 800bde2:	429f      	cmp	r7, r3
 800bde4:	d2f9      	bcs.n	800bdda <__hexnan+0xaa>
 800bde6:	1b3b      	subs	r3, r7, r4
 800bde8:	f023 0303 	bic.w	r3, r3, #3
 800bdec:	3304      	adds	r3, #4
 800bdee:	3401      	adds	r4, #1
 800bdf0:	3e03      	subs	r6, #3
 800bdf2:	42b4      	cmp	r4, r6
 800bdf4:	bf88      	it	hi
 800bdf6:	2304      	movhi	r3, #4
 800bdf8:	4443      	add	r3, r8
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f843 2b04 	str.w	r2, [r3], #4
 800be00:	429f      	cmp	r7, r3
 800be02:	d2fb      	bcs.n	800bdfc <__hexnan+0xcc>
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	b91b      	cbnz	r3, 800be10 <__hexnan+0xe0>
 800be08:	4547      	cmp	r7, r8
 800be0a:	d128      	bne.n	800be5e <__hexnan+0x12e>
 800be0c:	2301      	movs	r3, #1
 800be0e:	603b      	str	r3, [r7, #0]
 800be10:	2005      	movs	r0, #5
 800be12:	b007      	add	sp, #28
 800be14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be18:	3501      	adds	r5, #1
 800be1a:	2d08      	cmp	r5, #8
 800be1c:	f10b 0b01 	add.w	fp, fp, #1
 800be20:	dd06      	ble.n	800be30 <__hexnan+0x100>
 800be22:	4544      	cmp	r4, r8
 800be24:	d9c1      	bls.n	800bdaa <__hexnan+0x7a>
 800be26:	2300      	movs	r3, #0
 800be28:	f844 3c04 	str.w	r3, [r4, #-4]
 800be2c:	2501      	movs	r5, #1
 800be2e:	3c04      	subs	r4, #4
 800be30:	6822      	ldr	r2, [r4, #0]
 800be32:	f000 000f 	and.w	r0, r0, #15
 800be36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800be3a:	6020      	str	r0, [r4, #0]
 800be3c:	e7b5      	b.n	800bdaa <__hexnan+0x7a>
 800be3e:	2508      	movs	r5, #8
 800be40:	e7b3      	b.n	800bdaa <__hexnan+0x7a>
 800be42:	9b01      	ldr	r3, [sp, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d0dd      	beq.n	800be04 <__hexnan+0xd4>
 800be48:	f1c3 0320 	rsb	r3, r3, #32
 800be4c:	f04f 32ff 	mov.w	r2, #4294967295
 800be50:	40da      	lsrs	r2, r3
 800be52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800be56:	4013      	ands	r3, r2
 800be58:	f846 3c04 	str.w	r3, [r6, #-4]
 800be5c:	e7d2      	b.n	800be04 <__hexnan+0xd4>
 800be5e:	3f04      	subs	r7, #4
 800be60:	e7d0      	b.n	800be04 <__hexnan+0xd4>
 800be62:	2004      	movs	r0, #4
 800be64:	e7d5      	b.n	800be12 <__hexnan+0xe2>

0800be66 <__ascii_mbtowc>:
 800be66:	b082      	sub	sp, #8
 800be68:	b901      	cbnz	r1, 800be6c <__ascii_mbtowc+0x6>
 800be6a:	a901      	add	r1, sp, #4
 800be6c:	b142      	cbz	r2, 800be80 <__ascii_mbtowc+0x1a>
 800be6e:	b14b      	cbz	r3, 800be84 <__ascii_mbtowc+0x1e>
 800be70:	7813      	ldrb	r3, [r2, #0]
 800be72:	600b      	str	r3, [r1, #0]
 800be74:	7812      	ldrb	r2, [r2, #0]
 800be76:	1e10      	subs	r0, r2, #0
 800be78:	bf18      	it	ne
 800be7a:	2001      	movne	r0, #1
 800be7c:	b002      	add	sp, #8
 800be7e:	4770      	bx	lr
 800be80:	4610      	mov	r0, r2
 800be82:	e7fb      	b.n	800be7c <__ascii_mbtowc+0x16>
 800be84:	f06f 0001 	mvn.w	r0, #1
 800be88:	e7f8      	b.n	800be7c <__ascii_mbtowc+0x16>

0800be8a <_realloc_r>:
 800be8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be8e:	4607      	mov	r7, r0
 800be90:	4614      	mov	r4, r2
 800be92:	460d      	mov	r5, r1
 800be94:	b921      	cbnz	r1, 800bea0 <_realloc_r+0x16>
 800be96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be9a:	4611      	mov	r1, r2
 800be9c:	f7fd be74 	b.w	8009b88 <_malloc_r>
 800bea0:	b92a      	cbnz	r2, 800beae <_realloc_r+0x24>
 800bea2:	f7fd fdfd 	bl	8009aa0 <_free_r>
 800bea6:	4625      	mov	r5, r4
 800bea8:	4628      	mov	r0, r5
 800beaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beae:	f000 f840 	bl	800bf32 <_malloc_usable_size_r>
 800beb2:	4284      	cmp	r4, r0
 800beb4:	4606      	mov	r6, r0
 800beb6:	d802      	bhi.n	800bebe <_realloc_r+0x34>
 800beb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bebc:	d8f4      	bhi.n	800bea8 <_realloc_r+0x1e>
 800bebe:	4621      	mov	r1, r4
 800bec0:	4638      	mov	r0, r7
 800bec2:	f7fd fe61 	bl	8009b88 <_malloc_r>
 800bec6:	4680      	mov	r8, r0
 800bec8:	b908      	cbnz	r0, 800bece <_realloc_r+0x44>
 800beca:	4645      	mov	r5, r8
 800becc:	e7ec      	b.n	800bea8 <_realloc_r+0x1e>
 800bece:	42b4      	cmp	r4, r6
 800bed0:	4622      	mov	r2, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	bf28      	it	cs
 800bed6:	4632      	movcs	r2, r6
 800bed8:	f7fc ff73 	bl	8008dc2 <memcpy>
 800bedc:	4629      	mov	r1, r5
 800bede:	4638      	mov	r0, r7
 800bee0:	f7fd fdde 	bl	8009aa0 <_free_r>
 800bee4:	e7f1      	b.n	800beca <_realloc_r+0x40>

0800bee6 <__ascii_wctomb>:
 800bee6:	4603      	mov	r3, r0
 800bee8:	4608      	mov	r0, r1
 800beea:	b141      	cbz	r1, 800befe <__ascii_wctomb+0x18>
 800beec:	2aff      	cmp	r2, #255	@ 0xff
 800beee:	d904      	bls.n	800befa <__ascii_wctomb+0x14>
 800bef0:	228a      	movs	r2, #138	@ 0x8a
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	f04f 30ff 	mov.w	r0, #4294967295
 800bef8:	4770      	bx	lr
 800befa:	700a      	strb	r2, [r1, #0]
 800befc:	2001      	movs	r0, #1
 800befe:	4770      	bx	lr

0800bf00 <fiprintf>:
 800bf00:	b40e      	push	{r1, r2, r3}
 800bf02:	b503      	push	{r0, r1, lr}
 800bf04:	4601      	mov	r1, r0
 800bf06:	ab03      	add	r3, sp, #12
 800bf08:	4805      	ldr	r0, [pc, #20]	@ (800bf20 <fiprintf+0x20>)
 800bf0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf0e:	6800      	ldr	r0, [r0, #0]
 800bf10:	9301      	str	r3, [sp, #4]
 800bf12:	f000 f83f 	bl	800bf94 <_vfiprintf_r>
 800bf16:	b002      	add	sp, #8
 800bf18:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf1c:	b003      	add	sp, #12
 800bf1e:	4770      	bx	lr
 800bf20:	2000001c 	.word	0x2000001c

0800bf24 <abort>:
 800bf24:	b508      	push	{r3, lr}
 800bf26:	2006      	movs	r0, #6
 800bf28:	f000 fa08 	bl	800c33c <raise>
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	f7f7 ffe3 	bl	8003ef8 <_exit>

0800bf32 <_malloc_usable_size_r>:
 800bf32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf36:	1f18      	subs	r0, r3, #4
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	bfbc      	itt	lt
 800bf3c:	580b      	ldrlt	r3, [r1, r0]
 800bf3e:	18c0      	addlt	r0, r0, r3
 800bf40:	4770      	bx	lr

0800bf42 <__sfputc_r>:
 800bf42:	6893      	ldr	r3, [r2, #8]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	b410      	push	{r4}
 800bf4a:	6093      	str	r3, [r2, #8]
 800bf4c:	da08      	bge.n	800bf60 <__sfputc_r+0x1e>
 800bf4e:	6994      	ldr	r4, [r2, #24]
 800bf50:	42a3      	cmp	r3, r4
 800bf52:	db01      	blt.n	800bf58 <__sfputc_r+0x16>
 800bf54:	290a      	cmp	r1, #10
 800bf56:	d103      	bne.n	800bf60 <__sfputc_r+0x1e>
 800bf58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf5c:	f000 b932 	b.w	800c1c4 <__swbuf_r>
 800bf60:	6813      	ldr	r3, [r2, #0]
 800bf62:	1c58      	adds	r0, r3, #1
 800bf64:	6010      	str	r0, [r2, #0]
 800bf66:	7019      	strb	r1, [r3, #0]
 800bf68:	4608      	mov	r0, r1
 800bf6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <__sfputs_r>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	4614      	mov	r4, r2
 800bf78:	18d5      	adds	r5, r2, r3
 800bf7a:	42ac      	cmp	r4, r5
 800bf7c:	d101      	bne.n	800bf82 <__sfputs_r+0x12>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	e007      	b.n	800bf92 <__sfputs_r+0x22>
 800bf82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf86:	463a      	mov	r2, r7
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7ff ffda 	bl	800bf42 <__sfputc_r>
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	d1f3      	bne.n	800bf7a <__sfputs_r+0xa>
 800bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf94 <_vfiprintf_r>:
 800bf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf98:	460d      	mov	r5, r1
 800bf9a:	b09d      	sub	sp, #116	@ 0x74
 800bf9c:	4614      	mov	r4, r2
 800bf9e:	4698      	mov	r8, r3
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	b118      	cbz	r0, 800bfac <_vfiprintf_r+0x18>
 800bfa4:	6a03      	ldr	r3, [r0, #32]
 800bfa6:	b90b      	cbnz	r3, 800bfac <_vfiprintf_r+0x18>
 800bfa8:	f7fc fdae 	bl	8008b08 <__sinit>
 800bfac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	d405      	bmi.n	800bfbe <_vfiprintf_r+0x2a>
 800bfb2:	89ab      	ldrh	r3, [r5, #12]
 800bfb4:	059a      	lsls	r2, r3, #22
 800bfb6:	d402      	bmi.n	800bfbe <_vfiprintf_r+0x2a>
 800bfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfba:	f7fc ff00 	bl	8008dbe <__retarget_lock_acquire_recursive>
 800bfbe:	89ab      	ldrh	r3, [r5, #12]
 800bfc0:	071b      	lsls	r3, r3, #28
 800bfc2:	d501      	bpl.n	800bfc8 <_vfiprintf_r+0x34>
 800bfc4:	692b      	ldr	r3, [r5, #16]
 800bfc6:	b99b      	cbnz	r3, 800bff0 <_vfiprintf_r+0x5c>
 800bfc8:	4629      	mov	r1, r5
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f000 f938 	bl	800c240 <__swsetup_r>
 800bfd0:	b170      	cbz	r0, 800bff0 <_vfiprintf_r+0x5c>
 800bfd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfd4:	07dc      	lsls	r4, r3, #31
 800bfd6:	d504      	bpl.n	800bfe2 <_vfiprintf_r+0x4e>
 800bfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfdc:	b01d      	add	sp, #116	@ 0x74
 800bfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe2:	89ab      	ldrh	r3, [r5, #12]
 800bfe4:	0598      	lsls	r0, r3, #22
 800bfe6:	d4f7      	bmi.n	800bfd8 <_vfiprintf_r+0x44>
 800bfe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfea:	f7fc fee9 	bl	8008dc0 <__retarget_lock_release_recursive>
 800bfee:	e7f3      	b.n	800bfd8 <_vfiprintf_r+0x44>
 800bff0:	2300      	movs	r3, #0
 800bff2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bff4:	2320      	movs	r3, #32
 800bff6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bffa:	f8cd 800c 	str.w	r8, [sp, #12]
 800bffe:	2330      	movs	r3, #48	@ 0x30
 800c000:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c1b0 <_vfiprintf_r+0x21c>
 800c004:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c008:	f04f 0901 	mov.w	r9, #1
 800c00c:	4623      	mov	r3, r4
 800c00e:	469a      	mov	sl, r3
 800c010:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c014:	b10a      	cbz	r2, 800c01a <_vfiprintf_r+0x86>
 800c016:	2a25      	cmp	r2, #37	@ 0x25
 800c018:	d1f9      	bne.n	800c00e <_vfiprintf_r+0x7a>
 800c01a:	ebba 0b04 	subs.w	fp, sl, r4
 800c01e:	d00b      	beq.n	800c038 <_vfiprintf_r+0xa4>
 800c020:	465b      	mov	r3, fp
 800c022:	4622      	mov	r2, r4
 800c024:	4629      	mov	r1, r5
 800c026:	4630      	mov	r0, r6
 800c028:	f7ff ffa2 	bl	800bf70 <__sfputs_r>
 800c02c:	3001      	adds	r0, #1
 800c02e:	f000 80a7 	beq.w	800c180 <_vfiprintf_r+0x1ec>
 800c032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c034:	445a      	add	r2, fp
 800c036:	9209      	str	r2, [sp, #36]	@ 0x24
 800c038:	f89a 3000 	ldrb.w	r3, [sl]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f000 809f 	beq.w	800c180 <_vfiprintf_r+0x1ec>
 800c042:	2300      	movs	r3, #0
 800c044:	f04f 32ff 	mov.w	r2, #4294967295
 800c048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c04c:	f10a 0a01 	add.w	sl, sl, #1
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	9307      	str	r3, [sp, #28]
 800c054:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c058:	931a      	str	r3, [sp, #104]	@ 0x68
 800c05a:	4654      	mov	r4, sl
 800c05c:	2205      	movs	r2, #5
 800c05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c062:	4853      	ldr	r0, [pc, #332]	@ (800c1b0 <_vfiprintf_r+0x21c>)
 800c064:	f7f4 f8d4 	bl	8000210 <memchr>
 800c068:	9a04      	ldr	r2, [sp, #16]
 800c06a:	b9d8      	cbnz	r0, 800c0a4 <_vfiprintf_r+0x110>
 800c06c:	06d1      	lsls	r1, r2, #27
 800c06e:	bf44      	itt	mi
 800c070:	2320      	movmi	r3, #32
 800c072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c076:	0713      	lsls	r3, r2, #28
 800c078:	bf44      	itt	mi
 800c07a:	232b      	movmi	r3, #43	@ 0x2b
 800c07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c080:	f89a 3000 	ldrb.w	r3, [sl]
 800c084:	2b2a      	cmp	r3, #42	@ 0x2a
 800c086:	d015      	beq.n	800c0b4 <_vfiprintf_r+0x120>
 800c088:	9a07      	ldr	r2, [sp, #28]
 800c08a:	4654      	mov	r4, sl
 800c08c:	2000      	movs	r0, #0
 800c08e:	f04f 0c0a 	mov.w	ip, #10
 800c092:	4621      	mov	r1, r4
 800c094:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c098:	3b30      	subs	r3, #48	@ 0x30
 800c09a:	2b09      	cmp	r3, #9
 800c09c:	d94b      	bls.n	800c136 <_vfiprintf_r+0x1a2>
 800c09e:	b1b0      	cbz	r0, 800c0ce <_vfiprintf_r+0x13a>
 800c0a0:	9207      	str	r2, [sp, #28]
 800c0a2:	e014      	b.n	800c0ce <_vfiprintf_r+0x13a>
 800c0a4:	eba0 0308 	sub.w	r3, r0, r8
 800c0a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	9304      	str	r3, [sp, #16]
 800c0b0:	46a2      	mov	sl, r4
 800c0b2:	e7d2      	b.n	800c05a <_vfiprintf_r+0xc6>
 800c0b4:	9b03      	ldr	r3, [sp, #12]
 800c0b6:	1d19      	adds	r1, r3, #4
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	9103      	str	r1, [sp, #12]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	bfbb      	ittet	lt
 800c0c0:	425b      	neglt	r3, r3
 800c0c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c0c6:	9307      	strge	r3, [sp, #28]
 800c0c8:	9307      	strlt	r3, [sp, #28]
 800c0ca:	bfb8      	it	lt
 800c0cc:	9204      	strlt	r2, [sp, #16]
 800c0ce:	7823      	ldrb	r3, [r4, #0]
 800c0d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0d2:	d10a      	bne.n	800c0ea <_vfiprintf_r+0x156>
 800c0d4:	7863      	ldrb	r3, [r4, #1]
 800c0d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0d8:	d132      	bne.n	800c140 <_vfiprintf_r+0x1ac>
 800c0da:	9b03      	ldr	r3, [sp, #12]
 800c0dc:	1d1a      	adds	r2, r3, #4
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	9203      	str	r2, [sp, #12]
 800c0e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0e6:	3402      	adds	r4, #2
 800c0e8:	9305      	str	r3, [sp, #20]
 800c0ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c1c0 <_vfiprintf_r+0x22c>
 800c0ee:	7821      	ldrb	r1, [r4, #0]
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	4650      	mov	r0, sl
 800c0f4:	f7f4 f88c 	bl	8000210 <memchr>
 800c0f8:	b138      	cbz	r0, 800c10a <_vfiprintf_r+0x176>
 800c0fa:	9b04      	ldr	r3, [sp, #16]
 800c0fc:	eba0 000a 	sub.w	r0, r0, sl
 800c100:	2240      	movs	r2, #64	@ 0x40
 800c102:	4082      	lsls	r2, r0
 800c104:	4313      	orrs	r3, r2
 800c106:	3401      	adds	r4, #1
 800c108:	9304      	str	r3, [sp, #16]
 800c10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c10e:	4829      	ldr	r0, [pc, #164]	@ (800c1b4 <_vfiprintf_r+0x220>)
 800c110:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c114:	2206      	movs	r2, #6
 800c116:	f7f4 f87b 	bl	8000210 <memchr>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d03f      	beq.n	800c19e <_vfiprintf_r+0x20a>
 800c11e:	4b26      	ldr	r3, [pc, #152]	@ (800c1b8 <_vfiprintf_r+0x224>)
 800c120:	bb1b      	cbnz	r3, 800c16a <_vfiprintf_r+0x1d6>
 800c122:	9b03      	ldr	r3, [sp, #12]
 800c124:	3307      	adds	r3, #7
 800c126:	f023 0307 	bic.w	r3, r3, #7
 800c12a:	3308      	adds	r3, #8
 800c12c:	9303      	str	r3, [sp, #12]
 800c12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c130:	443b      	add	r3, r7
 800c132:	9309      	str	r3, [sp, #36]	@ 0x24
 800c134:	e76a      	b.n	800c00c <_vfiprintf_r+0x78>
 800c136:	fb0c 3202 	mla	r2, ip, r2, r3
 800c13a:	460c      	mov	r4, r1
 800c13c:	2001      	movs	r0, #1
 800c13e:	e7a8      	b.n	800c092 <_vfiprintf_r+0xfe>
 800c140:	2300      	movs	r3, #0
 800c142:	3401      	adds	r4, #1
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	4619      	mov	r1, r3
 800c148:	f04f 0c0a 	mov.w	ip, #10
 800c14c:	4620      	mov	r0, r4
 800c14e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c152:	3a30      	subs	r2, #48	@ 0x30
 800c154:	2a09      	cmp	r2, #9
 800c156:	d903      	bls.n	800c160 <_vfiprintf_r+0x1cc>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d0c6      	beq.n	800c0ea <_vfiprintf_r+0x156>
 800c15c:	9105      	str	r1, [sp, #20]
 800c15e:	e7c4      	b.n	800c0ea <_vfiprintf_r+0x156>
 800c160:	fb0c 2101 	mla	r1, ip, r1, r2
 800c164:	4604      	mov	r4, r0
 800c166:	2301      	movs	r3, #1
 800c168:	e7f0      	b.n	800c14c <_vfiprintf_r+0x1b8>
 800c16a:	ab03      	add	r3, sp, #12
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	462a      	mov	r2, r5
 800c170:	4b12      	ldr	r3, [pc, #72]	@ (800c1bc <_vfiprintf_r+0x228>)
 800c172:	a904      	add	r1, sp, #16
 800c174:	4630      	mov	r0, r6
 800c176:	f7fb fe77 	bl	8007e68 <_printf_float>
 800c17a:	4607      	mov	r7, r0
 800c17c:	1c78      	adds	r0, r7, #1
 800c17e:	d1d6      	bne.n	800c12e <_vfiprintf_r+0x19a>
 800c180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c182:	07d9      	lsls	r1, r3, #31
 800c184:	d405      	bmi.n	800c192 <_vfiprintf_r+0x1fe>
 800c186:	89ab      	ldrh	r3, [r5, #12]
 800c188:	059a      	lsls	r2, r3, #22
 800c18a:	d402      	bmi.n	800c192 <_vfiprintf_r+0x1fe>
 800c18c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c18e:	f7fc fe17 	bl	8008dc0 <__retarget_lock_release_recursive>
 800c192:	89ab      	ldrh	r3, [r5, #12]
 800c194:	065b      	lsls	r3, r3, #25
 800c196:	f53f af1f 	bmi.w	800bfd8 <_vfiprintf_r+0x44>
 800c19a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c19c:	e71e      	b.n	800bfdc <_vfiprintf_r+0x48>
 800c19e:	ab03      	add	r3, sp, #12
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	462a      	mov	r2, r5
 800c1a4:	4b05      	ldr	r3, [pc, #20]	@ (800c1bc <_vfiprintf_r+0x228>)
 800c1a6:	a904      	add	r1, sp, #16
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7fc f8f5 	bl	8008398 <_printf_i>
 800c1ae:	e7e4      	b.n	800c17a <_vfiprintf_r+0x1e6>
 800c1b0:	0800d6b5 	.word	0x0800d6b5
 800c1b4:	0800d6bf 	.word	0x0800d6bf
 800c1b8:	08007e69 	.word	0x08007e69
 800c1bc:	0800bf71 	.word	0x0800bf71
 800c1c0:	0800d6bb 	.word	0x0800d6bb

0800c1c4 <__swbuf_r>:
 800c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c6:	460e      	mov	r6, r1
 800c1c8:	4614      	mov	r4, r2
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	b118      	cbz	r0, 800c1d6 <__swbuf_r+0x12>
 800c1ce:	6a03      	ldr	r3, [r0, #32]
 800c1d0:	b90b      	cbnz	r3, 800c1d6 <__swbuf_r+0x12>
 800c1d2:	f7fc fc99 	bl	8008b08 <__sinit>
 800c1d6:	69a3      	ldr	r3, [r4, #24]
 800c1d8:	60a3      	str	r3, [r4, #8]
 800c1da:	89a3      	ldrh	r3, [r4, #12]
 800c1dc:	071a      	lsls	r2, r3, #28
 800c1de:	d501      	bpl.n	800c1e4 <__swbuf_r+0x20>
 800c1e0:	6923      	ldr	r3, [r4, #16]
 800c1e2:	b943      	cbnz	r3, 800c1f6 <__swbuf_r+0x32>
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	f000 f82a 	bl	800c240 <__swsetup_r>
 800c1ec:	b118      	cbz	r0, 800c1f6 <__swbuf_r+0x32>
 800c1ee:	f04f 37ff 	mov.w	r7, #4294967295
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	6922      	ldr	r2, [r4, #16]
 800c1fa:	1a98      	subs	r0, r3, r2
 800c1fc:	6963      	ldr	r3, [r4, #20]
 800c1fe:	b2f6      	uxtb	r6, r6
 800c200:	4283      	cmp	r3, r0
 800c202:	4637      	mov	r7, r6
 800c204:	dc05      	bgt.n	800c212 <__swbuf_r+0x4e>
 800c206:	4621      	mov	r1, r4
 800c208:	4628      	mov	r0, r5
 800c20a:	f7ff fa53 	bl	800b6b4 <_fflush_r>
 800c20e:	2800      	cmp	r0, #0
 800c210:	d1ed      	bne.n	800c1ee <__swbuf_r+0x2a>
 800c212:	68a3      	ldr	r3, [r4, #8]
 800c214:	3b01      	subs	r3, #1
 800c216:	60a3      	str	r3, [r4, #8]
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	6022      	str	r2, [r4, #0]
 800c21e:	701e      	strb	r6, [r3, #0]
 800c220:	6962      	ldr	r2, [r4, #20]
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	429a      	cmp	r2, r3
 800c226:	d004      	beq.n	800c232 <__swbuf_r+0x6e>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	07db      	lsls	r3, r3, #31
 800c22c:	d5e1      	bpl.n	800c1f2 <__swbuf_r+0x2e>
 800c22e:	2e0a      	cmp	r6, #10
 800c230:	d1df      	bne.n	800c1f2 <__swbuf_r+0x2e>
 800c232:	4621      	mov	r1, r4
 800c234:	4628      	mov	r0, r5
 800c236:	f7ff fa3d 	bl	800b6b4 <_fflush_r>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d0d9      	beq.n	800c1f2 <__swbuf_r+0x2e>
 800c23e:	e7d6      	b.n	800c1ee <__swbuf_r+0x2a>

0800c240 <__swsetup_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4b29      	ldr	r3, [pc, #164]	@ (800c2e8 <__swsetup_r+0xa8>)
 800c244:	4605      	mov	r5, r0
 800c246:	6818      	ldr	r0, [r3, #0]
 800c248:	460c      	mov	r4, r1
 800c24a:	b118      	cbz	r0, 800c254 <__swsetup_r+0x14>
 800c24c:	6a03      	ldr	r3, [r0, #32]
 800c24e:	b90b      	cbnz	r3, 800c254 <__swsetup_r+0x14>
 800c250:	f7fc fc5a 	bl	8008b08 <__sinit>
 800c254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c258:	0719      	lsls	r1, r3, #28
 800c25a:	d422      	bmi.n	800c2a2 <__swsetup_r+0x62>
 800c25c:	06da      	lsls	r2, r3, #27
 800c25e:	d407      	bmi.n	800c270 <__swsetup_r+0x30>
 800c260:	2209      	movs	r2, #9
 800c262:	602a      	str	r2, [r5, #0]
 800c264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295
 800c26e:	e033      	b.n	800c2d8 <__swsetup_r+0x98>
 800c270:	0758      	lsls	r0, r3, #29
 800c272:	d512      	bpl.n	800c29a <__swsetup_r+0x5a>
 800c274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c276:	b141      	cbz	r1, 800c28a <__swsetup_r+0x4a>
 800c278:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c27c:	4299      	cmp	r1, r3
 800c27e:	d002      	beq.n	800c286 <__swsetup_r+0x46>
 800c280:	4628      	mov	r0, r5
 800c282:	f7fd fc0d 	bl	8009aa0 <_free_r>
 800c286:	2300      	movs	r3, #0
 800c288:	6363      	str	r3, [r4, #52]	@ 0x34
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	2300      	movs	r3, #0
 800c294:	6063      	str	r3, [r4, #4]
 800c296:	6923      	ldr	r3, [r4, #16]
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	f043 0308 	orr.w	r3, r3, #8
 800c2a0:	81a3      	strh	r3, [r4, #12]
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	b94b      	cbnz	r3, 800c2ba <__swsetup_r+0x7a>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2b0:	d003      	beq.n	800c2ba <__swsetup_r+0x7a>
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f000 f883 	bl	800c3c0 <__smakebuf_r>
 800c2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2be:	f013 0201 	ands.w	r2, r3, #1
 800c2c2:	d00a      	beq.n	800c2da <__swsetup_r+0x9a>
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	60a2      	str	r2, [r4, #8]
 800c2c8:	6962      	ldr	r2, [r4, #20]
 800c2ca:	4252      	negs	r2, r2
 800c2cc:	61a2      	str	r2, [r4, #24]
 800c2ce:	6922      	ldr	r2, [r4, #16]
 800c2d0:	b942      	cbnz	r2, 800c2e4 <__swsetup_r+0xa4>
 800c2d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2d6:	d1c5      	bne.n	800c264 <__swsetup_r+0x24>
 800c2d8:	bd38      	pop	{r3, r4, r5, pc}
 800c2da:	0799      	lsls	r1, r3, #30
 800c2dc:	bf58      	it	pl
 800c2de:	6962      	ldrpl	r2, [r4, #20]
 800c2e0:	60a2      	str	r2, [r4, #8]
 800c2e2:	e7f4      	b.n	800c2ce <__swsetup_r+0x8e>
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	e7f7      	b.n	800c2d8 <__swsetup_r+0x98>
 800c2e8:	2000001c 	.word	0x2000001c

0800c2ec <_raise_r>:
 800c2ec:	291f      	cmp	r1, #31
 800c2ee:	b538      	push	{r3, r4, r5, lr}
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	d904      	bls.n	800c300 <_raise_r+0x14>
 800c2f6:	2316      	movs	r3, #22
 800c2f8:	6003      	str	r3, [r0, #0]
 800c2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c302:	b112      	cbz	r2, 800c30a <_raise_r+0x1e>
 800c304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c308:	b94b      	cbnz	r3, 800c31e <_raise_r+0x32>
 800c30a:	4628      	mov	r0, r5
 800c30c:	f000 f830 	bl	800c370 <_getpid_r>
 800c310:	4622      	mov	r2, r4
 800c312:	4601      	mov	r1, r0
 800c314:	4628      	mov	r0, r5
 800c316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c31a:	f000 b817 	b.w	800c34c <_kill_r>
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d00a      	beq.n	800c338 <_raise_r+0x4c>
 800c322:	1c59      	adds	r1, r3, #1
 800c324:	d103      	bne.n	800c32e <_raise_r+0x42>
 800c326:	2316      	movs	r3, #22
 800c328:	6003      	str	r3, [r0, #0]
 800c32a:	2001      	movs	r0, #1
 800c32c:	e7e7      	b.n	800c2fe <_raise_r+0x12>
 800c32e:	2100      	movs	r1, #0
 800c330:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c334:	4620      	mov	r0, r4
 800c336:	4798      	blx	r3
 800c338:	2000      	movs	r0, #0
 800c33a:	e7e0      	b.n	800c2fe <_raise_r+0x12>

0800c33c <raise>:
 800c33c:	4b02      	ldr	r3, [pc, #8]	@ (800c348 <raise+0xc>)
 800c33e:	4601      	mov	r1, r0
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	f7ff bfd3 	b.w	800c2ec <_raise_r>
 800c346:	bf00      	nop
 800c348:	2000001c 	.word	0x2000001c

0800c34c <_kill_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d07      	ldr	r5, [pc, #28]	@ (800c36c <_kill_r+0x20>)
 800c350:	2300      	movs	r3, #0
 800c352:	4604      	mov	r4, r0
 800c354:	4608      	mov	r0, r1
 800c356:	4611      	mov	r1, r2
 800c358:	602b      	str	r3, [r5, #0]
 800c35a:	f7f7 fdbd 	bl	8003ed8 <_kill>
 800c35e:	1c43      	adds	r3, r0, #1
 800c360:	d102      	bne.n	800c368 <_kill_r+0x1c>
 800c362:	682b      	ldr	r3, [r5, #0]
 800c364:	b103      	cbz	r3, 800c368 <_kill_r+0x1c>
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	bd38      	pop	{r3, r4, r5, pc}
 800c36a:	bf00      	nop
 800c36c:	200036e0 	.word	0x200036e0

0800c370 <_getpid_r>:
 800c370:	f7f7 bdaa 	b.w	8003ec8 <_getpid>

0800c374 <__swhatbuf_r>:
 800c374:	b570      	push	{r4, r5, r6, lr}
 800c376:	460c      	mov	r4, r1
 800c378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c37c:	2900      	cmp	r1, #0
 800c37e:	b096      	sub	sp, #88	@ 0x58
 800c380:	4615      	mov	r5, r2
 800c382:	461e      	mov	r6, r3
 800c384:	da0d      	bge.n	800c3a2 <__swhatbuf_r+0x2e>
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c38c:	f04f 0100 	mov.w	r1, #0
 800c390:	bf14      	ite	ne
 800c392:	2340      	movne	r3, #64	@ 0x40
 800c394:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c398:	2000      	movs	r0, #0
 800c39a:	6031      	str	r1, [r6, #0]
 800c39c:	602b      	str	r3, [r5, #0]
 800c39e:	b016      	add	sp, #88	@ 0x58
 800c3a0:	bd70      	pop	{r4, r5, r6, pc}
 800c3a2:	466a      	mov	r2, sp
 800c3a4:	f000 f848 	bl	800c438 <_fstat_r>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	dbec      	blt.n	800c386 <__swhatbuf_r+0x12>
 800c3ac:	9901      	ldr	r1, [sp, #4]
 800c3ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3b6:	4259      	negs	r1, r3
 800c3b8:	4159      	adcs	r1, r3
 800c3ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3be:	e7eb      	b.n	800c398 <__swhatbuf_r+0x24>

0800c3c0 <__smakebuf_r>:
 800c3c0:	898b      	ldrh	r3, [r1, #12]
 800c3c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3c4:	079d      	lsls	r5, r3, #30
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460c      	mov	r4, r1
 800c3ca:	d507      	bpl.n	800c3dc <__smakebuf_r+0x1c>
 800c3cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3d0:	6023      	str	r3, [r4, #0]
 800c3d2:	6123      	str	r3, [r4, #16]
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	6163      	str	r3, [r4, #20]
 800c3d8:	b003      	add	sp, #12
 800c3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3dc:	ab01      	add	r3, sp, #4
 800c3de:	466a      	mov	r2, sp
 800c3e0:	f7ff ffc8 	bl	800c374 <__swhatbuf_r>
 800c3e4:	9f00      	ldr	r7, [sp, #0]
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	4639      	mov	r1, r7
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f7fd fbcc 	bl	8009b88 <_malloc_r>
 800c3f0:	b948      	cbnz	r0, 800c406 <__smakebuf_r+0x46>
 800c3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f6:	059a      	lsls	r2, r3, #22
 800c3f8:	d4ee      	bmi.n	800c3d8 <__smakebuf_r+0x18>
 800c3fa:	f023 0303 	bic.w	r3, r3, #3
 800c3fe:	f043 0302 	orr.w	r3, r3, #2
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	e7e2      	b.n	800c3cc <__smakebuf_r+0xc>
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	6020      	str	r0, [r4, #0]
 800c40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	9b01      	ldr	r3, [sp, #4]
 800c412:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c416:	b15b      	cbz	r3, 800c430 <__smakebuf_r+0x70>
 800c418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c41c:	4630      	mov	r0, r6
 800c41e:	f000 f81d 	bl	800c45c <_isatty_r>
 800c422:	b128      	cbz	r0, 800c430 <__smakebuf_r+0x70>
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f023 0303 	bic.w	r3, r3, #3
 800c42a:	f043 0301 	orr.w	r3, r3, #1
 800c42e:	81a3      	strh	r3, [r4, #12]
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	431d      	orrs	r5, r3
 800c434:	81a5      	strh	r5, [r4, #12]
 800c436:	e7cf      	b.n	800c3d8 <__smakebuf_r+0x18>

0800c438 <_fstat_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4d07      	ldr	r5, [pc, #28]	@ (800c458 <_fstat_r+0x20>)
 800c43c:	2300      	movs	r3, #0
 800c43e:	4604      	mov	r4, r0
 800c440:	4608      	mov	r0, r1
 800c442:	4611      	mov	r1, r2
 800c444:	602b      	str	r3, [r5, #0]
 800c446:	f7f7 fda7 	bl	8003f98 <_fstat>
 800c44a:	1c43      	adds	r3, r0, #1
 800c44c:	d102      	bne.n	800c454 <_fstat_r+0x1c>
 800c44e:	682b      	ldr	r3, [r5, #0]
 800c450:	b103      	cbz	r3, 800c454 <_fstat_r+0x1c>
 800c452:	6023      	str	r3, [r4, #0]
 800c454:	bd38      	pop	{r3, r4, r5, pc}
 800c456:	bf00      	nop
 800c458:	200036e0 	.word	0x200036e0

0800c45c <_isatty_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4d06      	ldr	r5, [pc, #24]	@ (800c478 <_isatty_r+0x1c>)
 800c460:	2300      	movs	r3, #0
 800c462:	4604      	mov	r4, r0
 800c464:	4608      	mov	r0, r1
 800c466:	602b      	str	r3, [r5, #0]
 800c468:	f7f7 fda6 	bl	8003fb8 <_isatty>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d102      	bne.n	800c476 <_isatty_r+0x1a>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	b103      	cbz	r3, 800c476 <_isatty_r+0x1a>
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	200036e0 	.word	0x200036e0
 800c47c:	00000000 	.word	0x00000000

0800c480 <sin>:
 800c480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c482:	ec53 2b10 	vmov	r2, r3, d0
 800c486:	4826      	ldr	r0, [pc, #152]	@ (800c520 <sin+0xa0>)
 800c488:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c48c:	4281      	cmp	r1, r0
 800c48e:	d807      	bhi.n	800c4a0 <sin+0x20>
 800c490:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c518 <sin+0x98>
 800c494:	2000      	movs	r0, #0
 800c496:	b005      	add	sp, #20
 800c498:	f85d eb04 	ldr.w	lr, [sp], #4
 800c49c:	f000 b90c 	b.w	800c6b8 <__kernel_sin>
 800c4a0:	4820      	ldr	r0, [pc, #128]	@ (800c524 <sin+0xa4>)
 800c4a2:	4281      	cmp	r1, r0
 800c4a4:	d908      	bls.n	800c4b8 <sin+0x38>
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	f7f3 ff0d 	bl	80002c8 <__aeabi_dsub>
 800c4ae:	ec41 0b10 	vmov	d0, r0, r1
 800c4b2:	b005      	add	sp, #20
 800c4b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4b8:	4668      	mov	r0, sp
 800c4ba:	f000 f9b9 	bl	800c830 <__ieee754_rem_pio2>
 800c4be:	f000 0003 	and.w	r0, r0, #3
 800c4c2:	2801      	cmp	r0, #1
 800c4c4:	d00c      	beq.n	800c4e0 <sin+0x60>
 800c4c6:	2802      	cmp	r0, #2
 800c4c8:	d011      	beq.n	800c4ee <sin+0x6e>
 800c4ca:	b9e8      	cbnz	r0, 800c508 <sin+0x88>
 800c4cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4d0:	ed9d 0b00 	vldr	d0, [sp]
 800c4d4:	2001      	movs	r0, #1
 800c4d6:	f000 f8ef 	bl	800c6b8 <__kernel_sin>
 800c4da:	ec51 0b10 	vmov	r0, r1, d0
 800c4de:	e7e6      	b.n	800c4ae <sin+0x2e>
 800c4e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4e4:	ed9d 0b00 	vldr	d0, [sp]
 800c4e8:	f000 f81e 	bl	800c528 <__kernel_cos>
 800c4ec:	e7f5      	b.n	800c4da <sin+0x5a>
 800c4ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4f2:	ed9d 0b00 	vldr	d0, [sp]
 800c4f6:	2001      	movs	r0, #1
 800c4f8:	f000 f8de 	bl	800c6b8 <__kernel_sin>
 800c4fc:	ec53 2b10 	vmov	r2, r3, d0
 800c500:	4610      	mov	r0, r2
 800c502:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c506:	e7d2      	b.n	800c4ae <sin+0x2e>
 800c508:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c50c:	ed9d 0b00 	vldr	d0, [sp]
 800c510:	f000 f80a 	bl	800c528 <__kernel_cos>
 800c514:	e7f2      	b.n	800c4fc <sin+0x7c>
 800c516:	bf00      	nop
	...
 800c520:	3fe921fb 	.word	0x3fe921fb
 800c524:	7fefffff 	.word	0x7fefffff

0800c528 <__kernel_cos>:
 800c528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	ec57 6b10 	vmov	r6, r7, d0
 800c530:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c534:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c538:	ed8d 1b00 	vstr	d1, [sp]
 800c53c:	d206      	bcs.n	800c54c <__kernel_cos+0x24>
 800c53e:	4630      	mov	r0, r6
 800c540:	4639      	mov	r1, r7
 800c542:	f7f4 fb29 	bl	8000b98 <__aeabi_d2iz>
 800c546:	2800      	cmp	r0, #0
 800c548:	f000 8088 	beq.w	800c65c <__kernel_cos+0x134>
 800c54c:	4632      	mov	r2, r6
 800c54e:	463b      	mov	r3, r7
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	f7f4 f870 	bl	8000638 <__aeabi_dmul>
 800c558:	4b51      	ldr	r3, [pc, #324]	@ (800c6a0 <__kernel_cos+0x178>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	4604      	mov	r4, r0
 800c55e:	460d      	mov	r5, r1
 800c560:	f7f4 f86a 	bl	8000638 <__aeabi_dmul>
 800c564:	a340      	add	r3, pc, #256	@ (adr r3, 800c668 <__kernel_cos+0x140>)
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	4682      	mov	sl, r0
 800c56c:	468b      	mov	fp, r1
 800c56e:	4620      	mov	r0, r4
 800c570:	4629      	mov	r1, r5
 800c572:	f7f4 f861 	bl	8000638 <__aeabi_dmul>
 800c576:	a33e      	add	r3, pc, #248	@ (adr r3, 800c670 <__kernel_cos+0x148>)
 800c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57c:	f7f3 fea6 	bl	80002cc <__adddf3>
 800c580:	4622      	mov	r2, r4
 800c582:	462b      	mov	r3, r5
 800c584:	f7f4 f858 	bl	8000638 <__aeabi_dmul>
 800c588:	a33b      	add	r3, pc, #236	@ (adr r3, 800c678 <__kernel_cos+0x150>)
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f7f3 fe9b 	bl	80002c8 <__aeabi_dsub>
 800c592:	4622      	mov	r2, r4
 800c594:	462b      	mov	r3, r5
 800c596:	f7f4 f84f 	bl	8000638 <__aeabi_dmul>
 800c59a:	a339      	add	r3, pc, #228	@ (adr r3, 800c680 <__kernel_cos+0x158>)
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	f7f3 fe94 	bl	80002cc <__adddf3>
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	462b      	mov	r3, r5
 800c5a8:	f7f4 f846 	bl	8000638 <__aeabi_dmul>
 800c5ac:	a336      	add	r3, pc, #216	@ (adr r3, 800c688 <__kernel_cos+0x160>)
 800c5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b2:	f7f3 fe89 	bl	80002c8 <__aeabi_dsub>
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	462b      	mov	r3, r5
 800c5ba:	f7f4 f83d 	bl	8000638 <__aeabi_dmul>
 800c5be:	a334      	add	r3, pc, #208	@ (adr r3, 800c690 <__kernel_cos+0x168>)
 800c5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c4:	f7f3 fe82 	bl	80002cc <__adddf3>
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	462b      	mov	r3, r5
 800c5cc:	f7f4 f834 	bl	8000638 <__aeabi_dmul>
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	f7f4 f830 	bl	8000638 <__aeabi_dmul>
 800c5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5dc:	4604      	mov	r4, r0
 800c5de:	460d      	mov	r5, r1
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	f7f4 f828 	bl	8000638 <__aeabi_dmul>
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f7f3 fe6a 	bl	80002c8 <__aeabi_dsub>
 800c5f4:	4b2b      	ldr	r3, [pc, #172]	@ (800c6a4 <__kernel_cos+0x17c>)
 800c5f6:	4598      	cmp	r8, r3
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	460f      	mov	r7, r1
 800c5fc:	d810      	bhi.n	800c620 <__kernel_cos+0xf8>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	4650      	mov	r0, sl
 800c604:	4659      	mov	r1, fp
 800c606:	f7f3 fe5f 	bl	80002c8 <__aeabi_dsub>
 800c60a:	460b      	mov	r3, r1
 800c60c:	4926      	ldr	r1, [pc, #152]	@ (800c6a8 <__kernel_cos+0x180>)
 800c60e:	4602      	mov	r2, r0
 800c610:	2000      	movs	r0, #0
 800c612:	f7f3 fe59 	bl	80002c8 <__aeabi_dsub>
 800c616:	ec41 0b10 	vmov	d0, r0, r1
 800c61a:	b003      	add	sp, #12
 800c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c620:	4b22      	ldr	r3, [pc, #136]	@ (800c6ac <__kernel_cos+0x184>)
 800c622:	4921      	ldr	r1, [pc, #132]	@ (800c6a8 <__kernel_cos+0x180>)
 800c624:	4598      	cmp	r8, r3
 800c626:	bf8c      	ite	hi
 800c628:	4d21      	ldrhi	r5, [pc, #132]	@ (800c6b0 <__kernel_cos+0x188>)
 800c62a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c62e:	2400      	movs	r4, #0
 800c630:	4622      	mov	r2, r4
 800c632:	462b      	mov	r3, r5
 800c634:	2000      	movs	r0, #0
 800c636:	f7f3 fe47 	bl	80002c8 <__aeabi_dsub>
 800c63a:	4622      	mov	r2, r4
 800c63c:	4680      	mov	r8, r0
 800c63e:	4689      	mov	r9, r1
 800c640:	462b      	mov	r3, r5
 800c642:	4650      	mov	r0, sl
 800c644:	4659      	mov	r1, fp
 800c646:	f7f3 fe3f 	bl	80002c8 <__aeabi_dsub>
 800c64a:	4632      	mov	r2, r6
 800c64c:	463b      	mov	r3, r7
 800c64e:	f7f3 fe3b 	bl	80002c8 <__aeabi_dsub>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4640      	mov	r0, r8
 800c658:	4649      	mov	r1, r9
 800c65a:	e7da      	b.n	800c612 <__kernel_cos+0xea>
 800c65c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c698 <__kernel_cos+0x170>
 800c660:	e7db      	b.n	800c61a <__kernel_cos+0xf2>
 800c662:	bf00      	nop
 800c664:	f3af 8000 	nop.w
 800c668:	be8838d4 	.word	0xbe8838d4
 800c66c:	bda8fae9 	.word	0xbda8fae9
 800c670:	bdb4b1c4 	.word	0xbdb4b1c4
 800c674:	3e21ee9e 	.word	0x3e21ee9e
 800c678:	809c52ad 	.word	0x809c52ad
 800c67c:	3e927e4f 	.word	0x3e927e4f
 800c680:	19cb1590 	.word	0x19cb1590
 800c684:	3efa01a0 	.word	0x3efa01a0
 800c688:	16c15177 	.word	0x16c15177
 800c68c:	3f56c16c 	.word	0x3f56c16c
 800c690:	5555554c 	.word	0x5555554c
 800c694:	3fa55555 	.word	0x3fa55555
 800c698:	00000000 	.word	0x00000000
 800c69c:	3ff00000 	.word	0x3ff00000
 800c6a0:	3fe00000 	.word	0x3fe00000
 800c6a4:	3fd33332 	.word	0x3fd33332
 800c6a8:	3ff00000 	.word	0x3ff00000
 800c6ac:	3fe90000 	.word	0x3fe90000
 800c6b0:	3fd20000 	.word	0x3fd20000
 800c6b4:	00000000 	.word	0x00000000

0800c6b8 <__kernel_sin>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	ec55 4b10 	vmov	r4, r5, d0
 800c6c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c6c4:	b085      	sub	sp, #20
 800c6c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c6ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c6ce:	4680      	mov	r8, r0
 800c6d0:	d205      	bcs.n	800c6de <__kernel_sin+0x26>
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7f4 fa5f 	bl	8000b98 <__aeabi_d2iz>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d052      	beq.n	800c784 <__kernel_sin+0xcc>
 800c6de:	4622      	mov	r2, r4
 800c6e0:	462b      	mov	r3, r5
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	f7f3 ffa7 	bl	8000638 <__aeabi_dmul>
 800c6ea:	4682      	mov	sl, r0
 800c6ec:	468b      	mov	fp, r1
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	f7f3 ff9f 	bl	8000638 <__aeabi_dmul>
 800c6fa:	a342      	add	r3, pc, #264	@ (adr r3, 800c804 <__kernel_sin+0x14c>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	e9cd 0100 	strd	r0, r1, [sp]
 800c704:	4650      	mov	r0, sl
 800c706:	4659      	mov	r1, fp
 800c708:	f7f3 ff96 	bl	8000638 <__aeabi_dmul>
 800c70c:	a33f      	add	r3, pc, #252	@ (adr r3, 800c80c <__kernel_sin+0x154>)
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f7f3 fdd9 	bl	80002c8 <__aeabi_dsub>
 800c716:	4652      	mov	r2, sl
 800c718:	465b      	mov	r3, fp
 800c71a:	f7f3 ff8d 	bl	8000638 <__aeabi_dmul>
 800c71e:	a33d      	add	r3, pc, #244	@ (adr r3, 800c814 <__kernel_sin+0x15c>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	f7f3 fdd2 	bl	80002cc <__adddf3>
 800c728:	4652      	mov	r2, sl
 800c72a:	465b      	mov	r3, fp
 800c72c:	f7f3 ff84 	bl	8000638 <__aeabi_dmul>
 800c730:	a33a      	add	r3, pc, #232	@ (adr r3, 800c81c <__kernel_sin+0x164>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7f3 fdc7 	bl	80002c8 <__aeabi_dsub>
 800c73a:	4652      	mov	r2, sl
 800c73c:	465b      	mov	r3, fp
 800c73e:	f7f3 ff7b 	bl	8000638 <__aeabi_dmul>
 800c742:	a338      	add	r3, pc, #224	@ (adr r3, 800c824 <__kernel_sin+0x16c>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fdc0 	bl	80002cc <__adddf3>
 800c74c:	4606      	mov	r6, r0
 800c74e:	460f      	mov	r7, r1
 800c750:	f1b8 0f00 	cmp.w	r8, #0
 800c754:	d11b      	bne.n	800c78e <__kernel_sin+0xd6>
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	4650      	mov	r0, sl
 800c75c:	4659      	mov	r1, fp
 800c75e:	f7f3 ff6b 	bl	8000638 <__aeabi_dmul>
 800c762:	a325      	add	r3, pc, #148	@ (adr r3, 800c7f8 <__kernel_sin+0x140>)
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	f7f3 fdae 	bl	80002c8 <__aeabi_dsub>
 800c76c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c770:	f7f3 ff62 	bl	8000638 <__aeabi_dmul>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4620      	mov	r0, r4
 800c77a:	4629      	mov	r1, r5
 800c77c:	f7f3 fda6 	bl	80002cc <__adddf3>
 800c780:	4604      	mov	r4, r0
 800c782:	460d      	mov	r5, r1
 800c784:	ec45 4b10 	vmov	d0, r4, r5
 800c788:	b005      	add	sp, #20
 800c78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c792:	4b1b      	ldr	r3, [pc, #108]	@ (800c800 <__kernel_sin+0x148>)
 800c794:	2200      	movs	r2, #0
 800c796:	f7f3 ff4f 	bl	8000638 <__aeabi_dmul>
 800c79a:	4632      	mov	r2, r6
 800c79c:	4680      	mov	r8, r0
 800c79e:	4689      	mov	r9, r1
 800c7a0:	463b      	mov	r3, r7
 800c7a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7a6:	f7f3 ff47 	bl	8000638 <__aeabi_dmul>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	f7f3 fd89 	bl	80002c8 <__aeabi_dsub>
 800c7b6:	4652      	mov	r2, sl
 800c7b8:	465b      	mov	r3, fp
 800c7ba:	f7f3 ff3d 	bl	8000638 <__aeabi_dmul>
 800c7be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7c2:	f7f3 fd81 	bl	80002c8 <__aeabi_dsub>
 800c7c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c7f8 <__kernel_sin+0x140>)
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	4606      	mov	r6, r0
 800c7ce:	460f      	mov	r7, r1
 800c7d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7d4:	f7f3 ff30 	bl	8000638 <__aeabi_dmul>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	460b      	mov	r3, r1
 800c7dc:	4630      	mov	r0, r6
 800c7de:	4639      	mov	r1, r7
 800c7e0:	f7f3 fd74 	bl	80002cc <__adddf3>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	f7f3 fd6c 	bl	80002c8 <__aeabi_dsub>
 800c7f0:	e7c6      	b.n	800c780 <__kernel_sin+0xc8>
 800c7f2:	bf00      	nop
 800c7f4:	f3af 8000 	nop.w
 800c7f8:	55555549 	.word	0x55555549
 800c7fc:	3fc55555 	.word	0x3fc55555
 800c800:	3fe00000 	.word	0x3fe00000
 800c804:	5acfd57c 	.word	0x5acfd57c
 800c808:	3de5d93a 	.word	0x3de5d93a
 800c80c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c810:	3e5ae5e6 	.word	0x3e5ae5e6
 800c814:	57b1fe7d 	.word	0x57b1fe7d
 800c818:	3ec71de3 	.word	0x3ec71de3
 800c81c:	19c161d5 	.word	0x19c161d5
 800c820:	3f2a01a0 	.word	0x3f2a01a0
 800c824:	1110f8a6 	.word	0x1110f8a6
 800c828:	3f811111 	.word	0x3f811111
 800c82c:	00000000 	.word	0x00000000

0800c830 <__ieee754_rem_pio2>:
 800c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c834:	ec57 6b10 	vmov	r6, r7, d0
 800c838:	4bc5      	ldr	r3, [pc, #788]	@ (800cb50 <__ieee754_rem_pio2+0x320>)
 800c83a:	b08d      	sub	sp, #52	@ 0x34
 800c83c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c840:	4598      	cmp	r8, r3
 800c842:	4604      	mov	r4, r0
 800c844:	9704      	str	r7, [sp, #16]
 800c846:	d807      	bhi.n	800c858 <__ieee754_rem_pio2+0x28>
 800c848:	2200      	movs	r2, #0
 800c84a:	2300      	movs	r3, #0
 800c84c:	ed80 0b00 	vstr	d0, [r0]
 800c850:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c854:	2500      	movs	r5, #0
 800c856:	e028      	b.n	800c8aa <__ieee754_rem_pio2+0x7a>
 800c858:	4bbe      	ldr	r3, [pc, #760]	@ (800cb54 <__ieee754_rem_pio2+0x324>)
 800c85a:	4598      	cmp	r8, r3
 800c85c:	d878      	bhi.n	800c950 <__ieee754_rem_pio2+0x120>
 800c85e:	9b04      	ldr	r3, [sp, #16]
 800c860:	4dbd      	ldr	r5, [pc, #756]	@ (800cb58 <__ieee754_rem_pio2+0x328>)
 800c862:	2b00      	cmp	r3, #0
 800c864:	4630      	mov	r0, r6
 800c866:	a3ac      	add	r3, pc, #688	@ (adr r3, 800cb18 <__ieee754_rem_pio2+0x2e8>)
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	4639      	mov	r1, r7
 800c86e:	dd38      	ble.n	800c8e2 <__ieee754_rem_pio2+0xb2>
 800c870:	f7f3 fd2a 	bl	80002c8 <__aeabi_dsub>
 800c874:	45a8      	cmp	r8, r5
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	d01a      	beq.n	800c8b2 <__ieee754_rem_pio2+0x82>
 800c87c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800cb20 <__ieee754_rem_pio2+0x2f0>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	f7f3 fd21 	bl	80002c8 <__aeabi_dsub>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	4680      	mov	r8, r0
 800c88c:	4689      	mov	r9, r1
 800c88e:	4630      	mov	r0, r6
 800c890:	4639      	mov	r1, r7
 800c892:	f7f3 fd19 	bl	80002c8 <__aeabi_dsub>
 800c896:	a3a2      	add	r3, pc, #648	@ (adr r3, 800cb20 <__ieee754_rem_pio2+0x2f0>)
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	f7f3 fd14 	bl	80002c8 <__aeabi_dsub>
 800c8a0:	e9c4 8900 	strd	r8, r9, [r4]
 800c8a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8a8:	2501      	movs	r5, #1
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	b00d      	add	sp, #52	@ 0x34
 800c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b2:	a39d      	add	r3, pc, #628	@ (adr r3, 800cb28 <__ieee754_rem_pio2+0x2f8>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	f7f3 fd06 	bl	80002c8 <__aeabi_dsub>
 800c8bc:	a39c      	add	r3, pc, #624	@ (adr r3, 800cb30 <__ieee754_rem_pio2+0x300>)
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	460f      	mov	r7, r1
 800c8c6:	f7f3 fcff 	bl	80002c8 <__aeabi_dsub>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4680      	mov	r8, r0
 800c8d0:	4689      	mov	r9, r1
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	f7f3 fcf7 	bl	80002c8 <__aeabi_dsub>
 800c8da:	a395      	add	r3, pc, #596	@ (adr r3, 800cb30 <__ieee754_rem_pio2+0x300>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	e7dc      	b.n	800c89c <__ieee754_rem_pio2+0x6c>
 800c8e2:	f7f3 fcf3 	bl	80002cc <__adddf3>
 800c8e6:	45a8      	cmp	r8, r5
 800c8e8:	4606      	mov	r6, r0
 800c8ea:	460f      	mov	r7, r1
 800c8ec:	d018      	beq.n	800c920 <__ieee754_rem_pio2+0xf0>
 800c8ee:	a38c      	add	r3, pc, #560	@ (adr r3, 800cb20 <__ieee754_rem_pio2+0x2f0>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f7f3 fcea 	bl	80002cc <__adddf3>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4689      	mov	r9, r1
 800c900:	4630      	mov	r0, r6
 800c902:	4639      	mov	r1, r7
 800c904:	f7f3 fce0 	bl	80002c8 <__aeabi_dsub>
 800c908:	a385      	add	r3, pc, #532	@ (adr r3, 800cb20 <__ieee754_rem_pio2+0x2f0>)
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	f7f3 fcdd 	bl	80002cc <__adddf3>
 800c912:	f04f 35ff 	mov.w	r5, #4294967295
 800c916:	e9c4 8900 	strd	r8, r9, [r4]
 800c91a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c91e:	e7c4      	b.n	800c8aa <__ieee754_rem_pio2+0x7a>
 800c920:	a381      	add	r3, pc, #516	@ (adr r3, 800cb28 <__ieee754_rem_pio2+0x2f8>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f7f3 fcd1 	bl	80002cc <__adddf3>
 800c92a:	a381      	add	r3, pc, #516	@ (adr r3, 800cb30 <__ieee754_rem_pio2+0x300>)
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	4606      	mov	r6, r0
 800c932:	460f      	mov	r7, r1
 800c934:	f7f3 fcca 	bl	80002cc <__adddf3>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4680      	mov	r8, r0
 800c93e:	4689      	mov	r9, r1
 800c940:	4630      	mov	r0, r6
 800c942:	4639      	mov	r1, r7
 800c944:	f7f3 fcc0 	bl	80002c8 <__aeabi_dsub>
 800c948:	a379      	add	r3, pc, #484	@ (adr r3, 800cb30 <__ieee754_rem_pio2+0x300>)
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	e7de      	b.n	800c90e <__ieee754_rem_pio2+0xde>
 800c950:	4b82      	ldr	r3, [pc, #520]	@ (800cb5c <__ieee754_rem_pio2+0x32c>)
 800c952:	4598      	cmp	r8, r3
 800c954:	f200 80d1 	bhi.w	800cafa <__ieee754_rem_pio2+0x2ca>
 800c958:	f000 f966 	bl	800cc28 <fabs>
 800c95c:	ec57 6b10 	vmov	r6, r7, d0
 800c960:	a375      	add	r3, pc, #468	@ (adr r3, 800cb38 <__ieee754_rem_pio2+0x308>)
 800c962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c966:	4630      	mov	r0, r6
 800c968:	4639      	mov	r1, r7
 800c96a:	f7f3 fe65 	bl	8000638 <__aeabi_dmul>
 800c96e:	4b7c      	ldr	r3, [pc, #496]	@ (800cb60 <__ieee754_rem_pio2+0x330>)
 800c970:	2200      	movs	r2, #0
 800c972:	f7f3 fcab 	bl	80002cc <__adddf3>
 800c976:	f7f4 f90f 	bl	8000b98 <__aeabi_d2iz>
 800c97a:	4605      	mov	r5, r0
 800c97c:	f7f3 fdf2 	bl	8000564 <__aeabi_i2d>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c988:	a363      	add	r3, pc, #396	@ (adr r3, 800cb18 <__ieee754_rem_pio2+0x2e8>)
 800c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98e:	f7f3 fe53 	bl	8000638 <__aeabi_dmul>
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	4630      	mov	r0, r6
 800c998:	4639      	mov	r1, r7
 800c99a:	f7f3 fc95 	bl	80002c8 <__aeabi_dsub>
 800c99e:	a360      	add	r3, pc, #384	@ (adr r3, 800cb20 <__ieee754_rem_pio2+0x2f0>)
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	4682      	mov	sl, r0
 800c9a6:	468b      	mov	fp, r1
 800c9a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9ac:	f7f3 fe44 	bl	8000638 <__aeabi_dmul>
 800c9b0:	2d1f      	cmp	r5, #31
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	dc0c      	bgt.n	800c9d2 <__ieee754_rem_pio2+0x1a2>
 800c9b8:	4b6a      	ldr	r3, [pc, #424]	@ (800cb64 <__ieee754_rem_pio2+0x334>)
 800c9ba:	1e6a      	subs	r2, r5, #1
 800c9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c0:	4543      	cmp	r3, r8
 800c9c2:	d006      	beq.n	800c9d2 <__ieee754_rem_pio2+0x1a2>
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	463b      	mov	r3, r7
 800c9c8:	4650      	mov	r0, sl
 800c9ca:	4659      	mov	r1, fp
 800c9cc:	f7f3 fc7c 	bl	80002c8 <__aeabi_dsub>
 800c9d0:	e00e      	b.n	800c9f0 <__ieee754_rem_pio2+0x1c0>
 800c9d2:	463b      	mov	r3, r7
 800c9d4:	4632      	mov	r2, r6
 800c9d6:	4650      	mov	r0, sl
 800c9d8:	4659      	mov	r1, fp
 800c9da:	f7f3 fc75 	bl	80002c8 <__aeabi_dsub>
 800c9de:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c9e2:	9305      	str	r3, [sp, #20]
 800c9e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9e8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c9ec:	2b10      	cmp	r3, #16
 800c9ee:	dc02      	bgt.n	800c9f6 <__ieee754_rem_pio2+0x1c6>
 800c9f0:	e9c4 0100 	strd	r0, r1, [r4]
 800c9f4:	e039      	b.n	800ca6a <__ieee754_rem_pio2+0x23a>
 800c9f6:	a34c      	add	r3, pc, #304	@ (adr r3, 800cb28 <__ieee754_rem_pio2+0x2f8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca00:	f7f3 fe1a 	bl	8000638 <__aeabi_dmul>
 800ca04:	4606      	mov	r6, r0
 800ca06:	460f      	mov	r7, r1
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	4659      	mov	r1, fp
 800ca10:	f7f3 fc5a 	bl	80002c8 <__aeabi_dsub>
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	4680      	mov	r8, r0
 800ca1a:	4689      	mov	r9, r1
 800ca1c:	4650      	mov	r0, sl
 800ca1e:	4659      	mov	r1, fp
 800ca20:	f7f3 fc52 	bl	80002c8 <__aeabi_dsub>
 800ca24:	4632      	mov	r2, r6
 800ca26:	463b      	mov	r3, r7
 800ca28:	f7f3 fc4e 	bl	80002c8 <__aeabi_dsub>
 800ca2c:	a340      	add	r3, pc, #256	@ (adr r3, 800cb30 <__ieee754_rem_pio2+0x300>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	4606      	mov	r6, r0
 800ca34:	460f      	mov	r7, r1
 800ca36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca3a:	f7f3 fdfd 	bl	8000638 <__aeabi_dmul>
 800ca3e:	4632      	mov	r2, r6
 800ca40:	463b      	mov	r3, r7
 800ca42:	f7f3 fc41 	bl	80002c8 <__aeabi_dsub>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	460f      	mov	r7, r1
 800ca4e:	4640      	mov	r0, r8
 800ca50:	4649      	mov	r1, r9
 800ca52:	f7f3 fc39 	bl	80002c8 <__aeabi_dsub>
 800ca56:	9a05      	ldr	r2, [sp, #20]
 800ca58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	2b31      	cmp	r3, #49	@ 0x31
 800ca60:	dc20      	bgt.n	800caa4 <__ieee754_rem_pio2+0x274>
 800ca62:	e9c4 0100 	strd	r0, r1, [r4]
 800ca66:	46c2      	mov	sl, r8
 800ca68:	46cb      	mov	fp, r9
 800ca6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ca6e:	4650      	mov	r0, sl
 800ca70:	4642      	mov	r2, r8
 800ca72:	464b      	mov	r3, r9
 800ca74:	4659      	mov	r1, fp
 800ca76:	f7f3 fc27 	bl	80002c8 <__aeabi_dsub>
 800ca7a:	463b      	mov	r3, r7
 800ca7c:	4632      	mov	r2, r6
 800ca7e:	f7f3 fc23 	bl	80002c8 <__aeabi_dsub>
 800ca82:	9b04      	ldr	r3, [sp, #16]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ca8a:	f6bf af0e 	bge.w	800c8aa <__ieee754_rem_pio2+0x7a>
 800ca8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ca92:	6063      	str	r3, [r4, #4]
 800ca94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca98:	f8c4 8000 	str.w	r8, [r4]
 800ca9c:	60a0      	str	r0, [r4, #8]
 800ca9e:	60e3      	str	r3, [r4, #12]
 800caa0:	426d      	negs	r5, r5
 800caa2:	e702      	b.n	800c8aa <__ieee754_rem_pio2+0x7a>
 800caa4:	a326      	add	r3, pc, #152	@ (adr r3, 800cb40 <__ieee754_rem_pio2+0x310>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caae:	f7f3 fdc3 	bl	8000638 <__aeabi_dmul>
 800cab2:	4606      	mov	r6, r0
 800cab4:	460f      	mov	r7, r1
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	4640      	mov	r0, r8
 800cabc:	4649      	mov	r1, r9
 800cabe:	f7f3 fc03 	bl	80002c8 <__aeabi_dsub>
 800cac2:	4602      	mov	r2, r0
 800cac4:	460b      	mov	r3, r1
 800cac6:	4682      	mov	sl, r0
 800cac8:	468b      	mov	fp, r1
 800caca:	4640      	mov	r0, r8
 800cacc:	4649      	mov	r1, r9
 800cace:	f7f3 fbfb 	bl	80002c8 <__aeabi_dsub>
 800cad2:	4632      	mov	r2, r6
 800cad4:	463b      	mov	r3, r7
 800cad6:	f7f3 fbf7 	bl	80002c8 <__aeabi_dsub>
 800cada:	a31b      	add	r3, pc, #108	@ (adr r3, 800cb48 <__ieee754_rem_pio2+0x318>)
 800cadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae0:	4606      	mov	r6, r0
 800cae2:	460f      	mov	r7, r1
 800cae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae8:	f7f3 fda6 	bl	8000638 <__aeabi_dmul>
 800caec:	4632      	mov	r2, r6
 800caee:	463b      	mov	r3, r7
 800caf0:	f7f3 fbea 	bl	80002c8 <__aeabi_dsub>
 800caf4:	4606      	mov	r6, r0
 800caf6:	460f      	mov	r7, r1
 800caf8:	e764      	b.n	800c9c4 <__ieee754_rem_pio2+0x194>
 800cafa:	4b1b      	ldr	r3, [pc, #108]	@ (800cb68 <__ieee754_rem_pio2+0x338>)
 800cafc:	4598      	cmp	r8, r3
 800cafe:	d935      	bls.n	800cb6c <__ieee754_rem_pio2+0x33c>
 800cb00:	4632      	mov	r2, r6
 800cb02:	463b      	mov	r3, r7
 800cb04:	4630      	mov	r0, r6
 800cb06:	4639      	mov	r1, r7
 800cb08:	f7f3 fbde 	bl	80002c8 <__aeabi_dsub>
 800cb0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cb10:	e9c4 0100 	strd	r0, r1, [r4]
 800cb14:	e69e      	b.n	800c854 <__ieee754_rem_pio2+0x24>
 800cb16:	bf00      	nop
 800cb18:	54400000 	.word	0x54400000
 800cb1c:	3ff921fb 	.word	0x3ff921fb
 800cb20:	1a626331 	.word	0x1a626331
 800cb24:	3dd0b461 	.word	0x3dd0b461
 800cb28:	1a600000 	.word	0x1a600000
 800cb2c:	3dd0b461 	.word	0x3dd0b461
 800cb30:	2e037073 	.word	0x2e037073
 800cb34:	3ba3198a 	.word	0x3ba3198a
 800cb38:	6dc9c883 	.word	0x6dc9c883
 800cb3c:	3fe45f30 	.word	0x3fe45f30
 800cb40:	2e000000 	.word	0x2e000000
 800cb44:	3ba3198a 	.word	0x3ba3198a
 800cb48:	252049c1 	.word	0x252049c1
 800cb4c:	397b839a 	.word	0x397b839a
 800cb50:	3fe921fb 	.word	0x3fe921fb
 800cb54:	4002d97b 	.word	0x4002d97b
 800cb58:	3ff921fb 	.word	0x3ff921fb
 800cb5c:	413921fb 	.word	0x413921fb
 800cb60:	3fe00000 	.word	0x3fe00000
 800cb64:	0800d9bc 	.word	0x0800d9bc
 800cb68:	7fefffff 	.word	0x7fefffff
 800cb6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cb70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800cb74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cb78:	4630      	mov	r0, r6
 800cb7a:	460f      	mov	r7, r1
 800cb7c:	f7f4 f80c 	bl	8000b98 <__aeabi_d2iz>
 800cb80:	f7f3 fcf0 	bl	8000564 <__aeabi_i2d>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	4630      	mov	r0, r6
 800cb8a:	4639      	mov	r1, r7
 800cb8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb90:	f7f3 fb9a 	bl	80002c8 <__aeabi_dsub>
 800cb94:	4b22      	ldr	r3, [pc, #136]	@ (800cc20 <__ieee754_rem_pio2+0x3f0>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	f7f3 fd4e 	bl	8000638 <__aeabi_dmul>
 800cb9c:	460f      	mov	r7, r1
 800cb9e:	4606      	mov	r6, r0
 800cba0:	f7f3 fffa 	bl	8000b98 <__aeabi_d2iz>
 800cba4:	f7f3 fcde 	bl	8000564 <__aeabi_i2d>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	460b      	mov	r3, r1
 800cbac:	4630      	mov	r0, r6
 800cbae:	4639      	mov	r1, r7
 800cbb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cbb4:	f7f3 fb88 	bl	80002c8 <__aeabi_dsub>
 800cbb8:	4b19      	ldr	r3, [pc, #100]	@ (800cc20 <__ieee754_rem_pio2+0x3f0>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f7f3 fd3c 	bl	8000638 <__aeabi_dmul>
 800cbc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800cbc4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800cbc8:	f04f 0803 	mov.w	r8, #3
 800cbcc:	2600      	movs	r6, #0
 800cbce:	2700      	movs	r7, #0
 800cbd0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cbd4:	4632      	mov	r2, r6
 800cbd6:	463b      	mov	r3, r7
 800cbd8:	46c2      	mov	sl, r8
 800cbda:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbde:	f7f3 ff93 	bl	8000b08 <__aeabi_dcmpeq>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d1f4      	bne.n	800cbd0 <__ieee754_rem_pio2+0x3a0>
 800cbe6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc24 <__ieee754_rem_pio2+0x3f4>)
 800cbe8:	9301      	str	r3, [sp, #4]
 800cbea:	2302      	movs	r3, #2
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	462a      	mov	r2, r5
 800cbf0:	4653      	mov	r3, sl
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	a806      	add	r0, sp, #24
 800cbf6:	f000 f81f 	bl	800cc38 <__kernel_rem_pio2>
 800cbfa:	9b04      	ldr	r3, [sp, #16]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	4605      	mov	r5, r0
 800cc00:	f6bf ae53 	bge.w	800c8aa <__ieee754_rem_pio2+0x7a>
 800cc04:	e9d4 2100 	ldrd	r2, r1, [r4]
 800cc08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc0c:	e9c4 2300 	strd	r2, r3, [r4]
 800cc10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800cc14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cc1c:	e740      	b.n	800caa0 <__ieee754_rem_pio2+0x270>
 800cc1e:	bf00      	nop
 800cc20:	41700000 	.word	0x41700000
 800cc24:	0800da3c 	.word	0x0800da3c

0800cc28 <fabs>:
 800cc28:	ec51 0b10 	vmov	r0, r1, d0
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cc32:	ec43 2b10 	vmov	d0, r2, r3
 800cc36:	4770      	bx	lr

0800cc38 <__kernel_rem_pio2>:
 800cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	ed2d 8b02 	vpush	{d8}
 800cc40:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800cc44:	f112 0f14 	cmn.w	r2, #20
 800cc48:	9306      	str	r3, [sp, #24]
 800cc4a:	9104      	str	r1, [sp, #16]
 800cc4c:	4bc2      	ldr	r3, [pc, #776]	@ (800cf58 <__kernel_rem_pio2+0x320>)
 800cc4e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800cc50:	9008      	str	r0, [sp, #32]
 800cc52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	9b06      	ldr	r3, [sp, #24]
 800cc5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc5e:	bfa8      	it	ge
 800cc60:	1ed4      	subge	r4, r2, #3
 800cc62:	9305      	str	r3, [sp, #20]
 800cc64:	bfb2      	itee	lt
 800cc66:	2400      	movlt	r4, #0
 800cc68:	2318      	movge	r3, #24
 800cc6a:	fb94 f4f3 	sdivge	r4, r4, r3
 800cc6e:	f06f 0317 	mvn.w	r3, #23
 800cc72:	fb04 3303 	mla	r3, r4, r3, r3
 800cc76:	eb03 0b02 	add.w	fp, r3, r2
 800cc7a:	9b00      	ldr	r3, [sp, #0]
 800cc7c:	9a05      	ldr	r2, [sp, #20]
 800cc7e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800cf48 <__kernel_rem_pio2+0x310>
 800cc82:	eb03 0802 	add.w	r8, r3, r2
 800cc86:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cc88:	1aa7      	subs	r7, r4, r2
 800cc8a:	ae20      	add	r6, sp, #128	@ 0x80
 800cc8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cc90:	2500      	movs	r5, #0
 800cc92:	4545      	cmp	r5, r8
 800cc94:	dd12      	ble.n	800ccbc <__kernel_rem_pio2+0x84>
 800cc96:	9b06      	ldr	r3, [sp, #24]
 800cc98:	aa20      	add	r2, sp, #128	@ 0x80
 800cc9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cc9e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800cca2:	2700      	movs	r7, #0
 800cca4:	9b00      	ldr	r3, [sp, #0]
 800cca6:	429f      	cmp	r7, r3
 800cca8:	dc2e      	bgt.n	800cd08 <__kernel_rem_pio2+0xd0>
 800ccaa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800cf48 <__kernel_rem_pio2+0x310>
 800ccae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccb2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ccb6:	46a8      	mov	r8, r5
 800ccb8:	2600      	movs	r6, #0
 800ccba:	e01b      	b.n	800ccf4 <__kernel_rem_pio2+0xbc>
 800ccbc:	42ef      	cmn	r7, r5
 800ccbe:	d407      	bmi.n	800ccd0 <__kernel_rem_pio2+0x98>
 800ccc0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ccc4:	f7f3 fc4e 	bl	8000564 <__aeabi_i2d>
 800ccc8:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cccc:	3501      	adds	r5, #1
 800ccce:	e7e0      	b.n	800cc92 <__kernel_rem_pio2+0x5a>
 800ccd0:	ec51 0b18 	vmov	r0, r1, d8
 800ccd4:	e7f8      	b.n	800ccc8 <__kernel_rem_pio2+0x90>
 800ccd6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800ccda:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ccde:	f7f3 fcab 	bl	8000638 <__aeabi_dmul>
 800cce2:	4602      	mov	r2, r0
 800cce4:	460b      	mov	r3, r1
 800cce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccea:	f7f3 faef 	bl	80002cc <__adddf3>
 800ccee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccf2:	3601      	adds	r6, #1
 800ccf4:	9b05      	ldr	r3, [sp, #20]
 800ccf6:	429e      	cmp	r6, r3
 800ccf8:	dded      	ble.n	800ccd6 <__kernel_rem_pio2+0x9e>
 800ccfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccfe:	3701      	adds	r7, #1
 800cd00:	ecaa 7b02 	vstmia	sl!, {d7}
 800cd04:	3508      	adds	r5, #8
 800cd06:	e7cd      	b.n	800cca4 <__kernel_rem_pio2+0x6c>
 800cd08:	9b00      	ldr	r3, [sp, #0]
 800cd0a:	f8dd 8000 	ldr.w	r8, [sp]
 800cd0e:	aa0c      	add	r2, sp, #48	@ 0x30
 800cd10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd14:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cd18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cd1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd1e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800cd22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd24:	ab98      	add	r3, sp, #608	@ 0x260
 800cd26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cd2a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800cd2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd32:	ac0c      	add	r4, sp, #48	@ 0x30
 800cd34:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cd36:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800cd3a:	46a1      	mov	r9, r4
 800cd3c:	46c2      	mov	sl, r8
 800cd3e:	f1ba 0f00 	cmp.w	sl, #0
 800cd42:	dc77      	bgt.n	800ce34 <__kernel_rem_pio2+0x1fc>
 800cd44:	4658      	mov	r0, fp
 800cd46:	ed9d 0b02 	vldr	d0, [sp, #8]
 800cd4a:	f000 fac5 	bl	800d2d8 <scalbn>
 800cd4e:	ec57 6b10 	vmov	r6, r7, d0
 800cd52:	2200      	movs	r2, #0
 800cd54:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800cd58:	4630      	mov	r0, r6
 800cd5a:	4639      	mov	r1, r7
 800cd5c:	f7f3 fc6c 	bl	8000638 <__aeabi_dmul>
 800cd60:	ec41 0b10 	vmov	d0, r0, r1
 800cd64:	f000 fb34 	bl	800d3d0 <floor>
 800cd68:	4b7c      	ldr	r3, [pc, #496]	@ (800cf5c <__kernel_rem_pio2+0x324>)
 800cd6a:	ec51 0b10 	vmov	r0, r1, d0
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f7f3 fc62 	bl	8000638 <__aeabi_dmul>
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	4630      	mov	r0, r6
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	f7f3 faa4 	bl	80002c8 <__aeabi_dsub>
 800cd80:	460f      	mov	r7, r1
 800cd82:	4606      	mov	r6, r0
 800cd84:	f7f3 ff08 	bl	8000b98 <__aeabi_d2iz>
 800cd88:	9002      	str	r0, [sp, #8]
 800cd8a:	f7f3 fbeb 	bl	8000564 <__aeabi_i2d>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	4630      	mov	r0, r6
 800cd94:	4639      	mov	r1, r7
 800cd96:	f7f3 fa97 	bl	80002c8 <__aeabi_dsub>
 800cd9a:	f1bb 0f00 	cmp.w	fp, #0
 800cd9e:	4606      	mov	r6, r0
 800cda0:	460f      	mov	r7, r1
 800cda2:	dd6c      	ble.n	800ce7e <__kernel_rem_pio2+0x246>
 800cda4:	f108 31ff 	add.w	r1, r8, #4294967295
 800cda8:	ab0c      	add	r3, sp, #48	@ 0x30
 800cdaa:	9d02      	ldr	r5, [sp, #8]
 800cdac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cdb0:	f1cb 0018 	rsb	r0, fp, #24
 800cdb4:	fa43 f200 	asr.w	r2, r3, r0
 800cdb8:	4415      	add	r5, r2
 800cdba:	4082      	lsls	r2, r0
 800cdbc:	1a9b      	subs	r3, r3, r2
 800cdbe:	aa0c      	add	r2, sp, #48	@ 0x30
 800cdc0:	9502      	str	r5, [sp, #8]
 800cdc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cdc6:	f1cb 0217 	rsb	r2, fp, #23
 800cdca:	fa43 f902 	asr.w	r9, r3, r2
 800cdce:	f1b9 0f00 	cmp.w	r9, #0
 800cdd2:	dd64      	ble.n	800ce9e <__kernel_rem_pio2+0x266>
 800cdd4:	9b02      	ldr	r3, [sp, #8]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	3301      	adds	r3, #1
 800cdda:	9302      	str	r3, [sp, #8]
 800cddc:	4615      	mov	r5, r2
 800cdde:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800cde2:	4590      	cmp	r8, r2
 800cde4:	f300 80a1 	bgt.w	800cf2a <__kernel_rem_pio2+0x2f2>
 800cde8:	f1bb 0f00 	cmp.w	fp, #0
 800cdec:	dd07      	ble.n	800cdfe <__kernel_rem_pio2+0x1c6>
 800cdee:	f1bb 0f01 	cmp.w	fp, #1
 800cdf2:	f000 80c1 	beq.w	800cf78 <__kernel_rem_pio2+0x340>
 800cdf6:	f1bb 0f02 	cmp.w	fp, #2
 800cdfa:	f000 80c8 	beq.w	800cf8e <__kernel_rem_pio2+0x356>
 800cdfe:	f1b9 0f02 	cmp.w	r9, #2
 800ce02:	d14c      	bne.n	800ce9e <__kernel_rem_pio2+0x266>
 800ce04:	4632      	mov	r2, r6
 800ce06:	463b      	mov	r3, r7
 800ce08:	4955      	ldr	r1, [pc, #340]	@ (800cf60 <__kernel_rem_pio2+0x328>)
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	f7f3 fa5c 	bl	80002c8 <__aeabi_dsub>
 800ce10:	4606      	mov	r6, r0
 800ce12:	460f      	mov	r7, r1
 800ce14:	2d00      	cmp	r5, #0
 800ce16:	d042      	beq.n	800ce9e <__kernel_rem_pio2+0x266>
 800ce18:	4658      	mov	r0, fp
 800ce1a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800cf50 <__kernel_rem_pio2+0x318>
 800ce1e:	f000 fa5b 	bl	800d2d8 <scalbn>
 800ce22:	4630      	mov	r0, r6
 800ce24:	4639      	mov	r1, r7
 800ce26:	ec53 2b10 	vmov	r2, r3, d0
 800ce2a:	f7f3 fa4d 	bl	80002c8 <__aeabi_dsub>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	460f      	mov	r7, r1
 800ce32:	e034      	b.n	800ce9e <__kernel_rem_pio2+0x266>
 800ce34:	4b4b      	ldr	r3, [pc, #300]	@ (800cf64 <__kernel_rem_pio2+0x32c>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce3c:	f7f3 fbfc 	bl	8000638 <__aeabi_dmul>
 800ce40:	f7f3 feaa 	bl	8000b98 <__aeabi_d2iz>
 800ce44:	f7f3 fb8e 	bl	8000564 <__aeabi_i2d>
 800ce48:	4b47      	ldr	r3, [pc, #284]	@ (800cf68 <__kernel_rem_pio2+0x330>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	460f      	mov	r7, r1
 800ce50:	f7f3 fbf2 	bl	8000638 <__aeabi_dmul>
 800ce54:	4602      	mov	r2, r0
 800ce56:	460b      	mov	r3, r1
 800ce58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce5c:	f7f3 fa34 	bl	80002c8 <__aeabi_dsub>
 800ce60:	f7f3 fe9a 	bl	8000b98 <__aeabi_d2iz>
 800ce64:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ce68:	f849 0b04 	str.w	r0, [r9], #4
 800ce6c:	4639      	mov	r1, r7
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7f3 fa2c 	bl	80002cc <__adddf3>
 800ce74:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce7c:	e75f      	b.n	800cd3e <__kernel_rem_pio2+0x106>
 800ce7e:	d107      	bne.n	800ce90 <__kernel_rem_pio2+0x258>
 800ce80:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce84:	aa0c      	add	r2, sp, #48	@ 0x30
 800ce86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce8a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ce8e:	e79e      	b.n	800cdce <__kernel_rem_pio2+0x196>
 800ce90:	4b36      	ldr	r3, [pc, #216]	@ (800cf6c <__kernel_rem_pio2+0x334>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	f7f3 fe56 	bl	8000b44 <__aeabi_dcmpge>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d143      	bne.n	800cf24 <__kernel_rem_pio2+0x2ec>
 800ce9c:	4681      	mov	r9, r0
 800ce9e:	2200      	movs	r2, #0
 800cea0:	2300      	movs	r3, #0
 800cea2:	4630      	mov	r0, r6
 800cea4:	4639      	mov	r1, r7
 800cea6:	f7f3 fe2f 	bl	8000b08 <__aeabi_dcmpeq>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	f000 80c1 	beq.w	800d032 <__kernel_rem_pio2+0x3fa>
 800ceb0:	f108 33ff 	add.w	r3, r8, #4294967295
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	9900      	ldr	r1, [sp, #0]
 800ceb8:	428b      	cmp	r3, r1
 800ceba:	da70      	bge.n	800cf9e <__kernel_rem_pio2+0x366>
 800cebc:	2a00      	cmp	r2, #0
 800cebe:	f000 808b 	beq.w	800cfd8 <__kernel_rem_pio2+0x3a0>
 800cec2:	f108 38ff 	add.w	r8, r8, #4294967295
 800cec6:	ab0c      	add	r3, sp, #48	@ 0x30
 800cec8:	f1ab 0b18 	sub.w	fp, fp, #24
 800cecc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d0f6      	beq.n	800cec2 <__kernel_rem_pio2+0x28a>
 800ced4:	4658      	mov	r0, fp
 800ced6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800cf50 <__kernel_rem_pio2+0x318>
 800ceda:	f000 f9fd 	bl	800d2d8 <scalbn>
 800cede:	f108 0301 	add.w	r3, r8, #1
 800cee2:	00da      	lsls	r2, r3, #3
 800cee4:	9205      	str	r2, [sp, #20]
 800cee6:	ec55 4b10 	vmov	r4, r5, d0
 800ceea:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ceec:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800cf64 <__kernel_rem_pio2+0x32c>
 800cef0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800cef4:	4646      	mov	r6, r8
 800cef6:	f04f 0a00 	mov.w	sl, #0
 800cefa:	2e00      	cmp	r6, #0
 800cefc:	f280 80d1 	bge.w	800d0a2 <__kernel_rem_pio2+0x46a>
 800cf00:	4644      	mov	r4, r8
 800cf02:	2c00      	cmp	r4, #0
 800cf04:	f2c0 80ff 	blt.w	800d106 <__kernel_rem_pio2+0x4ce>
 800cf08:	4b19      	ldr	r3, [pc, #100]	@ (800cf70 <__kernel_rem_pio2+0x338>)
 800cf0a:	461f      	mov	r7, r3
 800cf0c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cf0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf12:	9306      	str	r3, [sp, #24]
 800cf14:	f04f 0a00 	mov.w	sl, #0
 800cf18:	f04f 0b00 	mov.w	fp, #0
 800cf1c:	2600      	movs	r6, #0
 800cf1e:	eba8 0504 	sub.w	r5, r8, r4
 800cf22:	e0e4      	b.n	800d0ee <__kernel_rem_pio2+0x4b6>
 800cf24:	f04f 0902 	mov.w	r9, #2
 800cf28:	e754      	b.n	800cdd4 <__kernel_rem_pio2+0x19c>
 800cf2a:	f854 3b04 	ldr.w	r3, [r4], #4
 800cf2e:	bb0d      	cbnz	r5, 800cf74 <__kernel_rem_pio2+0x33c>
 800cf30:	b123      	cbz	r3, 800cf3c <__kernel_rem_pio2+0x304>
 800cf32:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800cf36:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	3201      	adds	r2, #1
 800cf3e:	461d      	mov	r5, r3
 800cf40:	e74f      	b.n	800cde2 <__kernel_rem_pio2+0x1aa>
 800cf42:	bf00      	nop
 800cf44:	f3af 8000 	nop.w
	...
 800cf54:	3ff00000 	.word	0x3ff00000
 800cf58:	0800db88 	.word	0x0800db88
 800cf5c:	40200000 	.word	0x40200000
 800cf60:	3ff00000 	.word	0x3ff00000
 800cf64:	3e700000 	.word	0x3e700000
 800cf68:	41700000 	.word	0x41700000
 800cf6c:	3fe00000 	.word	0x3fe00000
 800cf70:	0800db48 	.word	0x0800db48
 800cf74:	1acb      	subs	r3, r1, r3
 800cf76:	e7de      	b.n	800cf36 <__kernel_rem_pio2+0x2fe>
 800cf78:	f108 32ff 	add.w	r2, r8, #4294967295
 800cf7c:	ab0c      	add	r3, sp, #48	@ 0x30
 800cf7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf82:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cf86:	a90c      	add	r1, sp, #48	@ 0x30
 800cf88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cf8c:	e737      	b.n	800cdfe <__kernel_rem_pio2+0x1c6>
 800cf8e:	f108 32ff 	add.w	r2, r8, #4294967295
 800cf92:	ab0c      	add	r3, sp, #48	@ 0x30
 800cf94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cf9c:	e7f3      	b.n	800cf86 <__kernel_rem_pio2+0x34e>
 800cf9e:	a90c      	add	r1, sp, #48	@ 0x30
 800cfa0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	e785      	b.n	800ceb6 <__kernel_rem_pio2+0x27e>
 800cfaa:	3401      	adds	r4, #1
 800cfac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cfb0:	2a00      	cmp	r2, #0
 800cfb2:	d0fa      	beq.n	800cfaa <__kernel_rem_pio2+0x372>
 800cfb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfb6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cfba:	eb0d 0503 	add.w	r5, sp, r3
 800cfbe:	9b06      	ldr	r3, [sp, #24]
 800cfc0:	aa20      	add	r2, sp, #128	@ 0x80
 800cfc2:	4443      	add	r3, r8
 800cfc4:	f108 0701 	add.w	r7, r8, #1
 800cfc8:	3d98      	subs	r5, #152	@ 0x98
 800cfca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800cfce:	4444      	add	r4, r8
 800cfd0:	42bc      	cmp	r4, r7
 800cfd2:	da04      	bge.n	800cfde <__kernel_rem_pio2+0x3a6>
 800cfd4:	46a0      	mov	r8, r4
 800cfd6:	e6a2      	b.n	800cd1e <__kernel_rem_pio2+0xe6>
 800cfd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfda:	2401      	movs	r4, #1
 800cfdc:	e7e6      	b.n	800cfac <__kernel_rem_pio2+0x374>
 800cfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800cfe4:	f7f3 fabe 	bl	8000564 <__aeabi_i2d>
 800cfe8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800d2a8 <__kernel_rem_pio2+0x670>
 800cfec:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cff0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cff8:	46b2      	mov	sl, r6
 800cffa:	f04f 0800 	mov.w	r8, #0
 800cffe:	9b05      	ldr	r3, [sp, #20]
 800d000:	4598      	cmp	r8, r3
 800d002:	dd05      	ble.n	800d010 <__kernel_rem_pio2+0x3d8>
 800d004:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d008:	3701      	adds	r7, #1
 800d00a:	eca5 7b02 	vstmia	r5!, {d7}
 800d00e:	e7df      	b.n	800cfd0 <__kernel_rem_pio2+0x398>
 800d010:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d014:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d018:	f7f3 fb0e 	bl	8000638 <__aeabi_dmul>
 800d01c:	4602      	mov	r2, r0
 800d01e:	460b      	mov	r3, r1
 800d020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d024:	f7f3 f952 	bl	80002cc <__adddf3>
 800d028:	f108 0801 	add.w	r8, r8, #1
 800d02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d030:	e7e5      	b.n	800cffe <__kernel_rem_pio2+0x3c6>
 800d032:	f1cb 0000 	rsb	r0, fp, #0
 800d036:	ec47 6b10 	vmov	d0, r6, r7
 800d03a:	f000 f94d 	bl	800d2d8 <scalbn>
 800d03e:	ec55 4b10 	vmov	r4, r5, d0
 800d042:	4b9b      	ldr	r3, [pc, #620]	@ (800d2b0 <__kernel_rem_pio2+0x678>)
 800d044:	2200      	movs	r2, #0
 800d046:	4620      	mov	r0, r4
 800d048:	4629      	mov	r1, r5
 800d04a:	f7f3 fd7b 	bl	8000b44 <__aeabi_dcmpge>
 800d04e:	b300      	cbz	r0, 800d092 <__kernel_rem_pio2+0x45a>
 800d050:	4b98      	ldr	r3, [pc, #608]	@ (800d2b4 <__kernel_rem_pio2+0x67c>)
 800d052:	2200      	movs	r2, #0
 800d054:	4620      	mov	r0, r4
 800d056:	4629      	mov	r1, r5
 800d058:	f7f3 faee 	bl	8000638 <__aeabi_dmul>
 800d05c:	f7f3 fd9c 	bl	8000b98 <__aeabi_d2iz>
 800d060:	4606      	mov	r6, r0
 800d062:	f7f3 fa7f 	bl	8000564 <__aeabi_i2d>
 800d066:	4b92      	ldr	r3, [pc, #584]	@ (800d2b0 <__kernel_rem_pio2+0x678>)
 800d068:	2200      	movs	r2, #0
 800d06a:	f7f3 fae5 	bl	8000638 <__aeabi_dmul>
 800d06e:	460b      	mov	r3, r1
 800d070:	4602      	mov	r2, r0
 800d072:	4629      	mov	r1, r5
 800d074:	4620      	mov	r0, r4
 800d076:	f7f3 f927 	bl	80002c8 <__aeabi_dsub>
 800d07a:	f7f3 fd8d 	bl	8000b98 <__aeabi_d2iz>
 800d07e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d080:	f10b 0b18 	add.w	fp, fp, #24
 800d084:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d088:	f108 0801 	add.w	r8, r8, #1
 800d08c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d090:	e720      	b.n	800ced4 <__kernel_rem_pio2+0x29c>
 800d092:	4620      	mov	r0, r4
 800d094:	4629      	mov	r1, r5
 800d096:	f7f3 fd7f 	bl	8000b98 <__aeabi_d2iz>
 800d09a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d09c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d0a0:	e718      	b.n	800ced4 <__kernel_rem_pio2+0x29c>
 800d0a2:	ab0c      	add	r3, sp, #48	@ 0x30
 800d0a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d0a8:	f7f3 fa5c 	bl	8000564 <__aeabi_i2d>
 800d0ac:	4622      	mov	r2, r4
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	f7f3 fac2 	bl	8000638 <__aeabi_dmul>
 800d0b4:	4652      	mov	r2, sl
 800d0b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d0ba:	465b      	mov	r3, fp
 800d0bc:	4620      	mov	r0, r4
 800d0be:	4629      	mov	r1, r5
 800d0c0:	f7f3 faba 	bl	8000638 <__aeabi_dmul>
 800d0c4:	3e01      	subs	r6, #1
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	460d      	mov	r5, r1
 800d0ca:	e716      	b.n	800cefa <__kernel_rem_pio2+0x2c2>
 800d0cc:	9906      	ldr	r1, [sp, #24]
 800d0ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d0d2:	9106      	str	r1, [sp, #24]
 800d0d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d0d8:	f7f3 faae 	bl	8000638 <__aeabi_dmul>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	4650      	mov	r0, sl
 800d0e2:	4659      	mov	r1, fp
 800d0e4:	f7f3 f8f2 	bl	80002cc <__adddf3>
 800d0e8:	3601      	adds	r6, #1
 800d0ea:	4682      	mov	sl, r0
 800d0ec:	468b      	mov	fp, r1
 800d0ee:	9b00      	ldr	r3, [sp, #0]
 800d0f0:	429e      	cmp	r6, r3
 800d0f2:	dc01      	bgt.n	800d0f8 <__kernel_rem_pio2+0x4c0>
 800d0f4:	42ae      	cmp	r6, r5
 800d0f6:	dde9      	ble.n	800d0cc <__kernel_rem_pio2+0x494>
 800d0f8:	ab48      	add	r3, sp, #288	@ 0x120
 800d0fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d0fe:	e9c5 ab00 	strd	sl, fp, [r5]
 800d102:	3c01      	subs	r4, #1
 800d104:	e6fd      	b.n	800cf02 <__kernel_rem_pio2+0x2ca>
 800d106:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d108:	2b02      	cmp	r3, #2
 800d10a:	dc0b      	bgt.n	800d124 <__kernel_rem_pio2+0x4ec>
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	dc35      	bgt.n	800d17c <__kernel_rem_pio2+0x544>
 800d110:	d059      	beq.n	800d1c6 <__kernel_rem_pio2+0x58e>
 800d112:	9b02      	ldr	r3, [sp, #8]
 800d114:	f003 0007 	and.w	r0, r3, #7
 800d118:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d11c:	ecbd 8b02 	vpop	{d8}
 800d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d124:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d126:	2b03      	cmp	r3, #3
 800d128:	d1f3      	bne.n	800d112 <__kernel_rem_pio2+0x4da>
 800d12a:	9b05      	ldr	r3, [sp, #20]
 800d12c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d130:	eb0d 0403 	add.w	r4, sp, r3
 800d134:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d138:	4625      	mov	r5, r4
 800d13a:	46c2      	mov	sl, r8
 800d13c:	f1ba 0f00 	cmp.w	sl, #0
 800d140:	dc69      	bgt.n	800d216 <__kernel_rem_pio2+0x5de>
 800d142:	4645      	mov	r5, r8
 800d144:	2d01      	cmp	r5, #1
 800d146:	f300 8087 	bgt.w	800d258 <__kernel_rem_pio2+0x620>
 800d14a:	9c05      	ldr	r4, [sp, #20]
 800d14c:	ab48      	add	r3, sp, #288	@ 0x120
 800d14e:	441c      	add	r4, r3
 800d150:	2000      	movs	r0, #0
 800d152:	2100      	movs	r1, #0
 800d154:	f1b8 0f01 	cmp.w	r8, #1
 800d158:	f300 809c 	bgt.w	800d294 <__kernel_rem_pio2+0x65c>
 800d15c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800d160:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800d164:	f1b9 0f00 	cmp.w	r9, #0
 800d168:	f040 80a6 	bne.w	800d2b8 <__kernel_rem_pio2+0x680>
 800d16c:	9b04      	ldr	r3, [sp, #16]
 800d16e:	e9c3 5600 	strd	r5, r6, [r3]
 800d172:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d176:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d17a:	e7ca      	b.n	800d112 <__kernel_rem_pio2+0x4da>
 800d17c:	9d05      	ldr	r5, [sp, #20]
 800d17e:	ab48      	add	r3, sp, #288	@ 0x120
 800d180:	441d      	add	r5, r3
 800d182:	4644      	mov	r4, r8
 800d184:	2000      	movs	r0, #0
 800d186:	2100      	movs	r1, #0
 800d188:	2c00      	cmp	r4, #0
 800d18a:	da35      	bge.n	800d1f8 <__kernel_rem_pio2+0x5c0>
 800d18c:	f1b9 0f00 	cmp.w	r9, #0
 800d190:	d038      	beq.n	800d204 <__kernel_rem_pio2+0x5cc>
 800d192:	4602      	mov	r2, r0
 800d194:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d198:	9c04      	ldr	r4, [sp, #16]
 800d19a:	e9c4 2300 	strd	r2, r3, [r4]
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d1a6:	f7f3 f88f 	bl	80002c8 <__aeabi_dsub>
 800d1aa:	ad4a      	add	r5, sp, #296	@ 0x128
 800d1ac:	2401      	movs	r4, #1
 800d1ae:	45a0      	cmp	r8, r4
 800d1b0:	da2b      	bge.n	800d20a <__kernel_rem_pio2+0x5d2>
 800d1b2:	f1b9 0f00 	cmp.w	r9, #0
 800d1b6:	d002      	beq.n	800d1be <__kernel_rem_pio2+0x586>
 800d1b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1bc:	4619      	mov	r1, r3
 800d1be:	9b04      	ldr	r3, [sp, #16]
 800d1c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d1c4:	e7a5      	b.n	800d112 <__kernel_rem_pio2+0x4da>
 800d1c6:	9c05      	ldr	r4, [sp, #20]
 800d1c8:	ab48      	add	r3, sp, #288	@ 0x120
 800d1ca:	441c      	add	r4, r3
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	f1b8 0f00 	cmp.w	r8, #0
 800d1d4:	da09      	bge.n	800d1ea <__kernel_rem_pio2+0x5b2>
 800d1d6:	f1b9 0f00 	cmp.w	r9, #0
 800d1da:	d002      	beq.n	800d1e2 <__kernel_rem_pio2+0x5aa>
 800d1dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	9b04      	ldr	r3, [sp, #16]
 800d1e4:	e9c3 0100 	strd	r0, r1, [r3]
 800d1e8:	e793      	b.n	800d112 <__kernel_rem_pio2+0x4da>
 800d1ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d1ee:	f7f3 f86d 	bl	80002cc <__adddf3>
 800d1f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1f6:	e7eb      	b.n	800d1d0 <__kernel_rem_pio2+0x598>
 800d1f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d1fc:	f7f3 f866 	bl	80002cc <__adddf3>
 800d200:	3c01      	subs	r4, #1
 800d202:	e7c1      	b.n	800d188 <__kernel_rem_pio2+0x550>
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	e7c6      	b.n	800d198 <__kernel_rem_pio2+0x560>
 800d20a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d20e:	f7f3 f85d 	bl	80002cc <__adddf3>
 800d212:	3401      	adds	r4, #1
 800d214:	e7cb      	b.n	800d1ae <__kernel_rem_pio2+0x576>
 800d216:	ed35 7b02 	vldmdb	r5!, {d7}
 800d21a:	ed8d 7b00 	vstr	d7, [sp]
 800d21e:	ed95 7b02 	vldr	d7, [r5, #8]
 800d222:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d226:	ec53 2b17 	vmov	r2, r3, d7
 800d22a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d22e:	f7f3 f84d 	bl	80002cc <__adddf3>
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
 800d236:	4606      	mov	r6, r0
 800d238:	460f      	mov	r7, r1
 800d23a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d23e:	f7f3 f843 	bl	80002c8 <__aeabi_dsub>
 800d242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d246:	f7f3 f841 	bl	80002cc <__adddf3>
 800d24a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d24e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d252:	e9c5 6700 	strd	r6, r7, [r5]
 800d256:	e771      	b.n	800d13c <__kernel_rem_pio2+0x504>
 800d258:	ed34 7b02 	vldmdb	r4!, {d7}
 800d25c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d260:	ec51 0b17 	vmov	r0, r1, d7
 800d264:	4652      	mov	r2, sl
 800d266:	465b      	mov	r3, fp
 800d268:	ed8d 7b00 	vstr	d7, [sp]
 800d26c:	f7f3 f82e 	bl	80002cc <__adddf3>
 800d270:	4602      	mov	r2, r0
 800d272:	460b      	mov	r3, r1
 800d274:	4606      	mov	r6, r0
 800d276:	460f      	mov	r7, r1
 800d278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d27c:	f7f3 f824 	bl	80002c8 <__aeabi_dsub>
 800d280:	4652      	mov	r2, sl
 800d282:	465b      	mov	r3, fp
 800d284:	f7f3 f822 	bl	80002cc <__adddf3>
 800d288:	3d01      	subs	r5, #1
 800d28a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d28e:	e9c4 6700 	strd	r6, r7, [r4]
 800d292:	e757      	b.n	800d144 <__kernel_rem_pio2+0x50c>
 800d294:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d298:	f7f3 f818 	bl	80002cc <__adddf3>
 800d29c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2a0:	e758      	b.n	800d154 <__kernel_rem_pio2+0x51c>
 800d2a2:	bf00      	nop
 800d2a4:	f3af 8000 	nop.w
	...
 800d2b0:	41700000 	.word	0x41700000
 800d2b4:	3e700000 	.word	0x3e700000
 800d2b8:	9b04      	ldr	r3, [sp, #16]
 800d2ba:	9a04      	ldr	r2, [sp, #16]
 800d2bc:	601d      	str	r5, [r3, #0]
 800d2be:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800d2c2:	605c      	str	r4, [r3, #4]
 800d2c4:	609f      	str	r7, [r3, #8]
 800d2c6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800d2ca:	60d3      	str	r3, [r2, #12]
 800d2cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d2d0:	6110      	str	r0, [r2, #16]
 800d2d2:	6153      	str	r3, [r2, #20]
 800d2d4:	e71d      	b.n	800d112 <__kernel_rem_pio2+0x4da>
 800d2d6:	bf00      	nop

0800d2d8 <scalbn>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	ec55 4b10 	vmov	r4, r5, d0
 800d2de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	b991      	cbnz	r1, 800d30e <scalbn+0x36>
 800d2e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d2ec:	4323      	orrs	r3, r4
 800d2ee:	d03b      	beq.n	800d368 <scalbn+0x90>
 800d2f0:	4b33      	ldr	r3, [pc, #204]	@ (800d3c0 <scalbn+0xe8>)
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f7f3 f99e 	bl	8000638 <__aeabi_dmul>
 800d2fc:	4b31      	ldr	r3, [pc, #196]	@ (800d3c4 <scalbn+0xec>)
 800d2fe:	429e      	cmp	r6, r3
 800d300:	4604      	mov	r4, r0
 800d302:	460d      	mov	r5, r1
 800d304:	da0f      	bge.n	800d326 <scalbn+0x4e>
 800d306:	a326      	add	r3, pc, #152	@ (adr r3, 800d3a0 <scalbn+0xc8>)
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	e01e      	b.n	800d34c <scalbn+0x74>
 800d30e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d312:	4291      	cmp	r1, r2
 800d314:	d10b      	bne.n	800d32e <scalbn+0x56>
 800d316:	4622      	mov	r2, r4
 800d318:	4620      	mov	r0, r4
 800d31a:	4629      	mov	r1, r5
 800d31c:	f7f2 ffd6 	bl	80002cc <__adddf3>
 800d320:	4604      	mov	r4, r0
 800d322:	460d      	mov	r5, r1
 800d324:	e020      	b.n	800d368 <scalbn+0x90>
 800d326:	460b      	mov	r3, r1
 800d328:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d32c:	3936      	subs	r1, #54	@ 0x36
 800d32e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d332:	4296      	cmp	r6, r2
 800d334:	dd0d      	ble.n	800d352 <scalbn+0x7a>
 800d336:	2d00      	cmp	r5, #0
 800d338:	a11b      	add	r1, pc, #108	@ (adr r1, 800d3a8 <scalbn+0xd0>)
 800d33a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d33e:	da02      	bge.n	800d346 <scalbn+0x6e>
 800d340:	a11b      	add	r1, pc, #108	@ (adr r1, 800d3b0 <scalbn+0xd8>)
 800d342:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d346:	a318      	add	r3, pc, #96	@ (adr r3, 800d3a8 <scalbn+0xd0>)
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	f7f3 f974 	bl	8000638 <__aeabi_dmul>
 800d350:	e7e6      	b.n	800d320 <scalbn+0x48>
 800d352:	1872      	adds	r2, r6, r1
 800d354:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d358:	428a      	cmp	r2, r1
 800d35a:	dcec      	bgt.n	800d336 <scalbn+0x5e>
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	dd06      	ble.n	800d36e <scalbn+0x96>
 800d360:	f36f 531e 	bfc	r3, #20, #11
 800d364:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d368:	ec45 4b10 	vmov	d0, r4, r5
 800d36c:	bd70      	pop	{r4, r5, r6, pc}
 800d36e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d372:	da08      	bge.n	800d386 <scalbn+0xae>
 800d374:	2d00      	cmp	r5, #0
 800d376:	a10a      	add	r1, pc, #40	@ (adr r1, 800d3a0 <scalbn+0xc8>)
 800d378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d37c:	dac3      	bge.n	800d306 <scalbn+0x2e>
 800d37e:	a10e      	add	r1, pc, #56	@ (adr r1, 800d3b8 <scalbn+0xe0>)
 800d380:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d384:	e7bf      	b.n	800d306 <scalbn+0x2e>
 800d386:	3236      	adds	r2, #54	@ 0x36
 800d388:	f36f 531e 	bfc	r3, #20, #11
 800d38c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d390:	4620      	mov	r0, r4
 800d392:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c8 <scalbn+0xf0>)
 800d394:	4629      	mov	r1, r5
 800d396:	2200      	movs	r2, #0
 800d398:	e7d8      	b.n	800d34c <scalbn+0x74>
 800d39a:	bf00      	nop
 800d39c:	f3af 8000 	nop.w
 800d3a0:	c2f8f359 	.word	0xc2f8f359
 800d3a4:	01a56e1f 	.word	0x01a56e1f
 800d3a8:	8800759c 	.word	0x8800759c
 800d3ac:	7e37e43c 	.word	0x7e37e43c
 800d3b0:	8800759c 	.word	0x8800759c
 800d3b4:	fe37e43c 	.word	0xfe37e43c
 800d3b8:	c2f8f359 	.word	0xc2f8f359
 800d3bc:	81a56e1f 	.word	0x81a56e1f
 800d3c0:	43500000 	.word	0x43500000
 800d3c4:	ffff3cb0 	.word	0xffff3cb0
 800d3c8:	3c900000 	.word	0x3c900000
 800d3cc:	00000000 	.word	0x00000000

0800d3d0 <floor>:
 800d3d0:	ec51 0b10 	vmov	r0, r1, d0
 800d3d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3dc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d3e0:	2e13      	cmp	r6, #19
 800d3e2:	460c      	mov	r4, r1
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	4680      	mov	r8, r0
 800d3e8:	dc34      	bgt.n	800d454 <floor+0x84>
 800d3ea:	2e00      	cmp	r6, #0
 800d3ec:	da17      	bge.n	800d41e <floor+0x4e>
 800d3ee:	a332      	add	r3, pc, #200	@ (adr r3, 800d4b8 <floor+0xe8>)
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	f7f2 ff6a 	bl	80002cc <__adddf3>
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f7f3 fbac 	bl	8000b58 <__aeabi_dcmpgt>
 800d400:	b150      	cbz	r0, 800d418 <floor+0x48>
 800d402:	2c00      	cmp	r4, #0
 800d404:	da55      	bge.n	800d4b2 <floor+0xe2>
 800d406:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d40a:	432c      	orrs	r4, r5
 800d40c:	2500      	movs	r5, #0
 800d40e:	42ac      	cmp	r4, r5
 800d410:	4c2b      	ldr	r4, [pc, #172]	@ (800d4c0 <floor+0xf0>)
 800d412:	bf08      	it	eq
 800d414:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d418:	4621      	mov	r1, r4
 800d41a:	4628      	mov	r0, r5
 800d41c:	e023      	b.n	800d466 <floor+0x96>
 800d41e:	4f29      	ldr	r7, [pc, #164]	@ (800d4c4 <floor+0xf4>)
 800d420:	4137      	asrs	r7, r6
 800d422:	ea01 0307 	and.w	r3, r1, r7
 800d426:	4303      	orrs	r3, r0
 800d428:	d01d      	beq.n	800d466 <floor+0x96>
 800d42a:	a323      	add	r3, pc, #140	@ (adr r3, 800d4b8 <floor+0xe8>)
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	f7f2 ff4c 	bl	80002cc <__adddf3>
 800d434:	2200      	movs	r2, #0
 800d436:	2300      	movs	r3, #0
 800d438:	f7f3 fb8e 	bl	8000b58 <__aeabi_dcmpgt>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d0eb      	beq.n	800d418 <floor+0x48>
 800d440:	2c00      	cmp	r4, #0
 800d442:	bfbe      	ittt	lt
 800d444:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d448:	4133      	asrlt	r3, r6
 800d44a:	18e4      	addlt	r4, r4, r3
 800d44c:	ea24 0407 	bic.w	r4, r4, r7
 800d450:	2500      	movs	r5, #0
 800d452:	e7e1      	b.n	800d418 <floor+0x48>
 800d454:	2e33      	cmp	r6, #51	@ 0x33
 800d456:	dd0a      	ble.n	800d46e <floor+0x9e>
 800d458:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d45c:	d103      	bne.n	800d466 <floor+0x96>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	f7f2 ff33 	bl	80002cc <__adddf3>
 800d466:	ec41 0b10 	vmov	d0, r0, r1
 800d46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d46e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d472:	f04f 37ff 	mov.w	r7, #4294967295
 800d476:	40df      	lsrs	r7, r3
 800d478:	4207      	tst	r7, r0
 800d47a:	d0f4      	beq.n	800d466 <floor+0x96>
 800d47c:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4b8 <floor+0xe8>)
 800d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d482:	f7f2 ff23 	bl	80002cc <__adddf3>
 800d486:	2200      	movs	r2, #0
 800d488:	2300      	movs	r3, #0
 800d48a:	f7f3 fb65 	bl	8000b58 <__aeabi_dcmpgt>
 800d48e:	2800      	cmp	r0, #0
 800d490:	d0c2      	beq.n	800d418 <floor+0x48>
 800d492:	2c00      	cmp	r4, #0
 800d494:	da0a      	bge.n	800d4ac <floor+0xdc>
 800d496:	2e14      	cmp	r6, #20
 800d498:	d101      	bne.n	800d49e <floor+0xce>
 800d49a:	3401      	adds	r4, #1
 800d49c:	e006      	b.n	800d4ac <floor+0xdc>
 800d49e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	40b3      	lsls	r3, r6
 800d4a6:	441d      	add	r5, r3
 800d4a8:	4545      	cmp	r5, r8
 800d4aa:	d3f6      	bcc.n	800d49a <floor+0xca>
 800d4ac:	ea25 0507 	bic.w	r5, r5, r7
 800d4b0:	e7b2      	b.n	800d418 <floor+0x48>
 800d4b2:	2500      	movs	r5, #0
 800d4b4:	462c      	mov	r4, r5
 800d4b6:	e7af      	b.n	800d418 <floor+0x48>
 800d4b8:	8800759c 	.word	0x8800759c
 800d4bc:	7e37e43c 	.word	0x7e37e43c
 800d4c0:	bff00000 	.word	0xbff00000
 800d4c4:	000fffff 	.word	0x000fffff

0800d4c8 <_init>:
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	bf00      	nop
 800d4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ce:	bc08      	pop	{r3}
 800d4d0:	469e      	mov	lr, r3
 800d4d2:	4770      	bx	lr

0800d4d4 <_fini>:
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	bf00      	nop
 800d4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4da:	bc08      	pop	{r3}
 800d4dc:	469e      	mov	lr, r3
 800d4de:	4770      	bx	lr
