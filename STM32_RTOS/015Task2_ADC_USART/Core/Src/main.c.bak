///* USER CODE BEGIN Header */
///**
// ******************************************************************************
// * @file           : main.c
// * @brief          : Main program body
// ******************************************************************************
// * @attention
// *
// * Copyright (c) 2025 STMicroelectronics.
// * All rights reserved.
// *
// * This software is licensed under terms that can be found in the LICENSE file
// * in the root directory of this software component.
// * If no LICENSE file comes with this software, it is provided AS-IS.
// *
// ******************************************************************************
// */
///* USER CODE END Header */
///* Includes ------------------------------------------------------------------*/
//#include "main.h"
//#include "adc.h"
//#include "dma.h"
//#include "usart.h"
//#include "gpio.h"
//
///* Private includes ----------------------------------------------------------*/
///* USER CODE BEGIN Includes */
//
//#include <stdlib.h>
//#include <stdio.h>
//
//#include "FreeRTOS.h"
//#include "task.h"
///* USER CODE END Includes */
//
///* Private typedef -----------------------------------------------------------*/
///* USER CODE BEGIN PTD */
//
///* USER CODE END PTD */
//
///* Private define ------------------------------------------------------------*/
///* USER CODE BEGIN PD */
//
//#define DWT_CTRL        (*(volatile uint32_t*)0XE0001000)
//
///* USER CODE END PD */
//
///* Private macro -------------------------------------------------------------*/
///* USER CODE BEGIN PM */
//
///* USER CODE END PM */
//
///* Private variables ---------------------------------------------------------*/
//
///* USER CODE BEGIN PV */
//
///* USER CODE END PV */
//
///* Private function prototypes -----------------------------------------------*/
//void SystemClock_Config(void);
///* USER CODE BEGIN PFP */
//
//static void LED_Green_Handler(void *parameters);
//static void LED_Orange_Handler(void *parameters);
//static void LED_Red_Handler(void *parameters);
//
//extern void SEGGER_UART_init(uint32_t);
//
///* USER CODE END PFP */
//
///* Private user code ---------------------------------------------------------*/
///* USER CODE BEGIN 0 */
//
///* USER CODE END 0 */
//
///**
//  * @brief  The application entry point.
//  * @retval int
//  */
//int main(void)
//{
//
//  /* USER CODE BEGIN 1 */
//    TaskHandle_t task1_handle;
//    TaskHandle_t task2_handle;
//    TaskHandle_t task3_handle;
//
//    BaseType_t status;
//
//  /* USER CODE END 1 */
//
//  /* MCU Configuration--------------------------------------------------------*/
//
//  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
//  HAL_Init();
//
//  /* USER CODE BEGIN Init */
//
//  /* USER CODE END Init */
//
//  /* Configure the system clock */
//  SystemClock_Config();
//
//  /* USER CODE BEGIN SysInit */
//
//  /* USER CODE END SysInit */
//
//  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_DMA_Init();
//  MX_USART2_UART_Init();
//  MX_ADC1_Init();
//  MX_ADC2_Init();
//  MX_USART1_UART_Init();
//  /* USER CODE BEGIN 2 */
//
//    SEGGER_UART_init(500000);
//    // Enable the CYCCNT counter
//    DWT_CTRL |= (1 << 0);
//
//    SEGGER_SYSVIEW_Conf();
//
//    status = xTaskCreate(LED_Green_Handler, "LED_Green_Task", 200, NULL, 2, &task1_handle);
//    configASSERT(status == pdPASS);
//
//    status = xTaskCreate(LED_Orange_Handler, "LED_Orange_Task", 200, NULL, 2, &task2_handle);
//    configASSERT(status == pdPASS);
//
//    status = xTaskCreate(LED_Red_Handler, "LED_Red_Task", 200, NULL, 2, &task3_handle);
//    configASSERT(status == pdPASS);
//
//    vTaskStartScheduler();
//
//  /* USER CODE END 2 */
//
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
//    while (1) {
//    /* USER CODE END WHILE */
//
//    /* USER CODE BEGIN 3 */
//    }
//  /* USER CODE END 3 */
//}
//
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
//void SystemClock_Config(void)
//{
//  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
//  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
//
//  /** Configure the main internal regulator output voltage
//  */
//  __HAL_RCC_PWR_CLK_ENABLE();
//  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
//
//  /** Initializes the RCC Oscillators according to the specified parameters
//  * in the RCC_OscInitTypeDef structure.
//  */
//  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
//  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
//  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
//  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
//  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
//  RCC_OscInitStruct.PLL.PLLM = 8;
//  RCC_OscInitStruct.PLL.PLLN = 180;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//  RCC_OscInitStruct.PLL.PLLQ = 2;
//  RCC_OscInitStruct.PLL.PLLR = 2;
//  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
//  {
//    Error_Handler();
//  }
//
//  /** Activate the Over-Drive mode
//  */
//  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
//  {
//    Error_Handler();
//  }
//
//  /** Initializes the CPU, AHB and APB buses clocks
//  */
//  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
//                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
//  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
//  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
//  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
//  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
//
//  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
//  {
//    Error_Handler();
//  }
//}
//
///* USER CODE BEGIN 4 */
//
//void LED_Green_Handler(void *param) {
//    while (1) {
//        SEGGER_SYSVIEW_PrintfTarget("Green LED Blinks");
//        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//        HAL_Delay(1100);
//        taskYIELD();
//    }
//
//}
//void LED_Orange_Handler(void *param) {
//    while (1) {
//        SEGGER_SYSVIEW_PrintfTarget("Orange LED Blinks");
//        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//        HAL_Delay(700);
//        taskYIELD();
//    }
//
//}
//void LED_Red_Handler(void *param) {
//    while (1) {
//        SEGGER_SYSVIEW_PrintfTarget("Red LED Blinks");
//        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//        HAL_Delay(300);
//        taskYIELD();
//    }
//
//}
///* USER CODE END 4 */
//
///**
//  * @brief  Period elapsed callback in non blocking mode
//  * @note   This function is called  when TIM6 interrupt took place, inside
//  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
//  * a global variable "uwTick" used as application time base.
//  * @param  htim : TIM handle
//  * @retval None
//  */
//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
//{
//  /* USER CODE BEGIN Callback 0 */
//
//  /* USER CODE END Callback 0 */
//  if (htim->Instance == TIM6)
//  {
//    HAL_IncTick();
//  }
//  /* USER CODE BEGIN Callback 1 */
//
//  /* USER CODE END Callback 1 */
//}
//
///**
//  * @brief  This function is executed in case of error occurrence.
//  * @retval None
//  */
//void Error_Handler(void)
//{
//  /* USER CODE BEGIN Error_Handler_Debug */
//    /* User can add his own implementation to report the HAL error return state */
//    __disable_irq();
//    while (1) {
//    }
//  /* USER CODE END Error_Handler_Debug */
//}
//#ifdef USE_FULL_ASSERT
///**
//  * @brief  Reports the name of the source file and the source line number
//  *         where the assert_param error has occurred.
//  * @param  file: pointer to the source file name
//  * @param  line: assert_param error line source number
//  * @retval None
//  */
//void assert_failed(uint8_t *file, uint32_t line)
//{
//  /* USER CODE BEGIN 6 */
//  /* User can add his own implementation to report the file name and line number,
//     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
//  /* USER CODE END 6 */
//}
//#endif /* USE_FULL_ASSERT */
/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include <stdlib.h>
#include <stdio.h>
#include "string.h"

//#include "measurement.h"

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "math.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define DWT_CTRL        (*(volatile uint32_t*)0XE0001000)

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
TaskHandle_t task1_handle;
TaskHandle_t task2_handle;
TaskHandle_t task3_handle;
TaskHandle_t task4_handle;
TaskHandle_t button_handle;
TaskHandle_t para_calc_handle;
TaskHandle_t print_handle;

QueueHandle_t q_print;
QueueHandle_t q_adc;

int cnt = 0, btn_pressed = 0;

volatile ADC_Struct_t adc;
RmsStructure obj_vrms;
RmsStructure obj_irms;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

static void LED_Green_Handler(void *parameters);
static void LED_Red_Handler(void *parameters);
static void LED_Yellow_Handler(void *parameters);
static void LED_Blue_Handler(void *parameters);
static void Button_Handler(void *parameters);
static void Print_Handler(void *parameters);
static void Para_Calc_Handler(void *parameters);
//void Print_Handler(char *print_str);

void Button_ISR(void);

extern void SEGGER_UART_init(uint32_t);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

	BaseType_t status;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &(adc.ADC1_Val), 8);
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &(adc.ADC2_Val), 8);
//	HAL_ADC_Start_DMA(&hadc3, (uint32_t*) &(adc.ADC3_Val), 8);

	SEGGER_UART_init(500000);
	// Enable the CYCCNT counter
	DWT_CTRL |= (1 << 0);

	SEGGER_SYSVIEW_Conf();

	status = xTaskCreate(LED_Green_Handler, "LED_Green_Task", 200, NULL, 2,
			&task1_handle);
	configASSERT(status == pdPASS);

	status = xTaskCreate(LED_Red_Handler, "LED_Red_Task", 200, NULL, 2,
			&task2_handle);
	configASSERT(status == pdPASS);

	status = xTaskCreate(LED_Yellow_Handler, "LED_Yellow_Task", 200, NULL, 2,
			&task3_handle);
	configASSERT(status == pdPASS);

	status = xTaskCreate(LED_Blue_Handler, "LED_Blue_Task", 200, NULL, 2,
			&task4_handle);
	configASSERT(status == pdPASS);

	status = xTaskCreate(Button_Handler, "Button_Task", 200, NULL, 2,
			&button_handle);
	configASSERT(status == pdPASS);

	status = xTaskCreate(Para_Calc_Handler, "All_Para_Calc_Task", 200, NULL, 2,
			&para_calc_handle);
	configASSERT(status == pdPASS);

	q_print = xQueueCreate(30, sizeof(char*));
	configASSERT(q_print != NULL);

	q_adc = xQueueCreate(2, sizeof(ADC_Struct_t));
	configASSERT(q_print != NULL);

	status = xTaskCreate(Print_Handler, "Print_Task", 200, NULL, 2,
			&print_handle);
	configASSERT(status == pdPASS);

	vTaskStartScheduler();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

void Button_ISR(void) {
	btn_pressed = 1;
}

void LED_Green_Handler(void *param) {
	char *str = "\n";	//"860\n";
	float ang = 0;
	while (1) {
//		SEGGER_SYSVIEW_PrintfTarget("Green LED Blinks");
//		HAL_GPIO_TogglePin(LEDGreen_GPIO_Port, LEDGreen_Pin);
//		Print_Handler(str);
		ang += 0.001f;
		if (ang >= 6.27f) {
			ang = 0;
		}
		float val = sin(ang);
		sprintf((char*) str, "%03.0f\n", val); // /* , |%04.0f : sysVar.nMotor*/

		xQueueSend(q_print, &str, portMAX_DELAY);
		vTaskDelay(pdMS_TO_TICKS(500));
		taskYIELD();
	}

}

void LED_Red_Handler(void *param) {
	const char *str = "102\n";
	while (1) {
//		SEGGER_SYSVIEW_PrintfTarget("Red LED Blinks");
//		HAL_GPIO_TogglePin(LEDRed_GPIO_Port, LEDRed_Pin);
//		Print_Handler(str);

//		xQueueSend(q_print, &str, portMAX_DELAY);
		vTaskDelay(pdMS_TO_TICKS(1000));
		taskYIELD();
	}

}

void LED_Yellow_Handler(void *param) {
	const char *str = "510\n";
	while (1) {
//		SEGGER_SYSVIEW_PrintfTarget("Yellow LED Blinks");
//		HAL_GPIO_TogglePin(LEDYellow_GPIO_Port, LEDYellow_Pin);
//		Print_Handler(str);

//		xQueueSend(q_print, &str, portMAX_DELAY);
		vTaskDelay(pdMS_TO_TICKS(1100));
		taskYIELD();
	}
}
void LED_Blue_Handler(void *param) {
	const char *str = "332\n";
	while (1) {
//		SEGGER_SYSVIEW_PrintfTarget("Blue LED Blinks");
//		HAL_GPIO_TogglePin(LEDBlue_GPIO_Port, LEDBlue_Pin);
//		Print_Handler((char*) str);

//		xQueueSend(q_print, &str, portMAX_DELAY);
		vTaskDelay(pdMS_TO_TICKS(800));
		taskYIELD();
	}
}
void Button_Handler(void *param) {
	static int cnt = 0;
	while (1) {
//		SEGGER_SYSVIEW_PrintfTarget("Button Cheking");
		if (btn_pressed == 1) {
			btn_pressed = 0;
			if (cnt == 0) {
				vTaskDelete(task1_handle);
				HAL_GPIO_WritePin(LEDGreen_GPIO_Port, LEDGreen_Pin,
						GPIO_PIN_SET);
				cnt++;
			} else if (cnt == 1) {
				vTaskDelete(task2_handle);
				HAL_GPIO_WritePin(LEDRed_GPIO_Port, LEDRed_Pin, GPIO_PIN_SET);
				cnt++;
			} else if (cnt == 2) {
				vTaskDelete(task3_handle);
				HAL_GPIO_WritePin(LEDYellow_GPIO_Port, LEDYellow_Pin,
						GPIO_PIN_SET);
				cnt++;
			} else if (cnt == 3) {
				vTaskDelete(task4_handle);
				HAL_GPIO_WritePin(LEDBlue_GPIO_Port, LEDBlue_Pin, GPIO_PIN_SET);
				cnt++;
			}
			HAL_Delay(100);
		}
		taskYIELD();
	}
}

void Para_Calc_Handler(void *param) {
	ADC_Struct_t adc_pc;
	char *str = "";
	while (1) {
//		SEGGER_SYSVIEW_PrintfTarget("Red LED Blinks");
//		HAL_GPIO_TogglePin(LEDRed_GPIO_Port, LEDRed_Pin);
//		Print_Handler(str);

//		xQueueSend(q_print, &str, portMAX_DELAY);
//		vTaskDelay(pdMS_TO_TICKS(1000));
		xQueueReceive(q_adc, &adc_pc, portMAX_DELAY);
		obj_vrms.input = adc_pc.ADC1_Val[0];
		obj_irms.input = adc_pc.ADC1_Val[1];

		rmsCalulation(&obj_vrms, (1.0f / ((float) configTICK_RATE_HZ)), F_REF,
				0.6f);
		rmsCalulation(&obj_irms, (1.0f / ((float) configTICK_RATE_HZ)), F_REF,
				0.6f);

		float vrms = obj_vrms.output;
		float irms = obj_irms.output;

		float prms = vrms * irms;
		float temprature = adc_pc.ADC2_Val[0];

		sprintf((char*) str, "%03.0f|%03.1f|%04.0f|%02.0f\n", vrms, irms, prms,
				temprature); // /* , |%04.0f : sysVar.nMotor*/
		xQueueSend(q_adc, &str, portMAX_DELAY);

		taskYIELD();
	}

}

void Print_Handler(void *param) {
	char *print_str = "start\n";
	while (1) {
		xQueueReceive(q_print, (void*) &print_str, portMAX_DELAY);

		HAL_UART_Transmit(&huart1, (uint8_t*) print_str,
				strlen((char*) print_str),
				HAL_MAX_DELAY);

	}

}

//void Print_Handler(void *param) {
//	uint32_t *print_str;
//		HAL_UART_Transmit(&huart2, (uint8_t*) print_str,strlen((char*) print_str), HAL_MAX_DELAY);
//	while (1) {
//	}
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {

	if (hadc == &hadc1) {
		xQueueSendFromISR(q_adc, (void* ) &adc, NULL);
	} else if (hadc == &hadc2) {
		xQueueSendFromISR(q_adc, (void* ) &adc, NULL);
	}
//	else if (hadc == &hadc3) {
//
//	}
}
/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
  {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
